
MM_initial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000035e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000023e  00800060  000035e6  0000367a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  0080029e  0080029e  000038b8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000038b8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000038e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d0  00000000  00000000  00003924  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006977  00000000  00000000  00003af4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000dd3  00000000  00000000  0000a46b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000281f  00000000  00000000  0000b23e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000590  00000000  00000000  0000da60  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000096e  00000000  00000000  0000dff0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000047ad  00000000  00000000  0000e95e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a0  00000000  00000000  0001310b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__ctors_end>
       4:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
       8:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
       c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      10:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      14:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      18:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      1c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      20:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      24:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      28:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      2c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      30:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      34:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      38:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      3c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      40:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      44:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      48:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      4c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      50:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      54:	50 15       	cp	r21, r0
      56:	54 15       	cp	r21, r4
      58:	59 15       	cp	r21, r9
      5a:	5e 15       	cp	r21, r14
      5c:	63 15       	cp	r22, r3
      5e:	68 15       	cp	r22, r8
      60:	6d 15       	cp	r22, r13
      62:	72 15       	cp	r23, r2
      64:	07 63       	ori	r16, 0x37	; 55
      66:	42 36       	cpi	r20, 0x62	; 98
      68:	b7 9b       	sbis	0x16, 7	; 22
      6a:	d8 a7       	std	Y+40, r29	; 0x28
      6c:	1a 39       	cpi	r17, 0x9A	; 154
      6e:	68 56       	subi	r22, 0x68	; 104
      70:	18 ae       	std	Y+56, r1	; 0x38
      72:	ba ab       	std	Y+50, r27	; 0x32
      74:	55 8c       	ldd	r5, Z+29	; 0x1d
      76:	1d 3c       	cpi	r17, 0xCD	; 205
      78:	b7 cc       	rjmp	.-1682   	; 0xfffff9e8 <__eeprom_end+0xff7ef9e8>
      7a:	57 63       	ori	r21, 0x37	; 55
      7c:	bd 6d       	ori	r27, 0xDD	; 221
      7e:	ed fd       	.word	0xfded	; ????
      80:	75 3e       	cpi	r23, 0xE5	; 229
      82:	f6 17       	cp	r31, r22
      84:	72 31       	cpi	r23, 0x12	; 18
      86:	bf 00       	.word	0x00bf	; ????
      88:	00 00       	nop
      8a:	80 3f       	cpi	r24, 0xF0	; 240
      8c:	08 00       	.word	0x0008	; ????
      8e:	00 00       	nop
      90:	be 92       	st	-X, r11
      92:	24 49       	sbci	r18, 0x94	; 148
      94:	12 3e       	cpi	r17, 0xE2	; 226
      96:	ab aa       	std	Y+51, r10	; 0x33
      98:	aa 2a       	or	r10, r26
      9a:	be cd       	rjmp	.-1156   	; 0xfffffc18 <__eeprom_end+0xff7efc18>
      9c:	cc cc       	rjmp	.-1640   	; 0xfffffa36 <__eeprom_end+0xff7efa36>
      9e:	4c 3e       	cpi	r20, 0xEC	; 236
      a0:	00 00       	nop
      a2:	00 80       	ld	r0, Z
      a4:	be ab       	std	Y+54, r27	; 0x36
      a6:	aa aa       	std	Y+50, r10	; 0x32
      a8:	aa 3e       	cpi	r26, 0xEA	; 234
      aa:	00 00       	nop
      ac:	00 00       	nop
      ae:	bf 00       	.word	0x00bf	; ????
      b0:	00 00       	nop
      b2:	80 3f       	cpi	r24, 0xF0	; 240
      b4:	00 00       	nop
      b6:	00 00       	nop
      b8:	00 08       	sbc	r0, r0
      ba:	41 78       	andi	r20, 0x81	; 129
      bc:	d3 bb       	out	0x13, r29	; 19
      be:	43 87       	std	Z+11, r20	; 0x0b
      c0:	d1 13       	cpse	r29, r17
      c2:	3d 19       	sub	r19, r13
      c4:	0e 3c       	cpi	r16, 0xCE	; 206
      c6:	c3 bd       	out	0x23, r28	; 35
      c8:	42 82       	std	Z+2, r4	; 0x02
      ca:	ad 2b       	or	r26, r29
      cc:	3e 68       	ori	r19, 0x8E	; 142
      ce:	ec 82       	std	Y+4, r14	; 0x04
      d0:	76 be       	out	0x36, r7	; 54
      d2:	d9 8f       	std	Y+25, r29	; 0x19
      d4:	e1 a9       	ldd	r30, Z+49	; 0x31
      d6:	3e 4c       	sbci	r19, 0xCE	; 206
      d8:	80 ef       	ldi	r24, 0xF0	; 240
      da:	ff be       	out	0x3f, r15	; 63
      dc:	01 c4       	rjmp	.+2050   	; 0x8e0 <__stack+0x81>
      de:	ff 7f       	andi	r31, 0xFF	; 255
      e0:	3f 00       	.word	0x003f	; ????
      e2:	00 00       	nop
	...

000000e6 <__ctors_end>:
      e6:	11 24       	eor	r1, r1
      e8:	1f be       	out	0x3f, r1	; 63
      ea:	cf e5       	ldi	r28, 0x5F	; 95
      ec:	d8 e0       	ldi	r29, 0x08	; 8
      ee:	de bf       	out	0x3e, r29	; 62
      f0:	cd bf       	out	0x3d, r28	; 61

000000f2 <__do_copy_data>:
      f2:	12 e0       	ldi	r17, 0x02	; 2
      f4:	a0 e6       	ldi	r26, 0x60	; 96
      f6:	b0 e0       	ldi	r27, 0x00	; 0
      f8:	e6 ee       	ldi	r30, 0xE6	; 230
      fa:	f5 e3       	ldi	r31, 0x35	; 53
      fc:	02 c0       	rjmp	.+4      	; 0x102 <__do_copy_data+0x10>
      fe:	05 90       	lpm	r0, Z+
     100:	0d 92       	st	X+, r0
     102:	ae 39       	cpi	r26, 0x9E	; 158
     104:	b1 07       	cpc	r27, r17
     106:	d9 f7       	brne	.-10     	; 0xfe <__do_copy_data+0xc>

00000108 <__do_clear_bss>:
     108:	22 e0       	ldi	r18, 0x02	; 2
     10a:	ae e9       	ldi	r26, 0x9E	; 158
     10c:	b2 e0       	ldi	r27, 0x02	; 2
     10e:	01 c0       	rjmp	.+2      	; 0x112 <.do_clear_bss_start>

00000110 <.do_clear_bss_loop>:
     110:	1d 92       	st	X+, r1

00000112 <.do_clear_bss_start>:
     112:	a4 3a       	cpi	r26, 0xA4	; 164
     114:	b2 07       	cpc	r27, r18
     116:	e1 f7       	brne	.-8      	; 0x110 <.do_clear_bss_loop>
     118:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <main>
     11c:	0c 94 f1 1a 	jmp	0x35e2	; 0x35e2 <_exit>

00000120 <__bad_interrupt>:
     120:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000124 <Read_Volt>:
#define Vtotpin ADC_4
#define IDCpin ADC_6
#define Itotpin ADC_4

fint32_t Read_Volt(uint16_t Vout,uint16_t Vtot, uint8_t Vrange,uint8_t mode)
{
     124:	8f 92       	push	r8
     126:	9f 92       	push	r9
     128:	af 92       	push	r10
     12a:	bf 92       	push	r11
     12c:	cf 92       	push	r12
     12e:	df 92       	push	r13
     130:	ef 92       	push	r14
     132:	ff 92       	push	r15
	//check if it didn't exceed the max range (positive or negative)
	if(1003<=Vout || Vout<=206){
     134:	fc 01       	movw	r30, r24
     136:	ef 5c       	subi	r30, 0xCF	; 207
     138:	f1 09       	sbc	r31, r1
     13a:	ec 31       	cpi	r30, 0x1C	; 28
     13c:	33 e0       	ldi	r19, 0x03	; 3
     13e:	f3 07       	cpc	r31, r19
     140:	08 f0       	brcs	.+2      	; 0x144 <Read_Volt+0x20>
     142:	e5 c0       	rjmp	.+458    	; 0x30e <Read_Volt+0x1ea>
		return 999.99;
	}
	//check if it was too small
	if(518<=Vout && Vout <=524){
     144:	e7 53       	subi	r30, 0x37	; 55
     146:	f1 40       	sbci	r31, 0x01	; 1
     148:	37 97       	sbiw	r30, 0x07	; 7
     14a:	08 f4       	brcc	.+2      	; 0x14e <Read_Volt+0x2a>
     14c:	e5 c0       	rjmp	.+458    	; 0x318 <Read_Volt+0x1f4>
	
	fint32_t Vdivider;
	Vdivider = -1;
	fint32_t Vconst;
	Vconst  = -1;
	switch(Vrange)
     14e:	42 33       	cpi	r20, 0x32	; 50
     150:	a1 f0       	breq	.+40     	; 0x17a <Read_Volt+0x56>
     152:	20 f4       	brcc	.+8      	; 0x15c <Read_Volt+0x38>
     154:	41 33       	cpi	r20, 0x31	; 49
     156:	09 f4       	brne	.+2      	; 0x15a <Read_Volt+0x36>
     158:	4f c0       	rjmp	.+158    	; 0x1f8 <Read_Volt+0xd4>
     15a:	04 c0       	rjmp	.+8      	; 0x164 <Read_Volt+0x40>
     15c:	43 33       	cpi	r20, 0x33	; 51
     15e:	11 f1       	breq	.+68     	; 0x1a4 <Read_Volt+0x80>
     160:	44 33       	cpi	r20, 0x34	; 52
     162:	a9 f1       	breq	.+106    	; 0x1ce <Read_Volt+0xaa>
	}
	
	fint32_t Vdivider;
	Vdivider = -1;
	fint32_t Vconst;
	Vconst  = -1;
     164:	0f 2e       	mov	r0, r31
     166:	81 2c       	mov	r8, r1
     168:	91 2c       	mov	r9, r1
     16a:	f0 e8       	ldi	r31, 0x80	; 128
     16c:	af 2e       	mov	r10, r31
     16e:	ff eb       	ldi	r31, 0xBF	; 191
     170:	bf 2e       	mov	r11, r31
     172:	f0 2d       	mov	r31, r0
	if(518<=Vout && Vout <=524){
		return 0.0;
	}
	
	fint32_t Vdivider;
	Vdivider = -1;
     174:	75 01       	movw	r14, r10
     176:	64 01       	movw	r12, r8
     178:	53 c0       	rjmp	.+166    	; 0x220 <Read_Volt+0xfc>
		Vdivider = 5.984;
		Vconst = 2.47859;
		break;
		case '2'://3V
		Vdivider = 0.59884;
		Vconst = 2.5418;
     17a:	0f 2e       	mov	r0, r31
     17c:	fa ed       	ldi	r31, 0xDA	; 218
     17e:	8f 2e       	mov	r8, r31
     180:	fc ea       	ldi	r31, 0xAC	; 172
     182:	9f 2e       	mov	r9, r31
     184:	f2 e2       	ldi	r31, 0x22	; 34
     186:	af 2e       	mov	r10, r31
     188:	f0 e4       	ldi	r31, 0x40	; 64
     18a:	bf 2e       	mov	r11, r31
     18c:	f0 2d       	mov	r31, r0
		case '1'://300mV
		Vdivider = 5.984;
		Vconst = 2.47859;
		break;
		case '2'://3V
		Vdivider = 0.59884;
     18e:	0f 2e       	mov	r0, r31
     190:	f4 e9       	ldi	r31, 0x94	; 148
     192:	cf 2e       	mov	r12, r31
     194:	fd e4       	ldi	r31, 0x4D	; 77
     196:	df 2e       	mov	r13, r31
     198:	f9 e1       	ldi	r31, 0x19	; 25
     19a:	ef 2e       	mov	r14, r31
     19c:	ff e3       	ldi	r31, 0x3F	; 63
     19e:	ff 2e       	mov	r15, r31
     1a0:	f0 2d       	mov	r31, r0
		Vconst = 2.5418;
		break;
     1a2:	3e c0       	rjmp	.+124    	; 0x220 <Read_Volt+0xfc>
		case '3'://30V
		Vdivider = 0.0587325;
		Vconst = 2.5144325;
     1a4:	0f 2e       	mov	r0, r31
     1a6:	f6 e7       	ldi	r31, 0x76	; 118
     1a8:	8f 2e       	mov	r8, r31
     1aa:	fc ee       	ldi	r31, 0xEC	; 236
     1ac:	9f 2e       	mov	r9, r31
     1ae:	f0 e2       	ldi	r31, 0x20	; 32
     1b0:	af 2e       	mov	r10, r31
     1b2:	f0 e4       	ldi	r31, 0x40	; 64
     1b4:	bf 2e       	mov	r11, r31
     1b6:	f0 2d       	mov	r31, r0
		case '2'://3V
		Vdivider = 0.59884;
		Vconst = 2.5418;
		break;
		case '3'://30V
		Vdivider = 0.0587325;
     1b8:	0f 2e       	mov	r0, r31
     1ba:	fd e7       	ldi	r31, 0x7D	; 125
     1bc:	cf 2e       	mov	r12, r31
     1be:	f1 e9       	ldi	r31, 0x91	; 145
     1c0:	df 2e       	mov	r13, r31
     1c2:	f0 e7       	ldi	r31, 0x70	; 112
     1c4:	ef 2e       	mov	r14, r31
     1c6:	fd e3       	ldi	r31, 0x3D	; 61
     1c8:	ff 2e       	mov	r15, r31
     1ca:	f0 2d       	mov	r31, r0
		Vconst = 2.5144325;
		break;
     1cc:	29 c0       	rjmp	.+82     	; 0x220 <Read_Volt+0xfc>
		case '4'://400V
		Vdivider = 0.0047988;
		Vconst = 2.545246;
     1ce:	0f 2e       	mov	r0, r31
     1d0:	ff e4       	ldi	r31, 0x4F	; 79
     1d2:	8f 2e       	mov	r8, r31
     1d4:	f5 ee       	ldi	r31, 0xE5	; 229
     1d6:	9f 2e       	mov	r9, r31
     1d8:	f2 e2       	ldi	r31, 0x22	; 34
     1da:	af 2e       	mov	r10, r31
     1dc:	f0 e4       	ldi	r31, 0x40	; 64
     1de:	bf 2e       	mov	r11, r31
     1e0:	f0 2d       	mov	r31, r0
		case '3'://30V
		Vdivider = 0.0587325;
		Vconst = 2.5144325;
		break;
		case '4'://400V
		Vdivider = 0.0047988;
     1e2:	0f 2e       	mov	r0, r31
     1e4:	f1 e4       	ldi	r31, 0x41	; 65
     1e6:	cf 2e       	mov	r12, r31
     1e8:	ff e3       	ldi	r31, 0x3F	; 63
     1ea:	df 2e       	mov	r13, r31
     1ec:	fd e9       	ldi	r31, 0x9D	; 157
     1ee:	ef 2e       	mov	r14, r31
     1f0:	fb e3       	ldi	r31, 0x3B	; 59
     1f2:	ff 2e       	mov	r15, r31
     1f4:	f0 2d       	mov	r31, r0
		Vconst = 2.545246;
		break;
     1f6:	14 c0       	rjmp	.+40     	; 0x220 <Read_Volt+0xfc>
	Vconst  = -1;
	switch(Vrange)
	{
		case '1'://300mV
		Vdivider = 5.984;
		Vconst = 2.47859;
     1f8:	0f 2e       	mov	r0, r31
     1fa:	f8 e3       	ldi	r31, 0x38	; 56
     1fc:	8f 2e       	mov	r8, r31
     1fe:	f1 ea       	ldi	r31, 0xA1	; 161
     200:	9f 2e       	mov	r9, r31
     202:	fe e1       	ldi	r31, 0x1E	; 30
     204:	af 2e       	mov	r10, r31
     206:	f0 e4       	ldi	r31, 0x40	; 64
     208:	bf 2e       	mov	r11, r31
     20a:	f0 2d       	mov	r31, r0
	fint32_t Vconst;
	Vconst  = -1;
	switch(Vrange)
	{
		case '1'://300mV
		Vdivider = 5.984;
     20c:	0f 2e       	mov	r0, r31
     20e:	fe ee       	ldi	r31, 0xEE	; 238
     210:	cf 2e       	mov	r12, r31
     212:	fc e7       	ldi	r31, 0x7C	; 124
     214:	df 2e       	mov	r13, r31
     216:	ff eb       	ldi	r31, 0xBF	; 191
     218:	ef 2e       	mov	r14, r31
     21a:	f0 e4       	ldi	r31, 0x40	; 64
     21c:	ff 2e       	mov	r15, r31
     21e:	f0 2d       	mov	r31, r0
		Vdivider = 0.0047988;
		Vconst = 2.545246;
		break;
	}
	
	switch(mode){
     220:	21 33       	cpi	r18, 0x31	; 49
     222:	39 f1       	breq	.+78     	; 0x272 <Read_Volt+0x14e>
     224:	22 33       	cpi	r18, 0x32	; 50
     226:	09 f0       	breq	.+2      	; 0x22a <Read_Volt+0x106>
     228:	71 c0       	rjmp	.+226    	; 0x30c <Read_Volt+0x1e8>
		case '2':{ //DC
		fint32_t Val = Vout*5.0/1024.0;
     22a:	bc 01       	movw	r22, r24
     22c:	80 e0       	ldi	r24, 0x00	; 0
     22e:	90 e0       	ldi	r25, 0x00	; 0
     230:	0e 94 10 18 	call	0x3020	; 0x3020 <__floatunsisf>
     234:	20 e0       	ldi	r18, 0x00	; 0
     236:	30 e0       	ldi	r19, 0x00	; 0
     238:	40 ea       	ldi	r20, 0xA0	; 160
     23a:	50 e4       	ldi	r21, 0x40	; 64
     23c:	0e 94 d7 18 	call	0x31ae	; 0x31ae <__mulsf3>
     240:	20 e0       	ldi	r18, 0x00	; 0
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e8       	ldi	r20, 0x80	; 128
     246:	5a e3       	ldi	r21, 0x3A	; 58
     248:	0e 94 d7 18 	call	0x31ae	; 0x31ae <__mulsf3>
		Val = ((Val-Vconst)/(Vdivider)); //equation
     24c:	a5 01       	movw	r20, r10
     24e:	94 01       	movw	r18, r8
     250:	0e 94 c1 16 	call	0x2d82	; 0x2d82 <__subsf3>
     254:	a7 01       	movw	r20, r14
     256:	96 01       	movw	r18, r12
     258:	0e 94 33 17 	call	0x2e66	; 0x2e66 <__divsf3>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     25c:	ef e0       	ldi	r30, 0x0F	; 15
     25e:	f7 e2       	ldi	r31, 0x27	; 39
     260:	31 97       	sbiw	r30, 0x01	; 1
     262:	f1 f7       	brne	.-4      	; 0x260 <Read_Volt+0x13c>
     264:	00 c0       	rjmp	.+0      	; 0x266 <Read_Volt+0x142>
     266:	00 00       	nop
		LCD_HomeScreen();
		LCD_Display_String("Volt = ");
		LCD_Display_FloatNumber(Val,4);
		_delay_ms(5000);
		*/
		return Val;
     268:	56 2f       	mov	r21, r22
     26a:	47 2f       	mov	r20, r23
     26c:	38 2f       	mov	r19, r24
     26e:	29 2f       	mov	r18, r25
     270:	5c c0       	rjmp	.+184    	; 0x32a <Read_Volt+0x206>
			LCD_Display_Location(0,1);
			LCD_Display_String("Vout Ac = ");
			LCD_Display_FloatNumber(Vout,3);
			_delay_ms(1000);
			*/		
			if(Vtot<=(Vout+2)){ //AC is zero
     272:	9c 01       	movw	r18, r24
     274:	2e 5f       	subi	r18, 0xFE	; 254
     276:	3f 4f       	sbci	r19, 0xFF	; 255
     278:	26 17       	cp	r18, r22
     27a:	37 07       	cpc	r19, r23
     27c:	08 f0       	brcs	.+2      	; 0x280 <Read_Volt+0x15c>
     27e:	51 c0       	rjmp	.+162    	; 0x322 <Read_Volt+0x1fe>
				return 0.0;
				}
			switch(Vrange)
     280:	42 33       	cpi	r20, 0x32	; 50
     282:	79 f0       	breq	.+30     	; 0x2a2 <Read_Volt+0x17e>
     284:	18 f4       	brcc	.+6      	; 0x28c <Read_Volt+0x168>
     286:	41 33       	cpi	r20, 0x31	; 49
     288:	31 f0       	breq	.+12     	; 0x296 <Read_Volt+0x172>
     28a:	1c c0       	rjmp	.+56     	; 0x2c4 <Read_Volt+0x1a0>
     28c:	43 33       	cpi	r20, 0x33	; 51
     28e:	79 f0       	breq	.+30     	; 0x2ae <Read_Volt+0x18a>
     290:	44 33       	cpi	r20, 0x34	; 52
     292:	99 f0       	breq	.+38     	; 0x2ba <Read_Volt+0x196>
     294:	17 c0       	rjmp	.+46     	; 0x2c4 <Read_Volt+0x1a0>
			{
				case '1'://300mV
				Vout=Vtot-Vout+506;
     296:	68 1b       	sub	r22, r24
     298:	79 0b       	sbc	r23, r25
     29a:	cb 01       	movw	r24, r22
     29c:	86 50       	subi	r24, 0x06	; 6
     29e:	9e 4f       	sbci	r25, 0xFE	; 254
				break;
     2a0:	11 c0       	rjmp	.+34     	; 0x2c4 <Read_Volt+0x1a0>
				case '2'://3V
				Vout=Vtot-Vout+520;
     2a2:	68 1b       	sub	r22, r24
     2a4:	79 0b       	sbc	r23, r25
     2a6:	cb 01       	movw	r24, r22
     2a8:	88 5f       	subi	r24, 0xF8	; 248
     2aa:	9d 4f       	sbci	r25, 0xFD	; 253
				break;
     2ac:	0b c0       	rjmp	.+22     	; 0x2c4 <Read_Volt+0x1a0>
				case '3'://30V
				Vout=Vtot-Vout+516;
     2ae:	68 1b       	sub	r22, r24
     2b0:	79 0b       	sbc	r23, r25
     2b2:	cb 01       	movw	r24, r22
     2b4:	8c 5f       	subi	r24, 0xFC	; 252
     2b6:	9d 4f       	sbci	r25, 0xFD	; 253
				break;
     2b8:	05 c0       	rjmp	.+10     	; 0x2c4 <Read_Volt+0x1a0>
				case '4'://400V
				Vout=Vtot-Vout+522;
     2ba:	68 1b       	sub	r22, r24
     2bc:	79 0b       	sbc	r23, r25
     2be:	cb 01       	movw	r24, r22
     2c0:	86 5f       	subi	r24, 0xF6	; 246
     2c2:	9d 4f       	sbci	r25, 0xFD	; 253
				break;
			}					
			fint32_t Val;
			Val = Vout*5.0/1024.0;
     2c4:	bc 01       	movw	r22, r24
     2c6:	80 e0       	ldi	r24, 0x00	; 0
     2c8:	90 e0       	ldi	r25, 0x00	; 0
     2ca:	0e 94 10 18 	call	0x3020	; 0x3020 <__floatunsisf>
     2ce:	20 e0       	ldi	r18, 0x00	; 0
     2d0:	30 e0       	ldi	r19, 0x00	; 0
     2d2:	40 ea       	ldi	r20, 0xA0	; 160
     2d4:	50 e4       	ldi	r21, 0x40	; 64
     2d6:	0e 94 d7 18 	call	0x31ae	; 0x31ae <__mulsf3>
     2da:	20 e0       	ldi	r18, 0x00	; 0
     2dc:	30 e0       	ldi	r19, 0x00	; 0
     2de:	40 e8       	ldi	r20, 0x80	; 128
     2e0:	5a e3       	ldi	r21, 0x3A	; 58
     2e2:	0e 94 d7 18 	call	0x31ae	; 0x31ae <__mulsf3>
			Val = ((Val-Vconst)/(Vdivider)); //equation
     2e6:	a5 01       	movw	r20, r10
     2e8:	94 01       	movw	r18, r8
     2ea:	0e 94 c1 16 	call	0x2d82	; 0x2d82 <__subsf3>
     2ee:	a7 01       	movw	r20, r14
     2f0:	96 01       	movw	r18, r12
     2f2:	0e 94 33 17 	call	0x2e66	; 0x2e66 <__divsf3>
     2f6:	ef e0       	ldi	r30, 0x0F	; 15
     2f8:	f7 e2       	ldi	r31, 0x27	; 39
     2fa:	31 97       	sbiw	r30, 0x01	; 1
     2fc:	f1 f7       	brne	.-4      	; 0x2fa <Read_Volt+0x1d6>
     2fe:	00 c0       	rjmp	.+0      	; 0x300 <Read_Volt+0x1dc>
     300:	00 00       	nop
			LCD_ClearScreen();
			LCD_HomeScreen();
			*/
			_delay_ms(5);
			
			return Val;
     302:	56 2f       	mov	r21, r22
     304:	47 2f       	mov	r20, r23
     306:	38 2f       	mov	r19, r24
     308:	29 2f       	mov	r18, r25
     30a:	0f c0       	rjmp	.+30     	; 0x32a <Read_Volt+0x206>
		}
	}
	
}
     30c:	0e c0       	rjmp	.+28     	; 0x32a <Read_Volt+0x206>

fint32_t Read_Volt(uint16_t Vout,uint16_t Vtot, uint8_t Vrange,uint8_t mode)
{
	//check if it didn't exceed the max range (positive or negative)
	if(1003<=Vout || Vout<=206){
		return 999.99;
     30e:	5c e5       	ldi	r21, 0x5C	; 92
     310:	4f ef       	ldi	r20, 0xFF	; 255
     312:	39 e7       	ldi	r19, 0x79	; 121
     314:	24 e4       	ldi	r18, 0x44	; 68
     316:	09 c0       	rjmp	.+18     	; 0x32a <Read_Volt+0x206>
	}
	//check if it was too small
	if(518<=Vout && Vout <=524){
		return 0.0;
     318:	50 e0       	ldi	r21, 0x00	; 0
     31a:	40 e0       	ldi	r20, 0x00	; 0
     31c:	30 e0       	ldi	r19, 0x00	; 0
     31e:	20 e0       	ldi	r18, 0x00	; 0
     320:	04 c0       	rjmp	.+8      	; 0x32a <Read_Volt+0x206>
			LCD_Display_String("Vout Ac = ");
			LCD_Display_FloatNumber(Vout,3);
			_delay_ms(1000);
			*/		
			if(Vtot<=(Vout+2)){ //AC is zero
				return 0.0;
     322:	50 e0       	ldi	r21, 0x00	; 0
     324:	40 e0       	ldi	r20, 0x00	; 0
     326:	30 e0       	ldi	r19, 0x00	; 0
     328:	20 e0       	ldi	r18, 0x00	; 0
			
			return Val;
		}
	}
	
}
     32a:	65 2f       	mov	r22, r21
     32c:	74 2f       	mov	r23, r20
     32e:	83 2f       	mov	r24, r19
     330:	92 2f       	mov	r25, r18
     332:	ff 90       	pop	r15
     334:	ef 90       	pop	r14
     336:	df 90       	pop	r13
     338:	cf 90       	pop	r12
     33a:	bf 90       	pop	r11
     33c:	af 90       	pop	r10
     33e:	9f 90       	pop	r9
     340:	8f 90       	pop	r8
     342:	08 95       	ret

00000344 <Read_Amp>:

fint32_t Read_Amp(uint16_t x,uint16_t Itot, uint8_t Irange,uint8_t mode)
{	
     344:	8f 92       	push	r8
     346:	9f 92       	push	r9
     348:	af 92       	push	r10
     34a:	bf 92       	push	r11
     34c:	cf 92       	push	r12
     34e:	df 92       	push	r13
     350:	ef 92       	push	r14
     352:	ff 92       	push	r15
     354:	cf 93       	push	r28
	//check if it didn't exceed the max range (positive or negative)
	if(810<=x || x<=200){
     356:	bc 01       	movw	r22, r24
     358:	69 5c       	subi	r22, 0xC9	; 201
     35a:	71 09       	sbc	r23, r1
     35c:	61 36       	cpi	r22, 0x61	; 97
     35e:	32 e0       	ldi	r19, 0x02	; 2
     360:	73 07       	cpc	r23, r19
     362:	08 f0       	brcs	.+2      	; 0x366 <Read_Amp+0x22>
     364:	86 c0       	rjmp	.+268    	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
		return 999.99;
	}
	//check if it was too small
	if(406<=x && x <=414){
     366:	6d 5c       	subi	r22, 0xCD	; 205
     368:	71 09       	sbc	r23, r1
     36a:	69 30       	cpi	r22, 0x09	; 9
     36c:	71 05       	cpc	r23, r1
     36e:	08 f4       	brcc	.+2      	; 0x372 <Read_Amp+0x2e>
     370:	85 c0       	rjmp	.+266    	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
     372:	c4 2f       	mov	r28, r20
	}
	
	// I_TO_V_OUT_MCU = I_Slope * I_input + I_intercept
	fint32_t I_input = -1;
	fint32_t I_TO_V_OUT_MCU = 0;
	switch(mode){
     374:	21 53       	subi	r18, 0x31	; 49
     376:	22 30       	cpi	r18, 0x02	; 2
     378:	a0 f4       	brcc	.+40     	; 0x3a2 <Read_Amp+0x5e>
		case '1': //AC
			I_TO_V_OUT_MCU = (Itot * 5.0) / 1024.0;
		case '2': //DC
			I_TO_V_OUT_MCU = (x * 5.0) / 1024.0;	
     37a:	bc 01       	movw	r22, r24
     37c:	80 e0       	ldi	r24, 0x00	; 0
     37e:	90 e0       	ldi	r25, 0x00	; 0
     380:	0e 94 10 18 	call	0x3020	; 0x3020 <__floatunsisf>
     384:	20 e0       	ldi	r18, 0x00	; 0
     386:	30 e0       	ldi	r19, 0x00	; 0
     388:	40 ea       	ldi	r20, 0xA0	; 160
     38a:	50 e4       	ldi	r21, 0x40	; 64
     38c:	0e 94 d7 18 	call	0x31ae	; 0x31ae <__mulsf3>
     390:	20 e0       	ldi	r18, 0x00	; 0
     392:	30 e0       	ldi	r19, 0x00	; 0
     394:	40 e8       	ldi	r20, 0x80	; 128
     396:	5a e3       	ldi	r21, 0x3A	; 58
     398:	0e 94 d7 18 	call	0x31ae	; 0x31ae <__mulsf3>
     39c:	6b 01       	movw	r12, r22
     39e:	7c 01       	movw	r14, r24
     3a0:	03 c0       	rjmp	.+6      	; 0x3a8 <Read_Amp+0x64>
		return 0.0;
	}
	
	// I_TO_V_OUT_MCU = I_Slope * I_input + I_intercept
	fint32_t I_input = -1;
	fint32_t I_TO_V_OUT_MCU = 0;
     3a2:	c1 2c       	mov	r12, r1
     3a4:	d1 2c       	mov	r13, r1
     3a6:	76 01       	movw	r14, r12
		case '2': //DC
			I_TO_V_OUT_MCU = (x * 5.0) / 1024.0;	
	}
	fint32_t I_Slope     = -1;
	fint32_t I_intercept = -1;
	switch(Irange)
     3a8:	c2 33       	cpi	r28, 0x32	; 50
     3aa:	09 f4       	brne	.+2      	; 0x3ae <Read_Amp+0x6a>
     3ac:	41 c0       	rjmp	.+130    	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
     3ae:	18 f4       	brcc	.+6      	; 0x3b6 <Read_Amp+0x72>
     3b0:	c1 33       	cpi	r28, 0x31	; 49
     3b2:	31 f0       	breq	.+12     	; 0x3c0 <Read_Amp+0x7c>
     3b4:	32 c0       	rjmp	.+100    	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
     3b6:	c3 33       	cpi	r28, 0x33	; 51
     3b8:	91 f0       	breq	.+36     	; 0x3de <Read_Amp+0x9a>
     3ba:	c4 33       	cpi	r28, 0x34	; 52
     3bc:	f9 f0       	breq	.+62     	; 0x3fc <Read_Amp+0xb8>
     3be:	2d c0       	rjmp	.+90     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
	{
		case '1'://2mA
		I_Slope     = 0.86857;
		I_intercept = 2.263;
     3c0:	2e ef       	ldi	r18, 0xFE	; 254
     3c2:	34 ed       	ldi	r19, 0xD4	; 212
     3c4:	40 e1       	ldi	r20, 0x10	; 16
     3c6:	50 e4       	ldi	r21, 0x40	; 64
	fint32_t I_Slope     = -1;
	fint32_t I_intercept = -1;
	switch(Irange)
	{
		case '1'://2mA
		I_Slope     = 0.86857;
     3c8:	0f 2e       	mov	r0, r31
     3ca:	fb e9       	ldi	r31, 0x9B	; 155
     3cc:	8f 2e       	mov	r8, r31
     3ce:	fa e5       	ldi	r31, 0x5A	; 90
     3d0:	9f 2e       	mov	r9, r31
     3d2:	fe e5       	ldi	r31, 0x5E	; 94
     3d4:	af 2e       	mov	r10, r31
     3d6:	ff e3       	ldi	r31, 0x3F	; 63
     3d8:	bf 2e       	mov	r11, r31
     3da:	f0 2d       	mov	r31, r0
     3dc:	37 c0       	rjmp	.+110    	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
		I_Slope     = 0.09;
		I_intercept = 2.31;
		break;
		case '3'://200mA
		I_Slope     = 0.0124;
		I_intercept = 2.01;
     3de:	27 ed       	ldi	r18, 0xD7	; 215
     3e0:	33 ea       	ldi	r19, 0xA3	; 163
     3e2:	40 e0       	ldi	r20, 0x00	; 0
     3e4:	50 e4       	ldi	r21, 0x40	; 64
		case '2'://20mA
		I_Slope     = 0.09;
		I_intercept = 2.31;
		break;
		case '3'://200mA
		I_Slope     = 0.0124;
     3e6:	0f 2e       	mov	r0, r31
     3e8:	ff e5       	ldi	r31, 0x5F	; 95
     3ea:	8f 2e       	mov	r8, r31
     3ec:	f9 e2       	ldi	r31, 0x29	; 41
     3ee:	9f 2e       	mov	r9, r31
     3f0:	fb e4       	ldi	r31, 0x4B	; 75
     3f2:	af 2e       	mov	r10, r31
     3f4:	fc e3       	ldi	r31, 0x3C	; 60
     3f6:	bf 2e       	mov	r11, r31
     3f8:	f0 2d       	mov	r31, r0
		I_intercept = 2.01;
		break;
     3fa:	28 c0       	rjmp	.+80     	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
		case '4'://1A
		I_Slope     = 2.517;
		I_intercept = 2.012;
     3fc:	2c e9       	ldi	r18, 0x9C	; 156
     3fe:	34 ec       	ldi	r19, 0xC4	; 196
     400:	40 e0       	ldi	r20, 0x00	; 0
     402:	50 e4       	ldi	r21, 0x40	; 64
		case '3'://200mA
		I_Slope     = 0.0124;
		I_intercept = 2.01;
		break;
		case '4'://1A
		I_Slope     = 2.517;
     404:	0f 2e       	mov	r0, r31
     406:	f7 e8       	ldi	r31, 0x87	; 135
     408:	8f 2e       	mov	r8, r31
     40a:	f6 e1       	ldi	r31, 0x16	; 22
     40c:	9f 2e       	mov	r9, r31
     40e:	f1 e2       	ldi	r31, 0x21	; 33
     410:	af 2e       	mov	r10, r31
     412:	f0 e4       	ldi	r31, 0x40	; 64
     414:	bf 2e       	mov	r11, r31
     416:	f0 2d       	mov	r31, r0
		I_intercept = 2.012;
		break;
     418:	19 c0       	rjmp	.+50     	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
		default:
		LCD_Display_String((uint8_t*)"Wrong, select a proper range ya 7aywan");
     41a:	80 e6       	ldi	r24, 0x60	; 96
     41c:	90 e0       	ldi	r25, 0x00	; 0
     41e:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_Display_String>
			I_TO_V_OUT_MCU = (Itot * 5.0) / 1024.0;
		case '2': //DC
			I_TO_V_OUT_MCU = (x * 5.0) / 1024.0;	
	}
	fint32_t I_Slope     = -1;
	fint32_t I_intercept = -1;
     422:	20 e0       	ldi	r18, 0x00	; 0
     424:	30 e0       	ldi	r19, 0x00	; 0
     426:	40 e8       	ldi	r20, 0x80	; 128
     428:	5f eb       	ldi	r21, 0xBF	; 191
		case '1': //AC
			I_TO_V_OUT_MCU = (Itot * 5.0) / 1024.0;
		case '2': //DC
			I_TO_V_OUT_MCU = (x * 5.0) / 1024.0;	
	}
	fint32_t I_Slope     = -1;
     42a:	49 01       	movw	r8, r18
     42c:	5a 01       	movw	r10, r20
		I_Slope     = 2.517;
		I_intercept = 2.012;
		break;
		default:
		LCD_Display_String((uint8_t*)"Wrong, select a proper range ya 7aywan");
		break;
     42e:	0e c0       	rjmp	.+28     	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
		I_Slope     = 0.86857;
		I_intercept = 2.263;
		break;
		case '2'://20mA
		I_Slope     = 0.09;
		I_intercept = 2.31;
     430:	2a e0       	ldi	r18, 0x0A	; 10
     432:	37 ed       	ldi	r19, 0xD7	; 215
     434:	43 e1       	ldi	r20, 0x13	; 19
     436:	50 e4       	ldi	r21, 0x40	; 64
		case '1'://2mA
		I_Slope     = 0.86857;
		I_intercept = 2.263;
		break;
		case '2'://20mA
		I_Slope     = 0.09;
     438:	0f 2e       	mov	r0, r31
     43a:	fc ee       	ldi	r31, 0xEC	; 236
     43c:	8f 2e       	mov	r8, r31
     43e:	f1 e5       	ldi	r31, 0x51	; 81
     440:	9f 2e       	mov	r9, r31
     442:	f8 eb       	ldi	r31, 0xB8	; 184
     444:	af 2e       	mov	r10, r31
     446:	fd e3       	ldi	r31, 0x3D	; 61
     448:	bf 2e       	mov	r11, r31
     44a:	f0 2d       	mov	r31, r0
		break;
		default:
		LCD_Display_String((uint8_t*)"Wrong, select a proper range ya 7aywan");
		break;
	}
	I_input = (I_TO_V_OUT_MCU - I_intercept) / I_Slope;
     44c:	c7 01       	movw	r24, r14
     44e:	b6 01       	movw	r22, r12
     450:	0e 94 c1 16 	call	0x2d82	; 0x2d82 <__subsf3>
     454:	a5 01       	movw	r20, r10
     456:	94 01       	movw	r18, r8
     458:	0e 94 33 17 	call	0x2e66	; 0x2e66 <__divsf3>
     45c:	ef e0       	ldi	r30, 0x0F	; 15
     45e:	f7 e2       	ldi	r31, 0x27	; 39
     460:	31 97       	sbiw	r30, 0x01	; 1
     462:	f1 f7       	brne	.-4      	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
     464:	00 c0       	rjmp	.+0      	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
     466:	00 00       	nop
	_delay_ms(5);
	// display_Amp(Irange, I_input);
	return I_input;
     468:	56 2f       	mov	r21, r22
     46a:	47 2f       	mov	r20, r23
     46c:	38 2f       	mov	r19, r24
     46e:	29 2f       	mov	r18, r25
     470:	09 c0       	rjmp	.+18     	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>

fint32_t Read_Amp(uint16_t x,uint16_t Itot, uint8_t Irange,uint8_t mode)
{	
	//check if it didn't exceed the max range (positive or negative)
	if(810<=x || x<=200){
		return 999.99;
     472:	5c e5       	ldi	r21, 0x5C	; 92
     474:	4f ef       	ldi	r20, 0xFF	; 255
     476:	39 e7       	ldi	r19, 0x79	; 121
     478:	24 e4       	ldi	r18, 0x44	; 68
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
	}
	//check if it was too small
	if(406<=x && x <=414){
		return 0.0;
     47c:	50 e0       	ldi	r21, 0x00	; 0
     47e:	40 e0       	ldi	r20, 0x00	; 0
     480:	30 e0       	ldi	r19, 0x00	; 0
     482:	20 e0       	ldi	r18, 0x00	; 0
	I_input = (I_TO_V_OUT_MCU - I_intercept) / I_Slope;
	_delay_ms(5);
	// display_Amp(Irange, I_input);
	return I_input;
	
}
     484:	65 2f       	mov	r22, r21
     486:	74 2f       	mov	r23, r20
     488:	83 2f       	mov	r24, r19
     48a:	92 2f       	mov	r25, r18
     48c:	cf 91       	pop	r28
     48e:	ff 90       	pop	r15
     490:	ef 90       	pop	r14
     492:	df 90       	pop	r13
     494:	cf 90       	pop	r12
     496:	bf 90       	pop	r11
     498:	af 90       	pop	r10
     49a:	9f 90       	pop	r9
     49c:	8f 90       	pop	r8
     49e:	08 95       	ret

000004a0 <display_ohm>:

void display_ohm(uint8_t range,uint16_t volt){
     4a0:	4f 92       	push	r4
     4a2:	5f 92       	push	r5
     4a4:	6f 92       	push	r6
     4a6:	7f 92       	push	r7
     4a8:	8f 92       	push	r8
     4aa:	9f 92       	push	r9
     4ac:	af 92       	push	r10
     4ae:	bf 92       	push	r11
     4b0:	cf 92       	push	r12
     4b2:	df 92       	push	r13
     4b4:	ef 92       	push	r14
     4b6:	ff 92       	push	r15
     4b8:	0f 93       	push	r16
     4ba:	1f 93       	push	r17
     4bc:	cf 93       	push	r28
     4be:	df 93       	push	r29
     4c0:	08 2f       	mov	r16, r24
     4c2:	7b 01       	movw	r14, r22
	// range 1:10k 2:100k 3: 1M
	if (range >'5' || range <'1'){
     4c4:	8f ec       	ldi	r24, 0xCF	; 207
     4c6:	80 0f       	add	r24, r16
     4c8:	85 30       	cpi	r24, 0x05	; 5
     4ca:	48 f0       	brcs	.+18     	; 0x4de <display_ohm+0x3e>
		LCD_ClearScreen();
     4cc:	0e 94 8e 10 	call	0x211c	; 0x211c <LCD_ClearScreen>
		LCD_HomeScreen();
     4d0:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <LCD_HomeScreen>
		LCD_Display_String((uint8_t*)"Wrong Range :(");
     4d4:	87 e8       	ldi	r24, 0x87	; 135
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_Display_String>
		return;
     4dc:	35 c5       	rjmp	.+2666   	; 0xf48 <__stack+0x6e9>
	uint8_t exit_R;
	exit_R=0;
	uint16_t count;
	count=0;
	//if you want to return
	LCD_ClearScreen();
     4de:	0e 94 8e 10 	call	0x211c	; 0x211c <LCD_ClearScreen>
	LCD_HomeScreen();
     4e2:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <LCD_HomeScreen>
	LCD_Display_String((uint8_t*)"To Return press:");
     4e6:	86 e9       	ldi	r24, 0x96	; 150
     4e8:	90 e0       	ldi	r25, 0x00	; 0
     4ea:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_Display_String>
	LCD_Display_Location(0,1);
     4ee:	21 e0       	ldi	r18, 0x01	; 1
     4f0:	30 e0       	ldi	r19, 0x00	; 0
     4f2:	40 e0       	ldi	r20, 0x00	; 0
     4f4:	50 e0       	ldi	r21, 0x00	; 0
     4f6:	60 e0       	ldi	r22, 0x00	; 0
     4f8:	70 e0       	ldi	r23, 0x00	; 0
     4fa:	cb 01       	movw	r24, r22
     4fc:	0e 94 20 13 	call	0x2640	; 0x2640 <LCD_Display_Location>
	LCD_Display_String((uint8_t*)"*  ;)");
     500:	87 ea       	ldi	r24, 0xA7	; 167
     502:	90 e0       	ldi	r25, 0x00	; 0
     504:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_Display_String>
	#define R 100 //we will use it to normalize
	fint32_t Rin;
	uint8_t exit_R;
	exit_R=0;
	uint16_t count;
	count=0;
     508:	c0 e0       	ldi	r28, 0x00	; 0
     50a:	d0 e0       	ldi	r29, 0x00	; 0
		return;
	}
	#define R 100 //we will use it to normalize
	fint32_t Rin;
	uint8_t exit_R;
	exit_R=0;
     50c:	10 e0       	ldi	r17, 0x00	; 0
	LCD_HomeScreen();
	LCD_Display_String((uint8_t*)"To Return press:");
	LCD_Display_Location(0,1);
	LCD_Display_String((uint8_t*)"*  ;)");
	//check of yo want to return
	while(exit_R!='*'){
     50e:	0d c0       	rjmp	.+26     	; 0x52a <display_ohm+0x8a>
		exit_R =KEYPAD_Read();
     510:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <KEYPAD_Read>
     514:	18 2f       	mov	r17, r24
     516:	8f e0       	ldi	r24, 0x0F	; 15
     518:	97 e2       	ldi	r25, 0x27	; 39
     51a:	01 97       	sbiw	r24, 0x01	; 1
     51c:	f1 f7       	brne	.-4      	; 0x51a <display_ohm+0x7a>
     51e:	00 c0       	rjmp	.+0      	; 0x520 <display_ohm+0x80>
     520:	00 00       	nop
		_delay_ms(5);
		count++;
     522:	21 96       	adiw	r28, 0x01	; 1
		if(count>=200){
     524:	c8 3c       	cpi	r28, 0xC8	; 200
     526:	d1 05       	cpc	r29, r1
     528:	10 f4       	brcc	.+4      	; 0x52e <display_ohm+0x8e>
	LCD_HomeScreen();
	LCD_Display_String((uint8_t*)"To Return press:");
	LCD_Display_Location(0,1);
	LCD_Display_String((uint8_t*)"*  ;)");
	//check of yo want to return
	while(exit_R!='*'){
     52a:	1a 32       	cpi	r17, 0x2A	; 42
     52c:	89 f7       	brne	.-30     	; 0x510 <display_ohm+0x70>
		if(count>=200){
			count=0;
			break;
		}
	}
	if(exit_R=='*'){
     52e:	1a 32       	cpi	r17, 0x2A	; 42
     530:	09 f4       	brne	.+2      	; 0x534 <display_ohm+0x94>
     532:	0a c5       	rjmp	.+2580   	; 0xf48 <__stack+0x6e9>
     534:	e7 01       	movw	r28, r14
     536:	05 c5       	rjmp	.+2570   	; 0xf42 <__stack+0x6e3>
	}
	count=0;
	uint16_t old_volt;
	old_volt=volt;
	while(exit_R != '*'){
		LCD_ClearScreen();
     538:	0e 94 8e 10 	call	0x211c	; 0x211c <LCD_ClearScreen>
		LCD_HomeScreen();
     53c:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <LCD_HomeScreen>
		//display with the chosen range
		switch (range){
     540:	02 33       	cpi	r16, 0x32	; 50
     542:	09 f4       	brne	.+2      	; 0x546 <display_ohm+0xa6>
     544:	65 c1       	rjmp	.+714    	; 0x810 <__DATA_REGION_LENGTH__+0x10>
     546:	03 33       	cpi	r16, 0x33	; 51
     548:	09 f4       	brne	.+2      	; 0x54c <display_ohm+0xac>
     54a:	e0 c2       	rjmp	.+1472   	; 0xb0c <__stack+0x2ad>
     54c:	01 33       	cpi	r16, 0x31	; 49
     54e:	09 f0       	breq	.+2      	; 0x552 <display_ohm+0xb2>
     550:	f8 c4       	rjmp	.+2544   	; 0xf42 <__stack+0x6e3>
			case '1':
			//we will need to map
			if(volt >=1015){//wrong range
     552:	c7 3f       	cpi	r28, 0xF7	; 247
     554:	93 e0       	ldi	r25, 0x03	; 3
     556:	d9 07       	cpc	r29, r25
     558:	d8 f0       	brcs	.+54     	; 0x590 <display_ohm+0xf0>
				LCD_Display_String((uint8_t*)"error(big R) :(");
     55a:	8d ea       	ldi	r24, 0xAD	; 173
     55c:	90 e0       	ldi	r25, 0x00	; 0
     55e:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_Display_String>
				LCD_Display_Location(0,1);
     562:	21 e0       	ldi	r18, 0x01	; 1
     564:	30 e0       	ldi	r19, 0x00	; 0
     566:	40 e0       	ldi	r20, 0x00	; 0
     568:	50 e0       	ldi	r21, 0x00	; 0
     56a:	60 e0       	ldi	r22, 0x00	; 0
     56c:	70 e0       	ldi	r23, 0x00	; 0
     56e:	cb 01       	movw	r24, r22
     570:	0e 94 20 13 	call	0x2640	; 0x2640 <LCD_Display_Location>
				LCD_Display_String((uint8_t*)"need big range;)");
     574:	8d eb       	ldi	r24, 0xBD	; 189
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_Display_String>
     57c:	2f ef       	ldi	r18, 0xFF	; 255
     57e:	89 e6       	ldi	r24, 0x69	; 105
     580:	98 e1       	ldi	r25, 0x18	; 24
     582:	21 50       	subi	r18, 0x01	; 1
     584:	80 40       	sbci	r24, 0x00	; 0
     586:	90 40       	sbci	r25, 0x00	; 0
     588:	e1 f7       	brne	.-8      	; 0x582 <display_ohm+0xe2>
     58a:	00 c0       	rjmp	.+0      	; 0x58c <display_ohm+0xec>
     58c:	00 00       	nop
     58e:	dc c4       	rjmp	.+2488   	; 0xf48 <__stack+0x6e9>
				_delay_ms(1000);
				return;
			}
			if(volt<707){	//less than 1k
     590:	c3 3c       	cpi	r28, 0xC3	; 195
     592:	22 e0       	ldi	r18, 0x02	; 2
     594:	d2 07       	cpc	r29, r18
     596:	08 f0       	brcs	.+2      	; 0x59a <display_ohm+0xfa>
     598:	9e c0       	rjmp	.+316    	; 0x6d6 <display_ohm+0x236>
				Rin=(450.0*volt)/(1024.0-volt);
     59a:	be 01       	movw	r22, r28
     59c:	80 e0       	ldi	r24, 0x00	; 0
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	0e 94 10 18 	call	0x3020	; 0x3020 <__floatunsisf>
     5a4:	4b 01       	movw	r8, r22
     5a6:	5c 01       	movw	r10, r24
     5a8:	20 e0       	ldi	r18, 0x00	; 0
     5aa:	30 e0       	ldi	r19, 0x00	; 0
     5ac:	41 ee       	ldi	r20, 0xE1	; 225
     5ae:	53 e4       	ldi	r21, 0x43	; 67
     5b0:	0e 94 d7 18 	call	0x31ae	; 0x31ae <__mulsf3>
     5b4:	2b 01       	movw	r4, r22
     5b6:	3c 01       	movw	r6, r24
     5b8:	a5 01       	movw	r20, r10
     5ba:	94 01       	movw	r18, r8
     5bc:	60 e0       	ldi	r22, 0x00	; 0
     5be:	70 e0       	ldi	r23, 0x00	; 0
     5c0:	80 e8       	ldi	r24, 0x80	; 128
     5c2:	94 e4       	ldi	r25, 0x44	; 68
     5c4:	0e 94 c1 16 	call	0x2d82	; 0x2d82 <__subsf3>
     5c8:	9b 01       	movw	r18, r22
     5ca:	ac 01       	movw	r20, r24
     5cc:	c3 01       	movw	r24, r6
     5ce:	b2 01       	movw	r22, r4
     5d0:	0e 94 33 17 	call	0x2e66	; 0x2e66 <__divsf3>
     5d4:	4b 01       	movw	r8, r22
     5d6:	5c 01       	movw	r10, r24
				LCD_Display_String((uint8_t*)"Resistor (Ohm)");
     5d8:	8e ec       	ldi	r24, 0xCE	; 206
     5da:	90 e0       	ldi	r25, 0x00	; 0
     5dc:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_Display_String>
				LCD_Display_Location(0,1);
     5e0:	21 e0       	ldi	r18, 0x01	; 1
     5e2:	30 e0       	ldi	r19, 0x00	; 0
     5e4:	40 e0       	ldi	r20, 0x00	; 0
     5e6:	50 e0       	ldi	r21, 0x00	; 0
     5e8:	60 e0       	ldi	r22, 0x00	; 0
     5ea:	70 e0       	ldi	r23, 0x00	; 0
     5ec:	cb 01       	movw	r24, r22
     5ee:	0e 94 20 13 	call	0x2640	; 0x2640 <LCD_Display_Location>
				LCD_Display_FloatNumber(Rin,3);
     5f2:	43 e0       	ldi	r20, 0x03	; 3
     5f4:	c5 01       	movw	r24, r10
     5f6:	b4 01       	movw	r22, r8
     5f8:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <LCD_Display_FloatNumber>
     5fc:	8f ef       	ldi	r24, 0xFF	; 255
     5fe:	99 e6       	ldi	r25, 0x69	; 105
     600:	28 e1       	ldi	r18, 0x18	; 24
     602:	81 50       	subi	r24, 0x01	; 1
     604:	90 40       	sbci	r25, 0x00	; 0
     606:	20 40       	sbci	r18, 0x00	; 0
     608:	e1 f7       	brne	.-8      	; 0x602 <display_ohm+0x162>
     60a:	00 c0       	rjmp	.+0      	; 0x60c <display_ohm+0x16c>
     60c:	00 00       	nop
				_delay_ms(1000);
				LCD_Display_Location(11,1);
     60e:	21 e0       	ldi	r18, 0x01	; 1
     610:	30 e0       	ldi	r19, 0x00	; 0
     612:	40 e0       	ldi	r20, 0x00	; 0
     614:	50 e0       	ldi	r21, 0x00	; 0
     616:	6b e0       	ldi	r22, 0x0B	; 11
     618:	70 e0       	ldi	r23, 0x00	; 0
     61a:	80 e0       	ldi	r24, 0x00	; 0
     61c:	90 e0       	ldi	r25, 0x00	; 0
     61e:	0e 94 20 13 	call	0x2640	; 0x2640 <LCD_Display_Location>
				LCD_Display_String((uint8_t*)"*:ext");
     622:	8d ed       	ldi	r24, 0xDD	; 221
     624:	90 e0       	ldi	r25, 0x00	; 0
     626:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_Display_String>
				//if the resistor value changed
				while(volt<707 && exit_R != '*'){
     62a:	4c c0       	rjmp	.+152    	; 0x6c4 <display_ohm+0x224>
					if(old_volt!=volt){
     62c:	ce 15       	cp	r28, r14
     62e:	df 05       	cpc	r29, r15
     630:	09 f4       	brne	.+2      	; 0x634 <display_ohm+0x194>
     632:	41 c0       	rjmp	.+130    	; 0x6b6 <display_ohm+0x216>
						LCD_Display_Location(0,1);
     634:	21 e0       	ldi	r18, 0x01	; 1
     636:	30 e0       	ldi	r19, 0x00	; 0
     638:	40 e0       	ldi	r20, 0x00	; 0
     63a:	50 e0       	ldi	r21, 0x00	; 0
     63c:	60 e0       	ldi	r22, 0x00	; 0
     63e:	70 e0       	ldi	r23, 0x00	; 0
     640:	cb 01       	movw	r24, r22
     642:	0e 94 20 13 	call	0x2640	; 0x2640 <LCD_Display_Location>
						old_volt=volt;
						LCD_Display_String((uint8_t*)"       ");
     646:	84 e4       	ldi	r24, 0x44	; 68
     648:	91 e0       	ldi	r25, 0x01	; 1
     64a:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_Display_String>
						Rin=(450.0*volt)/(1024.0-volt);
     64e:	be 01       	movw	r22, r28
     650:	80 e0       	ldi	r24, 0x00	; 0
     652:	90 e0       	ldi	r25, 0x00	; 0
     654:	0e 94 10 18 	call	0x3020	; 0x3020 <__floatunsisf>
     658:	6b 01       	movw	r12, r22
     65a:	7c 01       	movw	r14, r24
     65c:	20 e0       	ldi	r18, 0x00	; 0
     65e:	30 e0       	ldi	r19, 0x00	; 0
     660:	41 ee       	ldi	r20, 0xE1	; 225
     662:	53 e4       	ldi	r21, 0x43	; 67
     664:	0e 94 d7 18 	call	0x31ae	; 0x31ae <__mulsf3>
     668:	4b 01       	movw	r8, r22
     66a:	5c 01       	movw	r10, r24
     66c:	a7 01       	movw	r20, r14
     66e:	96 01       	movw	r18, r12
     670:	60 e0       	ldi	r22, 0x00	; 0
     672:	70 e0       	ldi	r23, 0x00	; 0
     674:	80 e8       	ldi	r24, 0x80	; 128
     676:	94 e4       	ldi	r25, 0x44	; 68
     678:	0e 94 c1 16 	call	0x2d82	; 0x2d82 <__subsf3>
     67c:	9b 01       	movw	r18, r22
     67e:	ac 01       	movw	r20, r24
     680:	c5 01       	movw	r24, r10
     682:	b4 01       	movw	r22, r8
     684:	0e 94 33 17 	call	0x2e66	; 0x2e66 <__divsf3>
     688:	6b 01       	movw	r12, r22
     68a:	7c 01       	movw	r14, r24
						LCD_Display_Location(0,1);
     68c:	21 e0       	ldi	r18, 0x01	; 1
     68e:	30 e0       	ldi	r19, 0x00	; 0
     690:	40 e0       	ldi	r20, 0x00	; 0
     692:	50 e0       	ldi	r21, 0x00	; 0
     694:	60 e0       	ldi	r22, 0x00	; 0
     696:	70 e0       	ldi	r23, 0x00	; 0
     698:	cb 01       	movw	r24, r22
     69a:	0e 94 20 13 	call	0x2640	; 0x2640 <LCD_Display_Location>
						LCD_Display_FloatNumber(Rin,3);
     69e:	43 e0       	ldi	r20, 0x03	; 3
     6a0:	c7 01       	movw	r24, r14
     6a2:	b6 01       	movw	r22, r12
     6a4:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <LCD_Display_FloatNumber>
     6a8:	8f ec       	ldi	r24, 0xCF	; 207
     6aa:	97 e0       	ldi	r25, 0x07	; 7
     6ac:	01 97       	sbiw	r24, 0x01	; 1
     6ae:	f1 f7       	brne	.-4      	; 0x6ac <display_ohm+0x20c>
     6b0:	00 c0       	rjmp	.+0      	; 0x6b2 <display_ohm+0x212>
     6b2:	00 00       	nop
				LCD_Display_String((uint8_t*)"*:ext");
				//if the resistor value changed
				while(volt<707 && exit_R != '*'){
					if(old_volt!=volt){
						LCD_Display_Location(0,1);
						old_volt=volt;
     6b4:	7e 01       	movw	r14, r28
						Rin=(450.0*volt)/(1024.0-volt);
						LCD_Display_Location(0,1);
						LCD_Display_FloatNumber(Rin,3);
						_delay_ms(1);
					}
					volt=ADC_Read(Rpin);
     6b6:	87 e0       	ldi	r24, 0x07	; 7
     6b8:	0e 94 43 15 	call	0x2a86	; 0x2a86 <ADC_Read>
     6bc:	ec 01       	movw	r28, r24
					exit_R=KEYPAD_Read();
     6be:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <KEYPAD_Read>
     6c2:	18 2f       	mov	r17, r24
				LCD_Display_FloatNumber(Rin,3);
				_delay_ms(1000);
				LCD_Display_Location(11,1);
				LCD_Display_String((uint8_t*)"*:ext");
				//if the resistor value changed
				while(volt<707 && exit_R != '*'){
     6c4:	c3 3c       	cpi	r28, 0xC3	; 195
     6c6:	92 e0       	ldi	r25, 0x02	; 2
     6c8:	d9 07       	cpc	r29, r25
     6ca:	08 f0       	brcs	.+2      	; 0x6ce <display_ohm+0x22e>
     6cc:	3a c4       	rjmp	.+2164   	; 0xf42 <__stack+0x6e3>
     6ce:	1a 32       	cpi	r17, 0x2A	; 42
     6d0:	09 f0       	breq	.+2      	; 0x6d4 <display_ohm+0x234>
     6d2:	ac cf       	rjmp	.-168    	; 0x62c <display_ohm+0x18c>
     6d4:	36 c4       	rjmp	.+2156   	; 0xf42 <__stack+0x6e3>
					volt=ADC_Read(Rpin);
					exit_R=KEYPAD_Read();
				}
			}
			else{	//from 1k to 10k
				Rin=(0.450*volt)/(1024.0-volt);	//it will be from 1:10
     6d6:	be 01       	movw	r22, r28
     6d8:	80 e0       	ldi	r24, 0x00	; 0
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	0e 94 10 18 	call	0x3020	; 0x3020 <__floatunsisf>
     6e0:	4b 01       	movw	r8, r22
     6e2:	5c 01       	movw	r10, r24
     6e4:	26 e6       	ldi	r18, 0x66	; 102
     6e6:	36 e6       	ldi	r19, 0x66	; 102
     6e8:	46 ee       	ldi	r20, 0xE6	; 230
     6ea:	5e e3       	ldi	r21, 0x3E	; 62
     6ec:	0e 94 d7 18 	call	0x31ae	; 0x31ae <__mulsf3>
     6f0:	2b 01       	movw	r4, r22
     6f2:	3c 01       	movw	r6, r24
     6f4:	a5 01       	movw	r20, r10
     6f6:	94 01       	movw	r18, r8
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	80 e8       	ldi	r24, 0x80	; 128
     6fe:	94 e4       	ldi	r25, 0x44	; 68
     700:	0e 94 c1 16 	call	0x2d82	; 0x2d82 <__subsf3>
     704:	9b 01       	movw	r18, r22
     706:	ac 01       	movw	r20, r24
     708:	c3 01       	movw	r24, r6
     70a:	b2 01       	movw	r22, r4
     70c:	0e 94 33 17 	call	0x2e66	; 0x2e66 <__divsf3>
     710:	4b 01       	movw	r8, r22
     712:	5c 01       	movw	r10, r24
				LCD_Display_String((uint8_t*)"Resistor (kOhm)");
     714:	83 ee       	ldi	r24, 0xE3	; 227
     716:	90 e0       	ldi	r25, 0x00	; 0
     718:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_Display_String>
				LCD_Display_Location(0,1);
     71c:	21 e0       	ldi	r18, 0x01	; 1
     71e:	30 e0       	ldi	r19, 0x00	; 0
     720:	40 e0       	ldi	r20, 0x00	; 0
     722:	50 e0       	ldi	r21, 0x00	; 0
     724:	60 e0       	ldi	r22, 0x00	; 0
     726:	70 e0       	ldi	r23, 0x00	; 0
     728:	cb 01       	movw	r24, r22
     72a:	0e 94 20 13 	call	0x2640	; 0x2640 <LCD_Display_Location>
				LCD_Display_FloatNumber(Rin,3);
     72e:	43 e0       	ldi	r20, 0x03	; 3
     730:	c5 01       	movw	r24, r10
     732:	b4 01       	movw	r22, r8
     734:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <LCD_Display_FloatNumber>
     738:	8f ec       	ldi	r24, 0xCF	; 207
     73a:	97 e0       	ldi	r25, 0x07	; 7
     73c:	01 97       	sbiw	r24, 0x01	; 1
     73e:	f1 f7       	brne	.-4      	; 0x73c <display_ohm+0x29c>
     740:	00 c0       	rjmp	.+0      	; 0x742 <display_ohm+0x2a2>
     742:	00 00       	nop
				_delay_ms(1);
				LCD_Display_Location(11,1);
     744:	21 e0       	ldi	r18, 0x01	; 1
     746:	30 e0       	ldi	r19, 0x00	; 0
     748:	40 e0       	ldi	r20, 0x00	; 0
     74a:	50 e0       	ldi	r21, 0x00	; 0
     74c:	6b e0       	ldi	r22, 0x0B	; 11
     74e:	70 e0       	ldi	r23, 0x00	; 0
     750:	80 e0       	ldi	r24, 0x00	; 0
     752:	90 e0       	ldi	r25, 0x00	; 0
     754:	0e 94 20 13 	call	0x2640	; 0x2640 <LCD_Display_Location>
				LCD_Display_String((uint8_t*)"*:ext");
     758:	8d ed       	ldi	r24, 0xDD	; 221
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_Display_String>
				//if the resistor value changed
				while(volt <1015 && volt>=707 && exit_R != '*'){
     760:	4c c0       	rjmp	.+152    	; 0x7fa <display_ohm+0x35a>
					if(old_volt!=volt){
     762:	ce 15       	cp	r28, r14
     764:	df 05       	cpc	r29, r15
     766:	09 f4       	brne	.+2      	; 0x76a <display_ohm+0x2ca>
     768:	41 c0       	rjmp	.+130    	; 0x7ec <display_ohm+0x34c>
						old_volt=volt;
						LCD_Display_Location(0,1);
     76a:	21 e0       	ldi	r18, 0x01	; 1
     76c:	30 e0       	ldi	r19, 0x00	; 0
     76e:	40 e0       	ldi	r20, 0x00	; 0
     770:	50 e0       	ldi	r21, 0x00	; 0
     772:	60 e0       	ldi	r22, 0x00	; 0
     774:	70 e0       	ldi	r23, 0x00	; 0
     776:	cb 01       	movw	r24, r22
     778:	0e 94 20 13 	call	0x2640	; 0x2640 <LCD_Display_Location>
						LCD_Display_String((uint8_t*)"     ");
     77c:	86 e4       	ldi	r24, 0x46	; 70
     77e:	91 e0       	ldi	r25, 0x01	; 1
     780:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_Display_String>
						Rin=(0.450*volt)/(1024.0-volt);
     784:	be 01       	movw	r22, r28
     786:	80 e0       	ldi	r24, 0x00	; 0
     788:	90 e0       	ldi	r25, 0x00	; 0
     78a:	0e 94 10 18 	call	0x3020	; 0x3020 <__floatunsisf>
     78e:	6b 01       	movw	r12, r22
     790:	7c 01       	movw	r14, r24
     792:	26 e6       	ldi	r18, 0x66	; 102
     794:	36 e6       	ldi	r19, 0x66	; 102
     796:	46 ee       	ldi	r20, 0xE6	; 230
     798:	5e e3       	ldi	r21, 0x3E	; 62
     79a:	0e 94 d7 18 	call	0x31ae	; 0x31ae <__mulsf3>
     79e:	4b 01       	movw	r8, r22
     7a0:	5c 01       	movw	r10, r24
     7a2:	a7 01       	movw	r20, r14
     7a4:	96 01       	movw	r18, r12
     7a6:	60 e0       	ldi	r22, 0x00	; 0
     7a8:	70 e0       	ldi	r23, 0x00	; 0
     7aa:	80 e8       	ldi	r24, 0x80	; 128
     7ac:	94 e4       	ldi	r25, 0x44	; 68
     7ae:	0e 94 c1 16 	call	0x2d82	; 0x2d82 <__subsf3>
     7b2:	9b 01       	movw	r18, r22
     7b4:	ac 01       	movw	r20, r24
     7b6:	c5 01       	movw	r24, r10
     7b8:	b4 01       	movw	r22, r8
     7ba:	0e 94 33 17 	call	0x2e66	; 0x2e66 <__divsf3>
     7be:	6b 01       	movw	r12, r22
     7c0:	7c 01       	movw	r14, r24
						LCD_Display_Location(0,1);
     7c2:	21 e0       	ldi	r18, 0x01	; 1
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	60 e0       	ldi	r22, 0x00	; 0
     7cc:	70 e0       	ldi	r23, 0x00	; 0
     7ce:	cb 01       	movw	r24, r22
     7d0:	0e 94 20 13 	call	0x2640	; 0x2640 <LCD_Display_Location>
						LCD_Display_FloatNumber(Rin,3);
     7d4:	43 e0       	ldi	r20, 0x03	; 3
     7d6:	c7 01       	movw	r24, r14
     7d8:	b6 01       	movw	r22, r12
     7da:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <LCD_Display_FloatNumber>
     7de:	8f ec       	ldi	r24, 0xCF	; 207
     7e0:	97 e0       	ldi	r25, 0x07	; 7
     7e2:	01 97       	sbiw	r24, 0x01	; 1
     7e4:	f1 f7       	brne	.-4      	; 0x7e2 <display_ohm+0x342>
     7e6:	00 c0       	rjmp	.+0      	; 0x7e8 <display_ohm+0x348>
     7e8:	00 00       	nop
				LCD_Display_Location(11,1);
				LCD_Display_String((uint8_t*)"*:ext");
				//if the resistor value changed
				while(volt <1015 && volt>=707 && exit_R != '*'){
					if(old_volt!=volt){
						old_volt=volt;
     7ea:	7e 01       	movw	r14, r28
						Rin=(0.450*volt)/(1024.0-volt);
						LCD_Display_Location(0,1);
						LCD_Display_FloatNumber(Rin,3);
						_delay_ms(1);
					}
					volt=ADC_Read(Rpin);
     7ec:	87 e0       	ldi	r24, 0x07	; 7
     7ee:	0e 94 43 15 	call	0x2a86	; 0x2a86 <ADC_Read>
     7f2:	ec 01       	movw	r28, r24
					exit_R=KEYPAD_Read();
     7f4:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <KEYPAD_Read>
     7f8:	18 2f       	mov	r17, r24
				LCD_Display_FloatNumber(Rin,3);
				_delay_ms(1);
				LCD_Display_Location(11,1);
				LCD_Display_String((uint8_t*)"*:ext");
				//if the resistor value changed
				while(volt <1015 && volt>=707 && exit_R != '*'){
     7fa:	ce 01       	movw	r24, r28
     7fc:	83 5c       	subi	r24, 0xC3	; 195
     7fe:	92 40       	sbci	r25, 0x02	; 2
     800:	84 33       	cpi	r24, 0x34	; 52
     802:	91 40       	sbci	r25, 0x01	; 1
     804:	08 f0       	brcs	.+2      	; 0x808 <__DATA_REGION_LENGTH__+0x8>
     806:	9d c3       	rjmp	.+1850   	; 0xf42 <__stack+0x6e3>
     808:	1a 32       	cpi	r17, 0x2A	; 42
     80a:	09 f0       	breq	.+2      	; 0x80e <__DATA_REGION_LENGTH__+0xe>
     80c:	aa cf       	rjmp	.-172    	; 0x762 <display_ohm+0x2c2>
     80e:	99 c3       	rjmp	.+1842   	; 0xf42 <__stack+0x6e3>
				}
			}
			break;
			case '2':
			//we will need to map
			if(volt >=1015){// big range
     810:	c7 3f       	cpi	r28, 0xF7	; 247
     812:	83 e0       	ldi	r24, 0x03	; 3
     814:	d8 07       	cpc	r29, r24
     816:	d8 f0       	brcs	.+54     	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
				LCD_Display_String((uint8_t*)"error(big R) :(");
     818:	8d ea       	ldi	r24, 0xAD	; 173
     81a:	90 e0       	ldi	r25, 0x00	; 0
     81c:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_Display_String>
				LCD_Display_Location(0,1);
     820:	21 e0       	ldi	r18, 0x01	; 1
     822:	30 e0       	ldi	r19, 0x00	; 0
     824:	40 e0       	ldi	r20, 0x00	; 0
     826:	50 e0       	ldi	r21, 0x00	; 0
     828:	60 e0       	ldi	r22, 0x00	; 0
     82a:	70 e0       	ldi	r23, 0x00	; 0
     82c:	cb 01       	movw	r24, r22
     82e:	0e 94 20 13 	call	0x2640	; 0x2640 <LCD_Display_Location>
				LCD_Display_String((uint8_t*)"need big range;)");
     832:	8d eb       	ldi	r24, 0xBD	; 189
     834:	90 e0       	ldi	r25, 0x00	; 0
     836:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_Display_String>
     83a:	9f ef       	ldi	r25, 0xFF	; 255
     83c:	29 e6       	ldi	r18, 0x69	; 105
     83e:	88 e1       	ldi	r24, 0x18	; 24
     840:	91 50       	subi	r25, 0x01	; 1
     842:	20 40       	sbci	r18, 0x00	; 0
     844:	80 40       	sbci	r24, 0x00	; 0
     846:	e1 f7       	brne	.-8      	; 0x840 <__DATA_REGION_LENGTH__+0x40>
     848:	00 c0       	rjmp	.+0      	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
     84a:	00 00       	nop
     84c:	7d c3       	rjmp	.+1786   	; 0xf48 <__stack+0x6e9>
				_delay_ms(1000);
				return;
			}
			if(volt<931){	//small range
     84e:	c3 3a       	cpi	r28, 0xA3	; 163
     850:	93 e0       	ldi	r25, 0x03	; 3
     852:	d9 07       	cpc	r29, r25
     854:	f0 f4       	brcc	.+60     	; 0x892 <__stack+0x33>
				LCD_Display_String((uint8_t*)"caution(smal R)");
     856:	83 ef       	ldi	r24, 0xF3	; 243
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_Display_String>
				LCD_Display_Location(0,1);
     85e:	21 e0       	ldi	r18, 0x01	; 1
     860:	30 e0       	ldi	r19, 0x00	; 0
     862:	40 e0       	ldi	r20, 0x00	; 0
     864:	50 e0       	ldi	r21, 0x00	; 0
     866:	60 e0       	ldi	r22, 0x00	; 0
     868:	70 e0       	ldi	r23, 0x00	; 0
     86a:	cb 01       	movw	r24, r22
     86c:	0e 94 20 13 	call	0x2640	; 0x2640 <LCD_Display_Location>
				LCD_Display_String((uint8_t*)"ned smal range;)");
     870:	83 e0       	ldi	r24, 0x03	; 3
     872:	91 e0       	ldi	r25, 0x01	; 1
     874:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_Display_String>
     878:	2f ef       	ldi	r18, 0xFF	; 255
     87a:	89 e6       	ldi	r24, 0x69	; 105
     87c:	98 e1       	ldi	r25, 0x18	; 24
     87e:	21 50       	subi	r18, 0x01	; 1
     880:	80 40       	sbci	r24, 0x00	; 0
     882:	90 40       	sbci	r25, 0x00	; 0
     884:	e1 f7       	brne	.-8      	; 0x87e <__stack+0x1f>
     886:	00 c0       	rjmp	.+0      	; 0x888 <__stack+0x29>
     888:	00 00       	nop
				_delay_ms(1000);
				LCD_ClearScreen();
     88a:	0e 94 8e 10 	call	0x211c	; 0x211c <LCD_ClearScreen>
				LCD_HomeScreen();
     88e:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <LCD_HomeScreen>
			}
			if(volt>=436){
     892:	c4 3b       	cpi	r28, 0xB4	; 180
     894:	21 e0       	ldi	r18, 0x01	; 1
     896:	d2 07       	cpc	r29, r18
     898:	08 f4       	brcc	.+2      	; 0x89c <__stack+0x3d>
     89a:	9d c0       	rjmp	.+314    	; 0x9d6 <__stack+0x177>
				Rin=(1.35*volt)/(1024.0-volt);	//it will be from 10:100
     89c:	be 01       	movw	r22, r28
     89e:	80 e0       	ldi	r24, 0x00	; 0
     8a0:	90 e0       	ldi	r25, 0x00	; 0
     8a2:	0e 94 10 18 	call	0x3020	; 0x3020 <__floatunsisf>
     8a6:	4b 01       	movw	r8, r22
     8a8:	5c 01       	movw	r10, r24
     8aa:	2d ec       	ldi	r18, 0xCD	; 205
     8ac:	3c ec       	ldi	r19, 0xCC	; 204
     8ae:	4c ea       	ldi	r20, 0xAC	; 172
     8b0:	5f e3       	ldi	r21, 0x3F	; 63
     8b2:	0e 94 d7 18 	call	0x31ae	; 0x31ae <__mulsf3>
     8b6:	2b 01       	movw	r4, r22
     8b8:	3c 01       	movw	r6, r24
     8ba:	a5 01       	movw	r20, r10
     8bc:	94 01       	movw	r18, r8
     8be:	60 e0       	ldi	r22, 0x00	; 0
     8c0:	70 e0       	ldi	r23, 0x00	; 0
     8c2:	80 e8       	ldi	r24, 0x80	; 128
     8c4:	94 e4       	ldi	r25, 0x44	; 68
     8c6:	0e 94 c1 16 	call	0x2d82	; 0x2d82 <__subsf3>
     8ca:	9b 01       	movw	r18, r22
     8cc:	ac 01       	movw	r20, r24
     8ce:	c3 01       	movw	r24, r6
     8d0:	b2 01       	movw	r22, r4
     8d2:	0e 94 33 17 	call	0x2e66	; 0x2e66 <__divsf3>
     8d6:	4b 01       	movw	r8, r22
     8d8:	5c 01       	movw	r10, r24
				LCD_Display_String((uint8_t*)"Resistor (kOhm)");
     8da:	83 ee       	ldi	r24, 0xE3	; 227
     8dc:	90 e0       	ldi	r25, 0x00	; 0
     8de:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_Display_String>
				LCD_Display_Location(0,1);
     8e2:	21 e0       	ldi	r18, 0x01	; 1
     8e4:	30 e0       	ldi	r19, 0x00	; 0
     8e6:	40 e0       	ldi	r20, 0x00	; 0
     8e8:	50 e0       	ldi	r21, 0x00	; 0
     8ea:	60 e0       	ldi	r22, 0x00	; 0
     8ec:	70 e0       	ldi	r23, 0x00	; 0
     8ee:	cb 01       	movw	r24, r22
     8f0:	0e 94 20 13 	call	0x2640	; 0x2640 <LCD_Display_Location>
				LCD_Display_FloatNumber(Rin,3);
     8f4:	43 e0       	ldi	r20, 0x03	; 3
     8f6:	c5 01       	movw	r24, r10
     8f8:	b4 01       	movw	r22, r8
     8fa:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <LCD_Display_FloatNumber>
     8fe:	8f ec       	ldi	r24, 0xCF	; 207
     900:	97 e0       	ldi	r25, 0x07	; 7
     902:	01 97       	sbiw	r24, 0x01	; 1
     904:	f1 f7       	brne	.-4      	; 0x902 <__stack+0xa3>
     906:	00 c0       	rjmp	.+0      	; 0x908 <__stack+0xa9>
     908:	00 00       	nop
				_delay_ms(1);
				LCD_Display_Location(11,1);
     90a:	21 e0       	ldi	r18, 0x01	; 1
     90c:	30 e0       	ldi	r19, 0x00	; 0
     90e:	40 e0       	ldi	r20, 0x00	; 0
     910:	50 e0       	ldi	r21, 0x00	; 0
     912:	6b e0       	ldi	r22, 0x0B	; 11
     914:	70 e0       	ldi	r23, 0x00	; 0
     916:	80 e0       	ldi	r24, 0x00	; 0
     918:	90 e0       	ldi	r25, 0x00	; 0
     91a:	0e 94 20 13 	call	0x2640	; 0x2640 <LCD_Display_Location>
				LCD_Display_String((uint8_t*)"*:ext");
     91e:	8d ed       	ldi	r24, 0xDD	; 221
     920:	90 e0       	ldi	r25, 0x00	; 0
     922:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_Display_String>
				//if the resistor value changed
				while(volt <1015 && volt>=436 && exit_R != '*'){
     926:	4c c0       	rjmp	.+152    	; 0x9c0 <__stack+0x161>
					if(old_volt!=volt){
     928:	ce 15       	cp	r28, r14
     92a:	df 05       	cpc	r29, r15
     92c:	09 f4       	brne	.+2      	; 0x930 <__stack+0xd1>
     92e:	41 c0       	rjmp	.+130    	; 0x9b2 <__stack+0x153>
						old_volt=volt;
						LCD_Display_Location(0,1);
     930:	21 e0       	ldi	r18, 0x01	; 1
     932:	30 e0       	ldi	r19, 0x00	; 0
     934:	40 e0       	ldi	r20, 0x00	; 0
     936:	50 e0       	ldi	r21, 0x00	; 0
     938:	60 e0       	ldi	r22, 0x00	; 0
     93a:	70 e0       	ldi	r23, 0x00	; 0
     93c:	cb 01       	movw	r24, r22
     93e:	0e 94 20 13 	call	0x2640	; 0x2640 <LCD_Display_Location>
						LCD_Display_String((uint8_t*)"       ");
     942:	84 e4       	ldi	r24, 0x44	; 68
     944:	91 e0       	ldi	r25, 0x01	; 1
     946:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_Display_String>
						Rin=(1.35*volt)/(1024.0-volt);
     94a:	be 01       	movw	r22, r28
     94c:	80 e0       	ldi	r24, 0x00	; 0
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	0e 94 10 18 	call	0x3020	; 0x3020 <__floatunsisf>
     954:	6b 01       	movw	r12, r22
     956:	7c 01       	movw	r14, r24
     958:	2d ec       	ldi	r18, 0xCD	; 205
     95a:	3c ec       	ldi	r19, 0xCC	; 204
     95c:	4c ea       	ldi	r20, 0xAC	; 172
     95e:	5f e3       	ldi	r21, 0x3F	; 63
     960:	0e 94 d7 18 	call	0x31ae	; 0x31ae <__mulsf3>
     964:	4b 01       	movw	r8, r22
     966:	5c 01       	movw	r10, r24
     968:	a7 01       	movw	r20, r14
     96a:	96 01       	movw	r18, r12
     96c:	60 e0       	ldi	r22, 0x00	; 0
     96e:	70 e0       	ldi	r23, 0x00	; 0
     970:	80 e8       	ldi	r24, 0x80	; 128
     972:	94 e4       	ldi	r25, 0x44	; 68
     974:	0e 94 c1 16 	call	0x2d82	; 0x2d82 <__subsf3>
     978:	9b 01       	movw	r18, r22
     97a:	ac 01       	movw	r20, r24
     97c:	c5 01       	movw	r24, r10
     97e:	b4 01       	movw	r22, r8
     980:	0e 94 33 17 	call	0x2e66	; 0x2e66 <__divsf3>
     984:	6b 01       	movw	r12, r22
     986:	7c 01       	movw	r14, r24
						LCD_Display_Location(0,1);
     988:	21 e0       	ldi	r18, 0x01	; 1
     98a:	30 e0       	ldi	r19, 0x00	; 0
     98c:	40 e0       	ldi	r20, 0x00	; 0
     98e:	50 e0       	ldi	r21, 0x00	; 0
     990:	60 e0       	ldi	r22, 0x00	; 0
     992:	70 e0       	ldi	r23, 0x00	; 0
     994:	cb 01       	movw	r24, r22
     996:	0e 94 20 13 	call	0x2640	; 0x2640 <LCD_Display_Location>
						LCD_Display_FloatNumber(Rin,3);
     99a:	43 e0       	ldi	r20, 0x03	; 3
     99c:	c7 01       	movw	r24, r14
     99e:	b6 01       	movw	r22, r12
     9a0:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <LCD_Display_FloatNumber>
     9a4:	8f ec       	ldi	r24, 0xCF	; 207
     9a6:	97 e0       	ldi	r25, 0x07	; 7
     9a8:	01 97       	sbiw	r24, 0x01	; 1
     9aa:	f1 f7       	brne	.-4      	; 0x9a8 <__stack+0x149>
     9ac:	00 c0       	rjmp	.+0      	; 0x9ae <__stack+0x14f>
     9ae:	00 00       	nop
				LCD_Display_Location(11,1);
				LCD_Display_String((uint8_t*)"*:ext");
				//if the resistor value changed
				while(volt <1015 && volt>=436 && exit_R != '*'){
					if(old_volt!=volt){
						old_volt=volt;
     9b0:	7e 01       	movw	r14, r28
						Rin=(1.35*volt)/(1024.0-volt);
						LCD_Display_Location(0,1);
						LCD_Display_FloatNumber(Rin,3);
						_delay_ms(1);
					}
					volt=ADC_Read(Rpin);
     9b2:	87 e0       	ldi	r24, 0x07	; 7
     9b4:	0e 94 43 15 	call	0x2a86	; 0x2a86 <ADC_Read>
     9b8:	ec 01       	movw	r28, r24
					exit_R=KEYPAD_Read();
     9ba:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <KEYPAD_Read>
     9be:	18 2f       	mov	r17, r24
				LCD_Display_FloatNumber(Rin,3);
				_delay_ms(1);
				LCD_Display_Location(11,1);
				LCD_Display_String((uint8_t*)"*:ext");
				//if the resistor value changed
				while(volt <1015 && volt>=436 && exit_R != '*'){
     9c0:	ce 01       	movw	r24, r28
     9c2:	84 5b       	subi	r24, 0xB4	; 180
     9c4:	91 40       	sbci	r25, 0x01	; 1
     9c6:	83 34       	cpi	r24, 0x43	; 67
     9c8:	92 40       	sbci	r25, 0x02	; 2
     9ca:	08 f0       	brcs	.+2      	; 0x9ce <__stack+0x16f>
     9cc:	ba c2       	rjmp	.+1396   	; 0xf42 <__stack+0x6e3>
     9ce:	1a 32       	cpi	r17, 0x2A	; 42
     9d0:	09 f0       	breq	.+2      	; 0x9d4 <__stack+0x175>
     9d2:	aa cf       	rjmp	.-172    	; 0x928 <__stack+0xc9>
     9d4:	b6 c2       	rjmp	.+1388   	; 0xf42 <__stack+0x6e3>
					volt=ADC_Read(Rpin);
					exit_R=KEYPAD_Read();
				}
			}
			else{	//less than 1k
				Rin=(1350.0*volt)/(1024.0-volt);
     9d6:	be 01       	movw	r22, r28
     9d8:	80 e0       	ldi	r24, 0x00	; 0
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	0e 94 10 18 	call	0x3020	; 0x3020 <__floatunsisf>
     9e0:	4b 01       	movw	r8, r22
     9e2:	5c 01       	movw	r10, r24
     9e4:	20 e0       	ldi	r18, 0x00	; 0
     9e6:	30 ec       	ldi	r19, 0xC0	; 192
     9e8:	48 ea       	ldi	r20, 0xA8	; 168
     9ea:	54 e4       	ldi	r21, 0x44	; 68
     9ec:	0e 94 d7 18 	call	0x31ae	; 0x31ae <__mulsf3>
     9f0:	2b 01       	movw	r4, r22
     9f2:	3c 01       	movw	r6, r24
     9f4:	a5 01       	movw	r20, r10
     9f6:	94 01       	movw	r18, r8
     9f8:	60 e0       	ldi	r22, 0x00	; 0
     9fa:	70 e0       	ldi	r23, 0x00	; 0
     9fc:	80 e8       	ldi	r24, 0x80	; 128
     9fe:	94 e4       	ldi	r25, 0x44	; 68
     a00:	0e 94 c1 16 	call	0x2d82	; 0x2d82 <__subsf3>
     a04:	9b 01       	movw	r18, r22
     a06:	ac 01       	movw	r20, r24
     a08:	c3 01       	movw	r24, r6
     a0a:	b2 01       	movw	r22, r4
     a0c:	0e 94 33 17 	call	0x2e66	; 0x2e66 <__divsf3>
     a10:	4b 01       	movw	r8, r22
     a12:	5c 01       	movw	r10, r24
				LCD_Display_String((uint8_t*)"Resistor (Ohm)");
     a14:	8e ec       	ldi	r24, 0xCE	; 206
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_Display_String>
				LCD_Display_Location(0,1);
     a1c:	21 e0       	ldi	r18, 0x01	; 1
     a1e:	30 e0       	ldi	r19, 0x00	; 0
     a20:	40 e0       	ldi	r20, 0x00	; 0
     a22:	50 e0       	ldi	r21, 0x00	; 0
     a24:	60 e0       	ldi	r22, 0x00	; 0
     a26:	70 e0       	ldi	r23, 0x00	; 0
     a28:	cb 01       	movw	r24, r22
     a2a:	0e 94 20 13 	call	0x2640	; 0x2640 <LCD_Display_Location>
				LCD_Display_FloatNumber(Rin,3);
     a2e:	43 e0       	ldi	r20, 0x03	; 3
     a30:	c5 01       	movw	r24, r10
     a32:	b4 01       	movw	r22, r8
     a34:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <LCD_Display_FloatNumber>
     a38:	8f ec       	ldi	r24, 0xCF	; 207
     a3a:	97 e0       	ldi	r25, 0x07	; 7
     a3c:	01 97       	sbiw	r24, 0x01	; 1
     a3e:	f1 f7       	brne	.-4      	; 0xa3c <__stack+0x1dd>
     a40:	00 c0       	rjmp	.+0      	; 0xa42 <__stack+0x1e3>
     a42:	00 00       	nop
				_delay_ms(1);
				LCD_Display_Location(11,1);
     a44:	21 e0       	ldi	r18, 0x01	; 1
     a46:	30 e0       	ldi	r19, 0x00	; 0
     a48:	40 e0       	ldi	r20, 0x00	; 0
     a4a:	50 e0       	ldi	r21, 0x00	; 0
     a4c:	6b e0       	ldi	r22, 0x0B	; 11
     a4e:	70 e0       	ldi	r23, 0x00	; 0
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	90 e0       	ldi	r25, 0x00	; 0
     a54:	0e 94 20 13 	call	0x2640	; 0x2640 <LCD_Display_Location>
				LCD_Display_String((uint8_t*)"*:ext");
     a58:	8d ed       	ldi	r24, 0xDD	; 221
     a5a:	90 e0       	ldi	r25, 0x00	; 0
     a5c:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_Display_String>
				//if the resistor value changed
				while(volt<436 && exit_R != '*'){
     a60:	4c c0       	rjmp	.+152    	; 0xafa <__stack+0x29b>
					if(old_volt!=volt){
     a62:	ce 15       	cp	r28, r14
     a64:	df 05       	cpc	r29, r15
     a66:	09 f4       	brne	.+2      	; 0xa6a <__stack+0x20b>
     a68:	41 c0       	rjmp	.+130    	; 0xaec <__stack+0x28d>
						old_volt=volt;
						LCD_Display_Location(0,1);
     a6a:	21 e0       	ldi	r18, 0x01	; 1
     a6c:	30 e0       	ldi	r19, 0x00	; 0
     a6e:	40 e0       	ldi	r20, 0x00	; 0
     a70:	50 e0       	ldi	r21, 0x00	; 0
     a72:	60 e0       	ldi	r22, 0x00	; 0
     a74:	70 e0       	ldi	r23, 0x00	; 0
     a76:	cb 01       	movw	r24, r22
     a78:	0e 94 20 13 	call	0x2640	; 0x2640 <LCD_Display_Location>
						LCD_Display_String((uint8_t*)"     ");
     a7c:	86 e4       	ldi	r24, 0x46	; 70
     a7e:	91 e0       	ldi	r25, 0x01	; 1
     a80:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_Display_String>
						Rin=(1350.0*volt)/(1024.0-volt);
     a84:	be 01       	movw	r22, r28
     a86:	80 e0       	ldi	r24, 0x00	; 0
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	0e 94 10 18 	call	0x3020	; 0x3020 <__floatunsisf>
     a8e:	6b 01       	movw	r12, r22
     a90:	7c 01       	movw	r14, r24
     a92:	20 e0       	ldi	r18, 0x00	; 0
     a94:	30 ec       	ldi	r19, 0xC0	; 192
     a96:	48 ea       	ldi	r20, 0xA8	; 168
     a98:	54 e4       	ldi	r21, 0x44	; 68
     a9a:	0e 94 d7 18 	call	0x31ae	; 0x31ae <__mulsf3>
     a9e:	4b 01       	movw	r8, r22
     aa0:	5c 01       	movw	r10, r24
     aa2:	a7 01       	movw	r20, r14
     aa4:	96 01       	movw	r18, r12
     aa6:	60 e0       	ldi	r22, 0x00	; 0
     aa8:	70 e0       	ldi	r23, 0x00	; 0
     aaa:	80 e8       	ldi	r24, 0x80	; 128
     aac:	94 e4       	ldi	r25, 0x44	; 68
     aae:	0e 94 c1 16 	call	0x2d82	; 0x2d82 <__subsf3>
     ab2:	9b 01       	movw	r18, r22
     ab4:	ac 01       	movw	r20, r24
     ab6:	c5 01       	movw	r24, r10
     ab8:	b4 01       	movw	r22, r8
     aba:	0e 94 33 17 	call	0x2e66	; 0x2e66 <__divsf3>
     abe:	6b 01       	movw	r12, r22
     ac0:	7c 01       	movw	r14, r24
						LCD_Display_Location(0,1);
     ac2:	21 e0       	ldi	r18, 0x01	; 1
     ac4:	30 e0       	ldi	r19, 0x00	; 0
     ac6:	40 e0       	ldi	r20, 0x00	; 0
     ac8:	50 e0       	ldi	r21, 0x00	; 0
     aca:	60 e0       	ldi	r22, 0x00	; 0
     acc:	70 e0       	ldi	r23, 0x00	; 0
     ace:	cb 01       	movw	r24, r22
     ad0:	0e 94 20 13 	call	0x2640	; 0x2640 <LCD_Display_Location>
						LCD_Display_FloatNumber(Rin,3);
     ad4:	43 e0       	ldi	r20, 0x03	; 3
     ad6:	c7 01       	movw	r24, r14
     ad8:	b6 01       	movw	r22, r12
     ada:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <LCD_Display_FloatNumber>
     ade:	8f ec       	ldi	r24, 0xCF	; 207
     ae0:	97 e0       	ldi	r25, 0x07	; 7
     ae2:	01 97       	sbiw	r24, 0x01	; 1
     ae4:	f1 f7       	brne	.-4      	; 0xae2 <__stack+0x283>
     ae6:	00 c0       	rjmp	.+0      	; 0xae8 <__stack+0x289>
     ae8:	00 00       	nop
				LCD_Display_Location(11,1);
				LCD_Display_String((uint8_t*)"*:ext");
				//if the resistor value changed
				while(volt<436 && exit_R != '*'){
					if(old_volt!=volt){
						old_volt=volt;
     aea:	7e 01       	movw	r14, r28
						Rin=(1350.0*volt)/(1024.0-volt);
						LCD_Display_Location(0,1);
						LCD_Display_FloatNumber(Rin,3);
						_delay_ms(1);
					}
					volt=ADC_Read(Rpin);
     aec:	87 e0       	ldi	r24, 0x07	; 7
     aee:	0e 94 43 15 	call	0x2a86	; 0x2a86 <ADC_Read>
     af2:	ec 01       	movw	r28, r24
					exit_R=KEYPAD_Read();
     af4:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <KEYPAD_Read>
     af8:	18 2f       	mov	r17, r24
				LCD_Display_FloatNumber(Rin,3);
				_delay_ms(1);
				LCD_Display_Location(11,1);
				LCD_Display_String((uint8_t*)"*:ext");
				//if the resistor value changed
				while(volt<436 && exit_R != '*'){
     afa:	c4 3b       	cpi	r28, 0xB4	; 180
     afc:	91 e0       	ldi	r25, 0x01	; 1
     afe:	d9 07       	cpc	r29, r25
     b00:	08 f0       	brcs	.+2      	; 0xb04 <__stack+0x2a5>
     b02:	1f c2       	rjmp	.+1086   	; 0xf42 <__stack+0x6e3>
     b04:	1a 32       	cpi	r17, 0x2A	; 42
     b06:	09 f0       	breq	.+2      	; 0xb0a <__stack+0x2ab>
     b08:	ac cf       	rjmp	.-168    	; 0xa62 <__stack+0x203>
     b0a:	1b c2       	rjmp	.+1078   	; 0xf42 <__stack+0x6e3>
				}
			}
			break;
			case '3':
			//we will need to map
			if(volt >=1020){// big range
     b0c:	cc 3f       	cpi	r28, 0xFC	; 252
     b0e:	23 e0       	ldi	r18, 0x03	; 3
     b10:	d2 07       	cpc	r29, r18
     b12:	d8 f0       	brcs	.+54     	; 0xb4a <__stack+0x2eb>
				LCD_Display_String((uint8_t*)"error(big R) :(");
     b14:	8d ea       	ldi	r24, 0xAD	; 173
     b16:	90 e0       	ldi	r25, 0x00	; 0
     b18:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_Display_String>
				LCD_Display_Location(0,1);
     b1c:	21 e0       	ldi	r18, 0x01	; 1
     b1e:	30 e0       	ldi	r19, 0x00	; 0
     b20:	40 e0       	ldi	r20, 0x00	; 0
     b22:	50 e0       	ldi	r21, 0x00	; 0
     b24:	60 e0       	ldi	r22, 0x00	; 0
     b26:	70 e0       	ldi	r23, 0x00	; 0
     b28:	cb 01       	movw	r24, r22
     b2a:	0e 94 20 13 	call	0x2640	; 0x2640 <LCD_Display_Location>
				LCD_Display_String((uint8_t*)"need big range;)");
     b2e:	8d eb       	ldi	r24, 0xBD	; 189
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_Display_String>
     b36:	8f ef       	ldi	r24, 0xFF	; 255
     b38:	99 e6       	ldi	r25, 0x69	; 105
     b3a:	28 e1       	ldi	r18, 0x18	; 24
     b3c:	81 50       	subi	r24, 0x01	; 1
     b3e:	90 40       	sbci	r25, 0x00	; 0
     b40:	20 40       	sbci	r18, 0x00	; 0
     b42:	e1 f7       	brne	.-8      	; 0xb3c <__stack+0x2dd>
     b44:	00 c0       	rjmp	.+0      	; 0xb46 <__stack+0x2e7>
     b46:	00 00       	nop
     b48:	ff c1       	rjmp	.+1022   	; 0xf48 <__stack+0x6e9>
				_delay_ms(1000);
				return;
			}
			if(volt<930){	//small range
     b4a:	c2 3a       	cpi	r28, 0xA2	; 162
     b4c:	83 e0       	ldi	r24, 0x03	; 3
     b4e:	d8 07       	cpc	r29, r24
     b50:	f0 f4       	brcc	.+60     	; 0xb8e <__stack+0x32f>
				LCD_Display_String((uint8_t*)"caution(smal R)");
     b52:	83 ef       	ldi	r24, 0xF3	; 243
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_Display_String>
				LCD_Display_Location(0,1);
     b5a:	21 e0       	ldi	r18, 0x01	; 1
     b5c:	30 e0       	ldi	r19, 0x00	; 0
     b5e:	40 e0       	ldi	r20, 0x00	; 0
     b60:	50 e0       	ldi	r21, 0x00	; 0
     b62:	60 e0       	ldi	r22, 0x00	; 0
     b64:	70 e0       	ldi	r23, 0x00	; 0
     b66:	cb 01       	movw	r24, r22
     b68:	0e 94 20 13 	call	0x2640	; 0x2640 <LCD_Display_Location>
				LCD_Display_String((uint8_t*)"ned smal range;)");
     b6c:	83 e0       	ldi	r24, 0x03	; 3
     b6e:	91 e0       	ldi	r25, 0x01	; 1
     b70:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_Display_String>
     b74:	9f ef       	ldi	r25, 0xFF	; 255
     b76:	29 e6       	ldi	r18, 0x69	; 105
     b78:	88 e1       	ldi	r24, 0x18	; 24
     b7a:	91 50       	subi	r25, 0x01	; 1
     b7c:	20 40       	sbci	r18, 0x00	; 0
     b7e:	80 40       	sbci	r24, 0x00	; 0
     b80:	e1 f7       	brne	.-8      	; 0xb7a <__stack+0x31b>
     b82:	00 c0       	rjmp	.+0      	; 0xb84 <__stack+0x325>
     b84:	00 00       	nop
				_delay_ms(1000);
				LCD_ClearScreen();
     b86:	0e 94 8e 10 	call	0x211c	; 0x211c <LCD_ClearScreen>
				LCD_HomeScreen();
     b8a:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <LCD_HomeScreen>
			}
			if(volt>=1014){	// it is mega ohm
     b8e:	c6 3f       	cpi	r28, 0xF6	; 246
     b90:	93 e0       	ldi	r25, 0x03	; 3
     b92:	d9 07       	cpc	r29, r25
     b94:	08 f4       	brcc	.+2      	; 0xb98 <__stack+0x339>
     b96:	9c c0       	rjmp	.+312    	; 0xcd0 <__stack+0x471>
				Rin=(0.01*volt)/(1024.0-volt);
     b98:	be 01       	movw	r22, r28
     b9a:	80 e0       	ldi	r24, 0x00	; 0
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	0e 94 10 18 	call	0x3020	; 0x3020 <__floatunsisf>
     ba2:	4b 01       	movw	r8, r22
     ba4:	5c 01       	movw	r10, r24
     ba6:	2a e0       	ldi	r18, 0x0A	; 10
     ba8:	37 ed       	ldi	r19, 0xD7	; 215
     baa:	43 e2       	ldi	r20, 0x23	; 35
     bac:	5c e3       	ldi	r21, 0x3C	; 60
     bae:	0e 94 d7 18 	call	0x31ae	; 0x31ae <__mulsf3>
     bb2:	2b 01       	movw	r4, r22
     bb4:	3c 01       	movw	r6, r24
     bb6:	a5 01       	movw	r20, r10
     bb8:	94 01       	movw	r18, r8
     bba:	60 e0       	ldi	r22, 0x00	; 0
     bbc:	70 e0       	ldi	r23, 0x00	; 0
     bbe:	80 e8       	ldi	r24, 0x80	; 128
     bc0:	94 e4       	ldi	r25, 0x44	; 68
     bc2:	0e 94 c1 16 	call	0x2d82	; 0x2d82 <__subsf3>
     bc6:	9b 01       	movw	r18, r22
     bc8:	ac 01       	movw	r20, r24
     bca:	c3 01       	movw	r24, r6
     bcc:	b2 01       	movw	r22, r4
     bce:	0e 94 33 17 	call	0x2e66	; 0x2e66 <__divsf3>
     bd2:	4b 01       	movw	r8, r22
     bd4:	5c 01       	movw	r10, r24
				LCD_Display_String((uint8_t*)"Resistor (MOhm)");
     bd6:	84 e1       	ldi	r24, 0x14	; 20
     bd8:	91 e0       	ldi	r25, 0x01	; 1
     bda:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_Display_String>
				LCD_Display_Location(0,1);
     bde:	21 e0       	ldi	r18, 0x01	; 1
     be0:	30 e0       	ldi	r19, 0x00	; 0
     be2:	40 e0       	ldi	r20, 0x00	; 0
     be4:	50 e0       	ldi	r21, 0x00	; 0
     be6:	60 e0       	ldi	r22, 0x00	; 0
     be8:	70 e0       	ldi	r23, 0x00	; 0
     bea:	cb 01       	movw	r24, r22
     bec:	0e 94 20 13 	call	0x2640	; 0x2640 <LCD_Display_Location>
				LCD_Display_FloatNumber(Rin,3);
     bf0:	43 e0       	ldi	r20, 0x03	; 3
     bf2:	c5 01       	movw	r24, r10
     bf4:	b4 01       	movw	r22, r8
     bf6:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <LCD_Display_FloatNumber>
     bfa:	8f ec       	ldi	r24, 0xCF	; 207
     bfc:	97 e0       	ldi	r25, 0x07	; 7
     bfe:	01 97       	sbiw	r24, 0x01	; 1
     c00:	f1 f7       	brne	.-4      	; 0xbfe <__stack+0x39f>
     c02:	00 c0       	rjmp	.+0      	; 0xc04 <__stack+0x3a5>
     c04:	00 00       	nop
				_delay_ms(1);
				LCD_Display_Location(11,1);
     c06:	21 e0       	ldi	r18, 0x01	; 1
     c08:	30 e0       	ldi	r19, 0x00	; 0
     c0a:	40 e0       	ldi	r20, 0x00	; 0
     c0c:	50 e0       	ldi	r21, 0x00	; 0
     c0e:	6b e0       	ldi	r22, 0x0B	; 11
     c10:	70 e0       	ldi	r23, 0x00	; 0
     c12:	80 e0       	ldi	r24, 0x00	; 0
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	0e 94 20 13 	call	0x2640	; 0x2640 <LCD_Display_Location>
				LCD_Display_String((uint8_t*)"*:ext");
     c1a:	8d ed       	ldi	r24, 0xDD	; 221
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_Display_String>
				//if the resistor value changed
				while(volt <1020 && volt>=1014 && exit_R != '*'){
     c22:	4c c0       	rjmp	.+152    	; 0xcbc <__stack+0x45d>
					if(old_volt!=volt){
     c24:	ce 15       	cp	r28, r14
     c26:	df 05       	cpc	r29, r15
     c28:	09 f4       	brne	.+2      	; 0xc2c <__stack+0x3cd>
     c2a:	41 c0       	rjmp	.+130    	; 0xcae <__stack+0x44f>
						old_volt=volt;
						LCD_Display_Location(0,1);
     c2c:	21 e0       	ldi	r18, 0x01	; 1
     c2e:	30 e0       	ldi	r19, 0x00	; 0
     c30:	40 e0       	ldi	r20, 0x00	; 0
     c32:	50 e0       	ldi	r21, 0x00	; 0
     c34:	60 e0       	ldi	r22, 0x00	; 0
     c36:	70 e0       	ldi	r23, 0x00	; 0
     c38:	cb 01       	movw	r24, r22
     c3a:	0e 94 20 13 	call	0x2640	; 0x2640 <LCD_Display_Location>
						LCD_Display_String((uint8_t*)"   ");
     c3e:	88 e4       	ldi	r24, 0x48	; 72
     c40:	91 e0       	ldi	r25, 0x01	; 1
     c42:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_Display_String>
						Rin=(0.01*volt)/(1024.0-volt);
     c46:	be 01       	movw	r22, r28
     c48:	80 e0       	ldi	r24, 0x00	; 0
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	0e 94 10 18 	call	0x3020	; 0x3020 <__floatunsisf>
     c50:	6b 01       	movw	r12, r22
     c52:	7c 01       	movw	r14, r24
     c54:	2a e0       	ldi	r18, 0x0A	; 10
     c56:	37 ed       	ldi	r19, 0xD7	; 215
     c58:	43 e2       	ldi	r20, 0x23	; 35
     c5a:	5c e3       	ldi	r21, 0x3C	; 60
     c5c:	0e 94 d7 18 	call	0x31ae	; 0x31ae <__mulsf3>
     c60:	4b 01       	movw	r8, r22
     c62:	5c 01       	movw	r10, r24
     c64:	a7 01       	movw	r20, r14
     c66:	96 01       	movw	r18, r12
     c68:	60 e0       	ldi	r22, 0x00	; 0
     c6a:	70 e0       	ldi	r23, 0x00	; 0
     c6c:	80 e8       	ldi	r24, 0x80	; 128
     c6e:	94 e4       	ldi	r25, 0x44	; 68
     c70:	0e 94 c1 16 	call	0x2d82	; 0x2d82 <__subsf3>
     c74:	9b 01       	movw	r18, r22
     c76:	ac 01       	movw	r20, r24
     c78:	c5 01       	movw	r24, r10
     c7a:	b4 01       	movw	r22, r8
     c7c:	0e 94 33 17 	call	0x2e66	; 0x2e66 <__divsf3>
     c80:	6b 01       	movw	r12, r22
     c82:	7c 01       	movw	r14, r24
						LCD_Display_Location(0,1);
     c84:	21 e0       	ldi	r18, 0x01	; 1
     c86:	30 e0       	ldi	r19, 0x00	; 0
     c88:	40 e0       	ldi	r20, 0x00	; 0
     c8a:	50 e0       	ldi	r21, 0x00	; 0
     c8c:	60 e0       	ldi	r22, 0x00	; 0
     c8e:	70 e0       	ldi	r23, 0x00	; 0
     c90:	cb 01       	movw	r24, r22
     c92:	0e 94 20 13 	call	0x2640	; 0x2640 <LCD_Display_Location>
						LCD_Display_FloatNumber(Rin,3);
     c96:	43 e0       	ldi	r20, 0x03	; 3
     c98:	c7 01       	movw	r24, r14
     c9a:	b6 01       	movw	r22, r12
     c9c:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <LCD_Display_FloatNumber>
     ca0:	8f ec       	ldi	r24, 0xCF	; 207
     ca2:	97 e0       	ldi	r25, 0x07	; 7
     ca4:	01 97       	sbiw	r24, 0x01	; 1
     ca6:	f1 f7       	brne	.-4      	; 0xca4 <__stack+0x445>
     ca8:	00 c0       	rjmp	.+0      	; 0xcaa <__stack+0x44b>
     caa:	00 00       	nop
				LCD_Display_Location(11,1);
				LCD_Display_String((uint8_t*)"*:ext");
				//if the resistor value changed
				while(volt <1020 && volt>=1014 && exit_R != '*'){
					if(old_volt!=volt){
						old_volt=volt;
     cac:	7e 01       	movw	r14, r28
						Rin=(0.01*volt)/(1024.0-volt);
						LCD_Display_Location(0,1);
						LCD_Display_FloatNumber(Rin,3);
						_delay_ms(1);
					}
					volt=ADC_Read(Rpin);
     cae:	87 e0       	ldi	r24, 0x07	; 7
     cb0:	0e 94 43 15 	call	0x2a86	; 0x2a86 <ADC_Read>
     cb4:	ec 01       	movw	r28, r24
					exit_R=KEYPAD_Read();
     cb6:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <KEYPAD_Read>
     cba:	18 2f       	mov	r17, r24
				LCD_Display_FloatNumber(Rin,3);
				_delay_ms(1);
				LCD_Display_Location(11,1);
				LCD_Display_String((uint8_t*)"*:ext");
				//if the resistor value changed
				while(volt <1020 && volt>=1014 && exit_R != '*'){
     cbc:	ce 01       	movw	r24, r28
     cbe:	86 5f       	subi	r24, 0xF6	; 246
     cc0:	93 40       	sbci	r25, 0x03	; 3
     cc2:	06 97       	sbiw	r24, 0x06	; 6
     cc4:	08 f0       	brcs	.+2      	; 0xcc8 <__stack+0x469>
     cc6:	3d c1       	rjmp	.+634    	; 0xf42 <__stack+0x6e3>
     cc8:	1a 32       	cpi	r17, 0x2A	; 42
     cca:	09 f0       	breq	.+2      	; 0xcce <__stack+0x46f>
     ccc:	ab cf       	rjmp	.-170    	; 0xc24 <__stack+0x3c5>
     cce:	39 c1       	rjmp	.+626    	; 0xf42 <__stack+0x6e3>
					}
					volt=ADC_Read(Rpin);
					exit_R=KEYPAD_Read();
				}
			}
			else if(volt>=90){ // it is kilo ohm
     cd0:	ca 35       	cpi	r28, 0x5A	; 90
     cd2:	d1 05       	cpc	r29, r1
     cd4:	08 f4       	brcc	.+2      	; 0xcd8 <__stack+0x479>
     cd6:	9d c0       	rjmp	.+314    	; 0xe12 <__stack+0x5b3>
				Rin=(10.0*volt)/(1024.0-volt);
     cd8:	be 01       	movw	r22, r28
     cda:	80 e0       	ldi	r24, 0x00	; 0
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	0e 94 10 18 	call	0x3020	; 0x3020 <__floatunsisf>
     ce2:	4b 01       	movw	r8, r22
     ce4:	5c 01       	movw	r10, r24
     ce6:	20 e0       	ldi	r18, 0x00	; 0
     ce8:	30 e0       	ldi	r19, 0x00	; 0
     cea:	40 e2       	ldi	r20, 0x20	; 32
     cec:	51 e4       	ldi	r21, 0x41	; 65
     cee:	0e 94 d7 18 	call	0x31ae	; 0x31ae <__mulsf3>
     cf2:	2b 01       	movw	r4, r22
     cf4:	3c 01       	movw	r6, r24
     cf6:	a5 01       	movw	r20, r10
     cf8:	94 01       	movw	r18, r8
     cfa:	60 e0       	ldi	r22, 0x00	; 0
     cfc:	70 e0       	ldi	r23, 0x00	; 0
     cfe:	80 e8       	ldi	r24, 0x80	; 128
     d00:	94 e4       	ldi	r25, 0x44	; 68
     d02:	0e 94 c1 16 	call	0x2d82	; 0x2d82 <__subsf3>
     d06:	9b 01       	movw	r18, r22
     d08:	ac 01       	movw	r20, r24
     d0a:	c3 01       	movw	r24, r6
     d0c:	b2 01       	movw	r22, r4
     d0e:	0e 94 33 17 	call	0x2e66	; 0x2e66 <__divsf3>
     d12:	4b 01       	movw	r8, r22
     d14:	5c 01       	movw	r10, r24
				LCD_Display_String((uint8_t*)"Resistor (kOhm)");
     d16:	83 ee       	ldi	r24, 0xE3	; 227
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_Display_String>
				LCD_Display_Location(0,1);
     d1e:	21 e0       	ldi	r18, 0x01	; 1
     d20:	30 e0       	ldi	r19, 0x00	; 0
     d22:	40 e0       	ldi	r20, 0x00	; 0
     d24:	50 e0       	ldi	r21, 0x00	; 0
     d26:	60 e0       	ldi	r22, 0x00	; 0
     d28:	70 e0       	ldi	r23, 0x00	; 0
     d2a:	cb 01       	movw	r24, r22
     d2c:	0e 94 20 13 	call	0x2640	; 0x2640 <LCD_Display_Location>
				LCD_Display_FloatNumber(Rin,3);
     d30:	43 e0       	ldi	r20, 0x03	; 3
     d32:	c5 01       	movw	r24, r10
     d34:	b4 01       	movw	r22, r8
     d36:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <LCD_Display_FloatNumber>
     d3a:	8f ec       	ldi	r24, 0xCF	; 207
     d3c:	97 e0       	ldi	r25, 0x07	; 7
     d3e:	01 97       	sbiw	r24, 0x01	; 1
     d40:	f1 f7       	brne	.-4      	; 0xd3e <__stack+0x4df>
     d42:	00 c0       	rjmp	.+0      	; 0xd44 <__stack+0x4e5>
     d44:	00 00       	nop
				_delay_ms(1);
				LCD_Display_Location(11,1);
     d46:	21 e0       	ldi	r18, 0x01	; 1
     d48:	30 e0       	ldi	r19, 0x00	; 0
     d4a:	40 e0       	ldi	r20, 0x00	; 0
     d4c:	50 e0       	ldi	r21, 0x00	; 0
     d4e:	6b e0       	ldi	r22, 0x0B	; 11
     d50:	70 e0       	ldi	r23, 0x00	; 0
     d52:	80 e0       	ldi	r24, 0x00	; 0
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	0e 94 20 13 	call	0x2640	; 0x2640 <LCD_Display_Location>
				LCD_Display_String((uint8_t*)"*:ext");
     d5a:	8d ed       	ldi	r24, 0xDD	; 221
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_Display_String>
				//if the resistor value changed
				while(volt<1014 && volt>=90 && exit_R != '*'){
     d62:	4c c0       	rjmp	.+152    	; 0xdfc <__stack+0x59d>
					if(old_volt!=volt){
     d64:	ce 15       	cp	r28, r14
     d66:	df 05       	cpc	r29, r15
     d68:	09 f4       	brne	.+2      	; 0xd6c <__stack+0x50d>
     d6a:	41 c0       	rjmp	.+130    	; 0xdee <__stack+0x58f>
						old_volt=volt;
						LCD_Display_Location(0,1);
     d6c:	21 e0       	ldi	r18, 0x01	; 1
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	40 e0       	ldi	r20, 0x00	; 0
     d72:	50 e0       	ldi	r21, 0x00	; 0
     d74:	60 e0       	ldi	r22, 0x00	; 0
     d76:	70 e0       	ldi	r23, 0x00	; 0
     d78:	cb 01       	movw	r24, r22
     d7a:	0e 94 20 13 	call	0x2640	; 0x2640 <LCD_Display_Location>
						LCD_Display_String((uint8_t*)"       ");
     d7e:	84 e4       	ldi	r24, 0x44	; 68
     d80:	91 e0       	ldi	r25, 0x01	; 1
     d82:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_Display_String>
						Rin=(10.0*volt)/(1024.0-volt);
     d86:	be 01       	movw	r22, r28
     d88:	80 e0       	ldi	r24, 0x00	; 0
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	0e 94 10 18 	call	0x3020	; 0x3020 <__floatunsisf>
     d90:	6b 01       	movw	r12, r22
     d92:	7c 01       	movw	r14, r24
     d94:	20 e0       	ldi	r18, 0x00	; 0
     d96:	30 e0       	ldi	r19, 0x00	; 0
     d98:	40 e2       	ldi	r20, 0x20	; 32
     d9a:	51 e4       	ldi	r21, 0x41	; 65
     d9c:	0e 94 d7 18 	call	0x31ae	; 0x31ae <__mulsf3>
     da0:	4b 01       	movw	r8, r22
     da2:	5c 01       	movw	r10, r24
     da4:	a7 01       	movw	r20, r14
     da6:	96 01       	movw	r18, r12
     da8:	60 e0       	ldi	r22, 0x00	; 0
     daa:	70 e0       	ldi	r23, 0x00	; 0
     dac:	80 e8       	ldi	r24, 0x80	; 128
     dae:	94 e4       	ldi	r25, 0x44	; 68
     db0:	0e 94 c1 16 	call	0x2d82	; 0x2d82 <__subsf3>
     db4:	9b 01       	movw	r18, r22
     db6:	ac 01       	movw	r20, r24
     db8:	c5 01       	movw	r24, r10
     dba:	b4 01       	movw	r22, r8
     dbc:	0e 94 33 17 	call	0x2e66	; 0x2e66 <__divsf3>
     dc0:	6b 01       	movw	r12, r22
     dc2:	7c 01       	movw	r14, r24
						LCD_Display_Location(0,1);
     dc4:	21 e0       	ldi	r18, 0x01	; 1
     dc6:	30 e0       	ldi	r19, 0x00	; 0
     dc8:	40 e0       	ldi	r20, 0x00	; 0
     dca:	50 e0       	ldi	r21, 0x00	; 0
     dcc:	60 e0       	ldi	r22, 0x00	; 0
     dce:	70 e0       	ldi	r23, 0x00	; 0
     dd0:	cb 01       	movw	r24, r22
     dd2:	0e 94 20 13 	call	0x2640	; 0x2640 <LCD_Display_Location>
						LCD_Display_FloatNumber(Rin,3);
     dd6:	43 e0       	ldi	r20, 0x03	; 3
     dd8:	c7 01       	movw	r24, r14
     dda:	b6 01       	movw	r22, r12
     ddc:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <LCD_Display_FloatNumber>
     de0:	8f ec       	ldi	r24, 0xCF	; 207
     de2:	97 e0       	ldi	r25, 0x07	; 7
     de4:	01 97       	sbiw	r24, 0x01	; 1
     de6:	f1 f7       	brne	.-4      	; 0xde4 <__stack+0x585>
     de8:	00 c0       	rjmp	.+0      	; 0xdea <__stack+0x58b>
     dea:	00 00       	nop
				LCD_Display_Location(11,1);
				LCD_Display_String((uint8_t*)"*:ext");
				//if the resistor value changed
				while(volt<1014 && volt>=90 && exit_R != '*'){
					if(old_volt!=volt){
						old_volt=volt;
     dec:	7e 01       	movw	r14, r28
						Rin=(10.0*volt)/(1024.0-volt);
						LCD_Display_Location(0,1);
						LCD_Display_FloatNumber(Rin,3);
						_delay_ms(1);
					}
					volt=ADC_Read(Rpin);
     dee:	87 e0       	ldi	r24, 0x07	; 7
     df0:	0e 94 43 15 	call	0x2a86	; 0x2a86 <ADC_Read>
     df4:	ec 01       	movw	r28, r24
					exit_R=KEYPAD_Read();
     df6:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <KEYPAD_Read>
     dfa:	18 2f       	mov	r17, r24
				LCD_Display_FloatNumber(Rin,3);
				_delay_ms(1);
				LCD_Display_Location(11,1);
				LCD_Display_String((uint8_t*)"*:ext");
				//if the resistor value changed
				while(volt<1014 && volt>=90 && exit_R != '*'){
     dfc:	ce 01       	movw	r24, r28
     dfe:	8a 55       	subi	r24, 0x5A	; 90
     e00:	91 09       	sbc	r25, r1
     e02:	8c 39       	cpi	r24, 0x9C	; 156
     e04:	93 40       	sbci	r25, 0x03	; 3
     e06:	08 f0       	brcs	.+2      	; 0xe0a <__stack+0x5ab>
     e08:	9c c0       	rjmp	.+312    	; 0xf42 <__stack+0x6e3>
     e0a:	1a 32       	cpi	r17, 0x2A	; 42
     e0c:	09 f0       	breq	.+2      	; 0xe10 <__stack+0x5b1>
     e0e:	aa cf       	rjmp	.-172    	; 0xd64 <__stack+0x505>
     e10:	98 c0       	rjmp	.+304    	; 0xf42 <__stack+0x6e3>
					volt=ADC_Read(Rpin);
					exit_R=KEYPAD_Read();
				}
			}
			else{	//less than 1k
				Rin=(10000.0*volt)/(1024.0-volt);
     e12:	be 01       	movw	r22, r28
     e14:	80 e0       	ldi	r24, 0x00	; 0
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	0e 94 10 18 	call	0x3020	; 0x3020 <__floatunsisf>
     e1c:	4b 01       	movw	r8, r22
     e1e:	5c 01       	movw	r10, r24
     e20:	20 e0       	ldi	r18, 0x00	; 0
     e22:	30 e4       	ldi	r19, 0x40	; 64
     e24:	4c e1       	ldi	r20, 0x1C	; 28
     e26:	56 e4       	ldi	r21, 0x46	; 70
     e28:	0e 94 d7 18 	call	0x31ae	; 0x31ae <__mulsf3>
     e2c:	2b 01       	movw	r4, r22
     e2e:	3c 01       	movw	r6, r24
     e30:	a5 01       	movw	r20, r10
     e32:	94 01       	movw	r18, r8
     e34:	60 e0       	ldi	r22, 0x00	; 0
     e36:	70 e0       	ldi	r23, 0x00	; 0
     e38:	80 e8       	ldi	r24, 0x80	; 128
     e3a:	94 e4       	ldi	r25, 0x44	; 68
     e3c:	0e 94 c1 16 	call	0x2d82	; 0x2d82 <__subsf3>
     e40:	9b 01       	movw	r18, r22
     e42:	ac 01       	movw	r20, r24
     e44:	c3 01       	movw	r24, r6
     e46:	b2 01       	movw	r22, r4
     e48:	0e 94 33 17 	call	0x2e66	; 0x2e66 <__divsf3>
     e4c:	4b 01       	movw	r8, r22
     e4e:	5c 01       	movw	r10, r24
				LCD_Display_String((uint8_t*)"Resistor (Ohm)");
     e50:	8e ec       	ldi	r24, 0xCE	; 206
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_Display_String>
				LCD_Display_Location(0,1);
     e58:	21 e0       	ldi	r18, 0x01	; 1
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	40 e0       	ldi	r20, 0x00	; 0
     e5e:	50 e0       	ldi	r21, 0x00	; 0
     e60:	60 e0       	ldi	r22, 0x00	; 0
     e62:	70 e0       	ldi	r23, 0x00	; 0
     e64:	cb 01       	movw	r24, r22
     e66:	0e 94 20 13 	call	0x2640	; 0x2640 <LCD_Display_Location>
				LCD_Display_FloatNumber(Rin,3);
     e6a:	43 e0       	ldi	r20, 0x03	; 3
     e6c:	c5 01       	movw	r24, r10
     e6e:	b4 01       	movw	r22, r8
     e70:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <LCD_Display_FloatNumber>
     e74:	8f ec       	ldi	r24, 0xCF	; 207
     e76:	97 e0       	ldi	r25, 0x07	; 7
     e78:	01 97       	sbiw	r24, 0x01	; 1
     e7a:	f1 f7       	brne	.-4      	; 0xe78 <__stack+0x619>
     e7c:	00 c0       	rjmp	.+0      	; 0xe7e <__stack+0x61f>
     e7e:	00 00       	nop
				_delay_ms(1);
				LCD_Display_Location(11,1);
     e80:	21 e0       	ldi	r18, 0x01	; 1
     e82:	30 e0       	ldi	r19, 0x00	; 0
     e84:	40 e0       	ldi	r20, 0x00	; 0
     e86:	50 e0       	ldi	r21, 0x00	; 0
     e88:	6b e0       	ldi	r22, 0x0B	; 11
     e8a:	70 e0       	ldi	r23, 0x00	; 0
     e8c:	80 e0       	ldi	r24, 0x00	; 0
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	0e 94 20 13 	call	0x2640	; 0x2640 <LCD_Display_Location>
				LCD_Display_String((uint8_t*)"*:ext");
     e94:	8d ed       	ldi	r24, 0xDD	; 221
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_Display_String>
				//if the resistor value changed
				while(volt<90 && exit_R != '*'){
     e9c:	4c c0       	rjmp	.+152    	; 0xf36 <__stack+0x6d7>
					if(old_volt!=volt){
     e9e:	ce 15       	cp	r28, r14
     ea0:	df 05       	cpc	r29, r15
     ea2:	09 f4       	brne	.+2      	; 0xea6 <__stack+0x647>
     ea4:	41 c0       	rjmp	.+130    	; 0xf28 <__stack+0x6c9>
						LCD_Display_Location(0,1);
     ea6:	21 e0       	ldi	r18, 0x01	; 1
     ea8:	30 e0       	ldi	r19, 0x00	; 0
     eaa:	40 e0       	ldi	r20, 0x00	; 0
     eac:	50 e0       	ldi	r21, 0x00	; 0
     eae:	60 e0       	ldi	r22, 0x00	; 0
     eb0:	70 e0       	ldi	r23, 0x00	; 0
     eb2:	cb 01       	movw	r24, r22
     eb4:	0e 94 20 13 	call	0x2640	; 0x2640 <LCD_Display_Location>
						old_volt=volt;
						LCD_Display_String((uint8_t*)"       ");
     eb8:	84 e4       	ldi	r24, 0x44	; 68
     eba:	91 e0       	ldi	r25, 0x01	; 1
     ebc:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_Display_String>
						Rin=(10000.0*volt)/(1024.0-volt);
     ec0:	be 01       	movw	r22, r28
     ec2:	80 e0       	ldi	r24, 0x00	; 0
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	0e 94 10 18 	call	0x3020	; 0x3020 <__floatunsisf>
     eca:	6b 01       	movw	r12, r22
     ecc:	7c 01       	movw	r14, r24
     ece:	20 e0       	ldi	r18, 0x00	; 0
     ed0:	30 e4       	ldi	r19, 0x40	; 64
     ed2:	4c e1       	ldi	r20, 0x1C	; 28
     ed4:	56 e4       	ldi	r21, 0x46	; 70
     ed6:	0e 94 d7 18 	call	0x31ae	; 0x31ae <__mulsf3>
     eda:	4b 01       	movw	r8, r22
     edc:	5c 01       	movw	r10, r24
     ede:	a7 01       	movw	r20, r14
     ee0:	96 01       	movw	r18, r12
     ee2:	60 e0       	ldi	r22, 0x00	; 0
     ee4:	70 e0       	ldi	r23, 0x00	; 0
     ee6:	80 e8       	ldi	r24, 0x80	; 128
     ee8:	94 e4       	ldi	r25, 0x44	; 68
     eea:	0e 94 c1 16 	call	0x2d82	; 0x2d82 <__subsf3>
     eee:	9b 01       	movw	r18, r22
     ef0:	ac 01       	movw	r20, r24
     ef2:	c5 01       	movw	r24, r10
     ef4:	b4 01       	movw	r22, r8
     ef6:	0e 94 33 17 	call	0x2e66	; 0x2e66 <__divsf3>
     efa:	6b 01       	movw	r12, r22
     efc:	7c 01       	movw	r14, r24
						LCD_Display_Location(0,1);
     efe:	21 e0       	ldi	r18, 0x01	; 1
     f00:	30 e0       	ldi	r19, 0x00	; 0
     f02:	40 e0       	ldi	r20, 0x00	; 0
     f04:	50 e0       	ldi	r21, 0x00	; 0
     f06:	60 e0       	ldi	r22, 0x00	; 0
     f08:	70 e0       	ldi	r23, 0x00	; 0
     f0a:	cb 01       	movw	r24, r22
     f0c:	0e 94 20 13 	call	0x2640	; 0x2640 <LCD_Display_Location>
						LCD_Display_FloatNumber(Rin,3);
     f10:	43 e0       	ldi	r20, 0x03	; 3
     f12:	c7 01       	movw	r24, r14
     f14:	b6 01       	movw	r22, r12
     f16:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <LCD_Display_FloatNumber>
     f1a:	8f ec       	ldi	r24, 0xCF	; 207
     f1c:	97 e0       	ldi	r25, 0x07	; 7
     f1e:	01 97       	sbiw	r24, 0x01	; 1
     f20:	f1 f7       	brne	.-4      	; 0xf1e <__stack+0x6bf>
     f22:	00 c0       	rjmp	.+0      	; 0xf24 <__stack+0x6c5>
     f24:	00 00       	nop
				LCD_Display_String((uint8_t*)"*:ext");
				//if the resistor value changed
				while(volt<90 && exit_R != '*'){
					if(old_volt!=volt){
						LCD_Display_Location(0,1);
						old_volt=volt;
     f26:	7e 01       	movw	r14, r28
						Rin=(10000.0*volt)/(1024.0-volt);
						LCD_Display_Location(0,1);
						LCD_Display_FloatNumber(Rin,3);
						_delay_ms(1);
					}
					volt=ADC_Read(Rpin);
     f28:	87 e0       	ldi	r24, 0x07	; 7
     f2a:	0e 94 43 15 	call	0x2a86	; 0x2a86 <ADC_Read>
     f2e:	ec 01       	movw	r28, r24
					exit_R=KEYPAD_Read();
     f30:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <KEYPAD_Read>
     f34:	18 2f       	mov	r17, r24
				LCD_Display_FloatNumber(Rin,3);
				_delay_ms(1);
				LCD_Display_Location(11,1);
				LCD_Display_String((uint8_t*)"*:ext");
				//if the resistor value changed
				while(volt<90 && exit_R != '*'){
     f36:	ca 35       	cpi	r28, 0x5A	; 90
     f38:	d1 05       	cpc	r29, r1
     f3a:	18 f4       	brcc	.+6      	; 0xf42 <__stack+0x6e3>
     f3c:	1a 32       	cpi	r17, 0x2A	; 42
     f3e:	09 f0       	breq	.+2      	; 0xf42 <__stack+0x6e3>
     f40:	ae cf       	rjmp	.-164    	; 0xe9e <__stack+0x63f>
		return;
	}
	count=0;
	uint16_t old_volt;
	old_volt=volt;
	while(exit_R != '*'){
     f42:	1a 32       	cpi	r17, 0x2A	; 42
     f44:	09 f0       	breq	.+2      	; 0xf48 <__stack+0x6e9>
     f46:	f8 ca       	rjmp	.-2576   	; 0x538 <display_ohm+0x98>
				}
			}
			break;
		}
	}
}
     f48:	df 91       	pop	r29
     f4a:	cf 91       	pop	r28
     f4c:	1f 91       	pop	r17
     f4e:	0f 91       	pop	r16
     f50:	ff 90       	pop	r15
     f52:	ef 90       	pop	r14
     f54:	df 90       	pop	r13
     f56:	cf 90       	pop	r12
     f58:	bf 90       	pop	r11
     f5a:	af 90       	pop	r10
     f5c:	9f 90       	pop	r9
     f5e:	8f 90       	pop	r8
     f60:	7f 90       	pop	r7
     f62:	6f 90       	pop	r6
     f64:	5f 90       	pop	r5
     f66:	4f 90       	pop	r4
     f68:	08 95       	ret

00000f6a <display_Amp>:

void display_Amp(uint8_t range,uint16_t volt,uint8_t mode)
{   
     f6a:	4f 92       	push	r4
     f6c:	5f 92       	push	r5
     f6e:	6f 92       	push	r6
     f70:	7f 92       	push	r7
     f72:	bf 92       	push	r11
     f74:	cf 92       	push	r12
     f76:	df 92       	push	r13
     f78:	ef 92       	push	r14
     f7a:	ff 92       	push	r15
     f7c:	0f 93       	push	r16
     f7e:	1f 93       	push	r17
     f80:	cf 93       	push	r28
     f82:	df 93       	push	r29
     f84:	d8 2e       	mov	r13, r24
     f86:	eb 01       	movw	r28, r22
     f88:	04 2f       	mov	r16, r20
	// range 1:2m 2:20m 3:200m 4:1A
	if (range >'5' || range <'1'){
     f8a:	8f ec       	ldi	r24, 0xCF	; 207
     f8c:	8d 0d       	add	r24, r13
     f8e:	85 30       	cpi	r24, 0x05	; 5
     f90:	48 f0       	brcs	.+18     	; 0xfa4 <display_Amp+0x3a>
		LCD_ClearScreen();
     f92:	0e 94 8e 10 	call	0x211c	; 0x211c <LCD_ClearScreen>
		LCD_HomeScreen();
     f96:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <LCD_HomeScreen>
		LCD_Display_String((uint8_t*)"Wrong Range :(");
     f9a:	87 e8       	ldi	r24, 0x87	; 135
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_Display_String>
		return;
     fa2:	f3 c2       	rjmp	.+1510   	; 0x158a <display_Amp+0x620>
	}
	
	//check if it didn't exceed the max range
	if(volt>=1003){
     fa4:	6b 3e       	cpi	r22, 0xEB	; 235
     fa6:	73 40       	sbci	r23, 0x03	; 3
     fa8:	f8 f0       	brcs	.+62     	; 0xfe8 <display_Amp+0x7e>
		LCD_ClearScreen();
     faa:	0e 94 8e 10 	call	0x211c	; 0x211c <LCD_ClearScreen>
		LCD_HomeScreen();
     fae:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <LCD_HomeScreen>
		LCD_Display_String((uint8_t*)"error(big I) :(");
     fb2:	84 e2       	ldi	r24, 0x24	; 36
     fb4:	91 e0       	ldi	r25, 0x01	; 1
     fb6:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_Display_String>
		LCD_Display_Location(0,1);
     fba:	21 e0       	ldi	r18, 0x01	; 1
     fbc:	30 e0       	ldi	r19, 0x00	; 0
     fbe:	40 e0       	ldi	r20, 0x00	; 0
     fc0:	50 e0       	ldi	r21, 0x00	; 0
     fc2:	60 e0       	ldi	r22, 0x00	; 0
     fc4:	70 e0       	ldi	r23, 0x00	; 0
     fc6:	cb 01       	movw	r24, r22
     fc8:	0e 94 20 13 	call	0x2640	; 0x2640 <LCD_Display_Location>
		LCD_Display_String((uint8_t*)"need big range;)");
     fcc:	8d eb       	ldi	r24, 0xBD	; 189
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_Display_String>
     fd4:	8f ef       	ldi	r24, 0xFF	; 255
     fd6:	99 e6       	ldi	r25, 0x69	; 105
     fd8:	28 e1       	ldi	r18, 0x18	; 24
     fda:	81 50       	subi	r24, 0x01	; 1
     fdc:	90 40       	sbci	r25, 0x00	; 0
     fde:	20 40       	sbci	r18, 0x00	; 0
     fe0:	e1 f7       	brne	.-8      	; 0xfda <display_Amp+0x70>
     fe2:	00 c0       	rjmp	.+0      	; 0xfe4 <display_Amp+0x7a>
     fe4:	00 00       	nop
     fe6:	d1 c2       	rjmp	.+1442   	; 0x158a <display_Amp+0x620>
	exit_I=0;
	uint16_t count;
	count=0;
	
	//if you want to return
	LCD_ClearScreen();
     fe8:	0e 94 8e 10 	call	0x211c	; 0x211c <LCD_ClearScreen>
	LCD_HomeScreen();
     fec:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <LCD_HomeScreen>
	LCD_Display_String((uint8_t*)"To Return press:");
     ff0:	86 e9       	ldi	r24, 0x96	; 150
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_Display_String>
	LCD_Display_Location(0,1);
     ff8:	21 e0       	ldi	r18, 0x01	; 1
     ffa:	30 e0       	ldi	r19, 0x00	; 0
     ffc:	40 e0       	ldi	r20, 0x00	; 0
     ffe:	50 e0       	ldi	r21, 0x00	; 0
    1000:	60 e0       	ldi	r22, 0x00	; 0
    1002:	70 e0       	ldi	r23, 0x00	; 0
    1004:	cb 01       	movw	r24, r22
    1006:	0e 94 20 13 	call	0x2640	; 0x2640 <LCD_Display_Location>
	LCD_Display_String((uint8_t*)"*  ;)");
    100a:	87 ea       	ldi	r24, 0xA7	; 167
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_Display_String>
	}
	
	uint8_t exit_I;
	exit_I=0;
	uint16_t count;
	count=0;
    1012:	e1 2c       	mov	r14, r1
    1014:	f1 2c       	mov	r15, r1
		_delay_ms(1000);
		return;
	}
	
	uint8_t exit_I;
	exit_I=0;
    1016:	10 e0       	ldi	r17, 0x00	; 0
	LCD_Display_String((uint8_t*)"To Return press:");
	LCD_Display_Location(0,1);
	LCD_Display_String((uint8_t*)"*  ;)");
	
	//check of yo want to return
	while(exit_I!='*'){
    1018:	10 c0       	rjmp	.+32     	; 0x103a <display_Amp+0xd0>
		exit_I =KEYPAD_Read();
    101a:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <KEYPAD_Read>
    101e:	18 2f       	mov	r17, r24
    1020:	8f e0       	ldi	r24, 0x0F	; 15
    1022:	97 e2       	ldi	r25, 0x27	; 39
    1024:	01 97       	sbiw	r24, 0x01	; 1
    1026:	f1 f7       	brne	.-4      	; 0x1024 <display_Amp+0xba>
    1028:	00 c0       	rjmp	.+0      	; 0x102a <display_Amp+0xc0>
    102a:	00 00       	nop
		_delay_ms(5);
		count++;
    102c:	9f ef       	ldi	r25, 0xFF	; 255
    102e:	e9 1a       	sub	r14, r25
    1030:	f9 0a       	sbc	r15, r25
		if(count>=200){
    1032:	28 ec       	ldi	r18, 0xC8	; 200
    1034:	e2 16       	cp	r14, r18
    1036:	f1 04       	cpc	r15, r1
    1038:	10 f4       	brcc	.+4      	; 0x103e <display_Amp+0xd4>
	LCD_Display_String((uint8_t*)"To Return press:");
	LCD_Display_Location(0,1);
	LCD_Display_String((uint8_t*)"*  ;)");
	
	//check of yo want to return
	while(exit_I!='*'){
    103a:	1a 32       	cpi	r17, 0x2A	; 42
    103c:	71 f7       	brne	.-36     	; 0x101a <display_Amp+0xb0>
		if(count>=200){
			count=0;
			break;
		}
	}
	if(exit_I=='*'){
    103e:	1a 32       	cpi	r17, 0x2A	; 42
    1040:	09 f4       	brne	.+2      	; 0x1044 <display_Amp+0xda>
    1042:	a3 c2       	rjmp	.+1350   	; 0x158a <display_Amp+0x620>
    1044:	7e 01       	movw	r14, r28
    1046:	9e c2       	rjmp	.+1340   	; 0x1584 <display_Amp+0x61a>
	uint16_t old_volt;
	old_volt=volt;
	fint32_t Iin;
	count=0;
	while(exit_I != '*'){
		LCD_ClearScreen();
    1048:	0e 94 8e 10 	call	0x211c	; 0x211c <LCD_ClearScreen>
		LCD_HomeScreen();
    104c:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <LCD_HomeScreen>
		switch(mode){
    1050:	01 33       	cpi	r16, 0x31	; 49
    1052:	09 f4       	brne	.+2      	; 0x1056 <display_Amp+0xec>
    1054:	4c c1       	rjmp	.+664    	; 0x12ee <display_Amp+0x384>
    1056:	02 33       	cpi	r16, 0x32	; 50
    1058:	09 f0       	breq	.+2      	; 0x105c <display_Amp+0xf2>
    105a:	94 c2       	rjmp	.+1320   	; 0x1584 <display_Amp+0x61a>
			case '2':{//DC
				if(range=='4'){ //A
    105c:	84 e3       	ldi	r24, 0x34	; 52
    105e:	d8 12       	cpse	r13, r24
    1060:	a3 c0       	rjmp	.+326    	; 0x11a8 <display_Amp+0x23e>
					Iin=Read_Amp(volt,0,range,mode);
    1062:	20 2f       	mov	r18, r16
    1064:	4d 2d       	mov	r20, r13
    1066:	60 e0       	ldi	r22, 0x00	; 0
    1068:	70 e0       	ldi	r23, 0x00	; 0
    106a:	ce 01       	movw	r24, r28
    106c:	0e 94 a2 01 	call	0x344	; 0x344 <Read_Amp>
    1070:	2b 01       	movw	r4, r22
    1072:	3c 01       	movw	r6, r24
					LCD_Display_String((uint8_t*)"Current (A)");
    1074:	84 e3       	ldi	r24, 0x34	; 52
    1076:	91 e0       	ldi	r25, 0x01	; 1
    1078:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_Display_String>
					LCD_Display_Location(0,1);
    107c:	21 e0       	ldi	r18, 0x01	; 1
    107e:	30 e0       	ldi	r19, 0x00	; 0
    1080:	40 e0       	ldi	r20, 0x00	; 0
    1082:	50 e0       	ldi	r21, 0x00	; 0
    1084:	60 e0       	ldi	r22, 0x00	; 0
    1086:	70 e0       	ldi	r23, 0x00	; 0
    1088:	cb 01       	movw	r24, r22
    108a:	0e 94 20 13 	call	0x2640	; 0x2640 <LCD_Display_Location>
					LCD_Display_FloatNumber(Iin,3);
    108e:	43 e0       	ldi	r20, 0x03	; 3
    1090:	c3 01       	movw	r24, r6
    1092:	b2 01       	movw	r22, r4
    1094:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <LCD_Display_FloatNumber>
    1098:	9f ef       	ldi	r25, 0xFF	; 255
    109a:	29 e6       	ldi	r18, 0x69	; 105
    109c:	88 e1       	ldi	r24, 0x18	; 24
    109e:	91 50       	subi	r25, 0x01	; 1
    10a0:	20 40       	sbci	r18, 0x00	; 0
    10a2:	80 40       	sbci	r24, 0x00	; 0
    10a4:	e1 f7       	brne	.-8      	; 0x109e <display_Amp+0x134>
    10a6:	00 c0       	rjmp	.+0      	; 0x10a8 <display_Amp+0x13e>
    10a8:	00 00       	nop
					_delay_ms(1000);
					LCD_Display_Location(11,1);
    10aa:	21 e0       	ldi	r18, 0x01	; 1
    10ac:	30 e0       	ldi	r19, 0x00	; 0
    10ae:	40 e0       	ldi	r20, 0x00	; 0
    10b0:	50 e0       	ldi	r21, 0x00	; 0
    10b2:	6b e0       	ldi	r22, 0x0B	; 11
    10b4:	70 e0       	ldi	r23, 0x00	; 0
    10b6:	80 e0       	ldi	r24, 0x00	; 0
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	0e 94 20 13 	call	0x2640	; 0x2640 <LCD_Display_Location>
					LCD_Display_String((uint8_t*)"*:ext");
    10be:	8d ed       	ldi	r24, 0xDD	; 221
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_Display_String>
					//if the volt value changed
					while(exit_I != '*'){
    10c6:	6c c0       	rjmp	.+216    	; 0x11a0 <display_Amp+0x236>
						if(old_volt!=volt){
    10c8:	ce 15       	cp	r28, r14
    10ca:	df 05       	cpc	r29, r15
    10cc:	59 f1       	breq	.+86     	; 0x1124 <display_Amp+0x1ba>
							LCD_Display_Location(0,1);
    10ce:	21 e0       	ldi	r18, 0x01	; 1
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	40 e0       	ldi	r20, 0x00	; 0
    10d4:	50 e0       	ldi	r21, 0x00	; 0
    10d6:	60 e0       	ldi	r22, 0x00	; 0
    10d8:	70 e0       	ldi	r23, 0x00	; 0
    10da:	cb 01       	movw	r24, r22
    10dc:	0e 94 20 13 	call	0x2640	; 0x2640 <LCD_Display_Location>
							old_volt=volt;
							LCD_Display_String((uint8_t*)"           ");
    10e0:	80 e4       	ldi	r24, 0x40	; 64
    10e2:	91 e0       	ldi	r25, 0x01	; 1
    10e4:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_Display_String>
							Iin=Read_Amp(volt,0,range,mode);
    10e8:	20 2f       	mov	r18, r16
    10ea:	4d 2d       	mov	r20, r13
    10ec:	60 e0       	ldi	r22, 0x00	; 0
    10ee:	70 e0       	ldi	r23, 0x00	; 0
    10f0:	ce 01       	movw	r24, r28
    10f2:	0e 94 a2 01 	call	0x344	; 0x344 <Read_Amp>
    10f6:	2b 01       	movw	r4, r22
    10f8:	3c 01       	movw	r6, r24
							LCD_Display_Location(0,1);
    10fa:	21 e0       	ldi	r18, 0x01	; 1
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	40 e0       	ldi	r20, 0x00	; 0
    1100:	50 e0       	ldi	r21, 0x00	; 0
    1102:	60 e0       	ldi	r22, 0x00	; 0
    1104:	70 e0       	ldi	r23, 0x00	; 0
    1106:	cb 01       	movw	r24, r22
    1108:	0e 94 20 13 	call	0x2640	; 0x2640 <LCD_Display_Location>
							LCD_Display_FloatNumber(Iin,3);
    110c:	43 e0       	ldi	r20, 0x03	; 3
    110e:	c3 01       	movw	r24, r6
    1110:	b2 01       	movw	r22, r4
    1112:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <LCD_Display_FloatNumber>
    1116:	8f ec       	ldi	r24, 0xCF	; 207
    1118:	97 e0       	ldi	r25, 0x07	; 7
    111a:	01 97       	sbiw	r24, 0x01	; 1
    111c:	f1 f7       	brne	.-4      	; 0x111a <display_Amp+0x1b0>
    111e:	00 c0       	rjmp	.+0      	; 0x1120 <display_Amp+0x1b6>
    1120:	00 00       	nop
					LCD_Display_String((uint8_t*)"*:ext");
					//if the volt value changed
					while(exit_I != '*'){
						if(old_volt!=volt){
							LCD_Display_Location(0,1);
							old_volt=volt;
    1122:	7e 01       	movw	r14, r28
							LCD_Display_Location(0,1);
							LCD_Display_FloatNumber(Iin,3);
							_delay_ms(1);
						}
						
						if(volt>=810 || volt<=200){ //make sure
    1124:	ce 01       	movw	r24, r28
    1126:	89 5c       	subi	r24, 0xC9	; 201
    1128:	91 09       	sbc	r25, r1
    112a:	81 36       	cpi	r24, 0x61	; 97
    112c:	92 40       	sbci	r25, 0x02	; 2
    112e:	68 f0       	brcs	.+26     	; 0x114a <display_Amp+0x1e0>
    1130:	8f ef       	ldi	r24, 0xFF	; 255
    1132:	90 e7       	ldi	r25, 0x70	; 112
    1134:	22 e0       	ldi	r18, 0x02	; 2
    1136:	81 50       	subi	r24, 0x01	; 1
    1138:	90 40       	sbci	r25, 0x00	; 0
    113a:	20 40       	sbci	r18, 0x00	; 0
    113c:	e1 f7       	brne	.-8      	; 0x1136 <display_Amp+0x1cc>
    113e:	00 c0       	rjmp	.+0      	; 0x1140 <display_Amp+0x1d6>
    1140:	00 00       	nop
							_delay_ms(100);
							volt=ADC_Read(IDCpin);
    1142:	86 e0       	ldi	r24, 0x06	; 6
    1144:	0e 94 43 15 	call	0x2a86	; 0x2a86 <ADC_Read>
    1148:	ec 01       	movw	r28, r24
						}
						//check if it didn't exceed the max range (positive or negative)
						if(volt>=810 || volt<=200){
    114a:	c9 5c       	subi	r28, 0xC9	; 201
    114c:	d1 09       	sbc	r29, r1
    114e:	c1 36       	cpi	r28, 0x61	; 97
    1150:	d2 40       	sbci	r29, 0x02	; 2
    1152:	f8 f0       	brcs	.+62     	; 0x1192 <display_Amp+0x228>
							LCD_ClearScreen();
    1154:	0e 94 8e 10 	call	0x211c	; 0x211c <LCD_ClearScreen>
							LCD_HomeScreen();
    1158:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <LCD_HomeScreen>
							LCD_Display_String((uint8_t*)"error(big I) :(");
    115c:	84 e2       	ldi	r24, 0x24	; 36
    115e:	91 e0       	ldi	r25, 0x01	; 1
    1160:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_Display_String>
							LCD_Display_Location(0,1);
    1164:	21 e0       	ldi	r18, 0x01	; 1
    1166:	30 e0       	ldi	r19, 0x00	; 0
    1168:	40 e0       	ldi	r20, 0x00	; 0
    116a:	50 e0       	ldi	r21, 0x00	; 0
    116c:	60 e0       	ldi	r22, 0x00	; 0
    116e:	70 e0       	ldi	r23, 0x00	; 0
    1170:	cb 01       	movw	r24, r22
    1172:	0e 94 20 13 	call	0x2640	; 0x2640 <LCD_Display_Location>
							LCD_Display_String((uint8_t*)"need big range;)");
    1176:	8d eb       	ldi	r24, 0xBD	; 189
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_Display_String>
    117e:	9f ef       	ldi	r25, 0xFF	; 255
    1180:	29 e6       	ldi	r18, 0x69	; 105
    1182:	88 e1       	ldi	r24, 0x18	; 24
    1184:	91 50       	subi	r25, 0x01	; 1
    1186:	20 40       	sbci	r18, 0x00	; 0
    1188:	80 40       	sbci	r24, 0x00	; 0
    118a:	e1 f7       	brne	.-8      	; 0x1184 <display_Amp+0x21a>
    118c:	00 c0       	rjmp	.+0      	; 0x118e <display_Amp+0x224>
    118e:	00 00       	nop
    1190:	fc c1       	rjmp	.+1016   	; 0x158a <display_Amp+0x620>
							_delay_ms(1000);
							return;
						}
						volt=ADC_Read(IDCpin);
    1192:	86 e0       	ldi	r24, 0x06	; 6
    1194:	0e 94 43 15 	call	0x2a86	; 0x2a86 <ADC_Read>
    1198:	ec 01       	movw	r28, r24
						exit_I=KEYPAD_Read();
    119a:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <KEYPAD_Read>
    119e:	18 2f       	mov	r17, r24
					LCD_Display_FloatNumber(Iin,3);
					_delay_ms(1000);
					LCD_Display_Location(11,1);
					LCD_Display_String((uint8_t*)"*:ext");
					//if the volt value changed
					while(exit_I != '*'){
    11a0:	1a 32       	cpi	r17, 0x2A	; 42
    11a2:	09 f0       	breq	.+2      	; 0x11a6 <display_Amp+0x23c>
    11a4:	91 cf       	rjmp	.-222    	; 0x10c8 <display_Amp+0x15e>
    11a6:	ee c1       	rjmp	.+988    	; 0x1584 <display_Amp+0x61a>
						volt=ADC_Read(IDCpin);
						exit_I=KEYPAD_Read();
					}
				}
				else{//mA
					Iin=Read_Amp(volt,0,range,mode);
    11a8:	20 2f       	mov	r18, r16
    11aa:	4d 2d       	mov	r20, r13
    11ac:	60 e0       	ldi	r22, 0x00	; 0
    11ae:	70 e0       	ldi	r23, 0x00	; 0
    11b0:	ce 01       	movw	r24, r28
    11b2:	0e 94 a2 01 	call	0x344	; 0x344 <Read_Amp>
    11b6:	2b 01       	movw	r4, r22
    11b8:	3c 01       	movw	r6, r24
					LCD_Display_String((uint8_t*)"Current (mA)");
    11ba:	8c e4       	ldi	r24, 0x4C	; 76
    11bc:	91 e0       	ldi	r25, 0x01	; 1
    11be:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_Display_String>
					LCD_Display_Location(0,1);
    11c2:	21 e0       	ldi	r18, 0x01	; 1
    11c4:	30 e0       	ldi	r19, 0x00	; 0
    11c6:	40 e0       	ldi	r20, 0x00	; 0
    11c8:	50 e0       	ldi	r21, 0x00	; 0
    11ca:	60 e0       	ldi	r22, 0x00	; 0
    11cc:	70 e0       	ldi	r23, 0x00	; 0
    11ce:	cb 01       	movw	r24, r22
    11d0:	0e 94 20 13 	call	0x2640	; 0x2640 <LCD_Display_Location>
					LCD_Display_FloatNumber(Iin,3);
    11d4:	43 e0       	ldi	r20, 0x03	; 3
    11d6:	c3 01       	movw	r24, r6
    11d8:	b2 01       	movw	r22, r4
    11da:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <LCD_Display_FloatNumber>
    11de:	9f ef       	ldi	r25, 0xFF	; 255
    11e0:	29 e6       	ldi	r18, 0x69	; 105
    11e2:	88 e1       	ldi	r24, 0x18	; 24
    11e4:	91 50       	subi	r25, 0x01	; 1
    11e6:	20 40       	sbci	r18, 0x00	; 0
    11e8:	80 40       	sbci	r24, 0x00	; 0
    11ea:	e1 f7       	brne	.-8      	; 0x11e4 <display_Amp+0x27a>
    11ec:	00 c0       	rjmp	.+0      	; 0x11ee <display_Amp+0x284>
    11ee:	00 00       	nop
					_delay_ms(1000);
					LCD_Display_Location(11,1);
    11f0:	21 e0       	ldi	r18, 0x01	; 1
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	40 e0       	ldi	r20, 0x00	; 0
    11f6:	50 e0       	ldi	r21, 0x00	; 0
    11f8:	6b e0       	ldi	r22, 0x0B	; 11
    11fa:	70 e0       	ldi	r23, 0x00	; 0
    11fc:	80 e0       	ldi	r24, 0x00	; 0
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	0e 94 20 13 	call	0x2640	; 0x2640 <LCD_Display_Location>
					LCD_Display_String((uint8_t*)"*:ext");
    1204:	8d ed       	ldi	r24, 0xDD	; 221
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_Display_String>
					//if the volt value changed
					while(exit_I != '*'){
    120c:	6c c0       	rjmp	.+216    	; 0x12e6 <display_Amp+0x37c>
						if(old_volt!=volt){
    120e:	ce 15       	cp	r28, r14
    1210:	df 05       	cpc	r29, r15
    1212:	59 f1       	breq	.+86     	; 0x126a <display_Amp+0x300>
							LCD_Display_Location(0,1);
    1214:	21 e0       	ldi	r18, 0x01	; 1
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	40 e0       	ldi	r20, 0x00	; 0
    121a:	50 e0       	ldi	r21, 0x00	; 0
    121c:	60 e0       	ldi	r22, 0x00	; 0
    121e:	70 e0       	ldi	r23, 0x00	; 0
    1220:	cb 01       	movw	r24, r22
    1222:	0e 94 20 13 	call	0x2640	; 0x2640 <LCD_Display_Location>
							old_volt=volt;
							LCD_Display_String((uint8_t*)"           ");
    1226:	80 e4       	ldi	r24, 0x40	; 64
    1228:	91 e0       	ldi	r25, 0x01	; 1
    122a:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_Display_String>
							Iin=Read_Amp(volt,0,range,mode);
    122e:	20 2f       	mov	r18, r16
    1230:	4d 2d       	mov	r20, r13
    1232:	60 e0       	ldi	r22, 0x00	; 0
    1234:	70 e0       	ldi	r23, 0x00	; 0
    1236:	ce 01       	movw	r24, r28
    1238:	0e 94 a2 01 	call	0x344	; 0x344 <Read_Amp>
    123c:	2b 01       	movw	r4, r22
    123e:	3c 01       	movw	r6, r24
							LCD_Display_Location(0,1);
    1240:	21 e0       	ldi	r18, 0x01	; 1
    1242:	30 e0       	ldi	r19, 0x00	; 0
    1244:	40 e0       	ldi	r20, 0x00	; 0
    1246:	50 e0       	ldi	r21, 0x00	; 0
    1248:	60 e0       	ldi	r22, 0x00	; 0
    124a:	70 e0       	ldi	r23, 0x00	; 0
    124c:	cb 01       	movw	r24, r22
    124e:	0e 94 20 13 	call	0x2640	; 0x2640 <LCD_Display_Location>
							LCD_Display_FloatNumber(Iin,3);
    1252:	43 e0       	ldi	r20, 0x03	; 3
    1254:	c3 01       	movw	r24, r6
    1256:	b2 01       	movw	r22, r4
    1258:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <LCD_Display_FloatNumber>
    125c:	8f ec       	ldi	r24, 0xCF	; 207
    125e:	97 e0       	ldi	r25, 0x07	; 7
    1260:	01 97       	sbiw	r24, 0x01	; 1
    1262:	f1 f7       	brne	.-4      	; 0x1260 <display_Amp+0x2f6>
    1264:	00 c0       	rjmp	.+0      	; 0x1266 <display_Amp+0x2fc>
    1266:	00 00       	nop
					LCD_Display_String((uint8_t*)"*:ext");
					//if the volt value changed
					while(exit_I != '*'){
						if(old_volt!=volt){
							LCD_Display_Location(0,1);
							old_volt=volt;
    1268:	7e 01       	movw	r14, r28
							Iin=Read_Amp(volt,0,range,mode);
							LCD_Display_Location(0,1);
							LCD_Display_FloatNumber(Iin,3);
							_delay_ms(1);
						}
						if(volt>=810 || volt<=200){ //make sure
    126a:	ce 01       	movw	r24, r28
    126c:	89 5c       	subi	r24, 0xC9	; 201
    126e:	91 09       	sbc	r25, r1
    1270:	81 36       	cpi	r24, 0x61	; 97
    1272:	92 40       	sbci	r25, 0x02	; 2
    1274:	68 f0       	brcs	.+26     	; 0x1290 <display_Amp+0x326>
    1276:	8f ef       	ldi	r24, 0xFF	; 255
    1278:	90 e7       	ldi	r25, 0x70	; 112
    127a:	22 e0       	ldi	r18, 0x02	; 2
    127c:	81 50       	subi	r24, 0x01	; 1
    127e:	90 40       	sbci	r25, 0x00	; 0
    1280:	20 40       	sbci	r18, 0x00	; 0
    1282:	e1 f7       	brne	.-8      	; 0x127c <display_Amp+0x312>
    1284:	00 c0       	rjmp	.+0      	; 0x1286 <display_Amp+0x31c>
    1286:	00 00       	nop
							_delay_ms(100);
							volt=ADC_Read(IDCpin);
    1288:	86 e0       	ldi	r24, 0x06	; 6
    128a:	0e 94 43 15 	call	0x2a86	; 0x2a86 <ADC_Read>
    128e:	ec 01       	movw	r28, r24
						}
						//check if it didn't exceed the max range (positive or negative)
						if(volt>=810|| volt<=200){
    1290:	c9 5c       	subi	r28, 0xC9	; 201
    1292:	d1 09       	sbc	r29, r1
    1294:	c1 36       	cpi	r28, 0x61	; 97
    1296:	d2 40       	sbci	r29, 0x02	; 2
    1298:	f8 f0       	brcs	.+62     	; 0x12d8 <display_Amp+0x36e>
							LCD_ClearScreen();
    129a:	0e 94 8e 10 	call	0x211c	; 0x211c <LCD_ClearScreen>
							LCD_HomeScreen();
    129e:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <LCD_HomeScreen>
							LCD_Display_String((uint8_t*)"error(big I) :(");
    12a2:	84 e2       	ldi	r24, 0x24	; 36
    12a4:	91 e0       	ldi	r25, 0x01	; 1
    12a6:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_Display_String>
							LCD_Display_Location(0,1);
    12aa:	21 e0       	ldi	r18, 0x01	; 1
    12ac:	30 e0       	ldi	r19, 0x00	; 0
    12ae:	40 e0       	ldi	r20, 0x00	; 0
    12b0:	50 e0       	ldi	r21, 0x00	; 0
    12b2:	60 e0       	ldi	r22, 0x00	; 0
    12b4:	70 e0       	ldi	r23, 0x00	; 0
    12b6:	cb 01       	movw	r24, r22
    12b8:	0e 94 20 13 	call	0x2640	; 0x2640 <LCD_Display_Location>
							LCD_Display_String((uint8_t*)"need big range;)");
    12bc:	8d eb       	ldi	r24, 0xBD	; 189
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_Display_String>
    12c4:	9f ef       	ldi	r25, 0xFF	; 255
    12c6:	29 e6       	ldi	r18, 0x69	; 105
    12c8:	88 e1       	ldi	r24, 0x18	; 24
    12ca:	91 50       	subi	r25, 0x01	; 1
    12cc:	20 40       	sbci	r18, 0x00	; 0
    12ce:	80 40       	sbci	r24, 0x00	; 0
    12d0:	e1 f7       	brne	.-8      	; 0x12ca <display_Amp+0x360>
    12d2:	00 c0       	rjmp	.+0      	; 0x12d4 <display_Amp+0x36a>
    12d4:	00 00       	nop
    12d6:	59 c1       	rjmp	.+690    	; 0x158a <display_Amp+0x620>
							_delay_ms(1000);
							return;
						}
						volt=ADC_Read(IDCpin);
    12d8:	86 e0       	ldi	r24, 0x06	; 6
    12da:	0e 94 43 15 	call	0x2a86	; 0x2a86 <ADC_Read>
    12de:	ec 01       	movw	r28, r24
						exit_I=KEYPAD_Read();
    12e0:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <KEYPAD_Read>
    12e4:	18 2f       	mov	r17, r24
					LCD_Display_FloatNumber(Iin,3);
					_delay_ms(1000);
					LCD_Display_Location(11,1);
					LCD_Display_String((uint8_t*)"*:ext");
					//if the volt value changed
					while(exit_I != '*'){
    12e6:	1a 32       	cpi	r17, 0x2A	; 42
    12e8:	09 f0       	breq	.+2      	; 0x12ec <display_Amp+0x382>
    12ea:	91 cf       	rjmp	.-222    	; 0x120e <display_Amp+0x2a4>
    12ec:	4b c1       	rjmp	.+662    	; 0x1584 <display_Amp+0x61a>
				}
				break;
			}
			case '1':{//AC
				uint16_t Itot;
				Itot=ADC_Read(Itotpin);
    12ee:	84 e0       	ldi	r24, 0x04	; 4
    12f0:	0e 94 43 15 	call	0x2a86	; 0x2a86 <ADC_Read>
    12f4:	b8 2e       	mov	r11, r24
    12f6:	c9 2e       	mov	r12, r25
				volt=Itot;
				old_volt=volt;
				Iin=Read_Amp(volt,Itot,range,mode);
    12f8:	20 2f       	mov	r18, r16
    12fa:	4d 2d       	mov	r20, r13
    12fc:	68 2f       	mov	r22, r24
    12fe:	79 2f       	mov	r23, r25
    1300:	0e 94 a2 01 	call	0x344	; 0x344 <Read_Amp>
    1304:	2b 01       	movw	r4, r22
    1306:	3c 01       	movw	r6, r24
				if(range=='4'){ //A
    1308:	94 e3       	ldi	r25, 0x34	; 52
    130a:	d9 12       	cpse	r13, r25
    130c:	9e c0       	rjmp	.+316    	; 0x144a <display_Amp+0x4e0>
					LCD_Display_String((uint8_t*)"Current (A)");
    130e:	84 e3       	ldi	r24, 0x34	; 52
    1310:	91 e0       	ldi	r25, 0x01	; 1
    1312:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_Display_String>
					LCD_Display_Location(0,1);
    1316:	21 e0       	ldi	r18, 0x01	; 1
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	40 e0       	ldi	r20, 0x00	; 0
    131c:	50 e0       	ldi	r21, 0x00	; 0
    131e:	60 e0       	ldi	r22, 0x00	; 0
    1320:	70 e0       	ldi	r23, 0x00	; 0
    1322:	cb 01       	movw	r24, r22
    1324:	0e 94 20 13 	call	0x2640	; 0x2640 <LCD_Display_Location>
					LCD_Display_FloatNumber(Iin,3);
    1328:	43 e0       	ldi	r20, 0x03	; 3
    132a:	c3 01       	movw	r24, r6
    132c:	b2 01       	movw	r22, r4
    132e:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <LCD_Display_FloatNumber>
    1332:	2f ef       	ldi	r18, 0xFF	; 255
    1334:	89 e6       	ldi	r24, 0x69	; 105
    1336:	98 e1       	ldi	r25, 0x18	; 24
    1338:	21 50       	subi	r18, 0x01	; 1
    133a:	80 40       	sbci	r24, 0x00	; 0
    133c:	90 40       	sbci	r25, 0x00	; 0
    133e:	e1 f7       	brne	.-8      	; 0x1338 <display_Amp+0x3ce>
    1340:	00 c0       	rjmp	.+0      	; 0x1342 <display_Amp+0x3d8>
    1342:	00 00       	nop
					_delay_ms(1000);
					LCD_Display_Location(11,1);
    1344:	21 e0       	ldi	r18, 0x01	; 1
    1346:	30 e0       	ldi	r19, 0x00	; 0
    1348:	40 e0       	ldi	r20, 0x00	; 0
    134a:	50 e0       	ldi	r21, 0x00	; 0
    134c:	6b e0       	ldi	r22, 0x0B	; 11
    134e:	70 e0       	ldi	r23, 0x00	; 0
    1350:	80 e0       	ldi	r24, 0x00	; 0
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	0e 94 20 13 	call	0x2640	; 0x2640 <LCD_Display_Location>
					LCD_Display_String((uint8_t*)"*:ext");
    1358:	8d ed       	ldi	r24, 0xDD	; 221
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_Display_String>
			}
			case '1':{//AC
				uint16_t Itot;
				Itot=ADC_Read(Itotpin);
				volt=Itot;
				old_volt=volt;
    1360:	eb 2c       	mov	r14, r11
    1362:	fc 2c       	mov	r15, r12
				break;
			}
			case '1':{//AC
				uint16_t Itot;
				Itot=ADC_Read(Itotpin);
				volt=Itot;
    1364:	cb 2d       	mov	r28, r11
    1366:	dc 2d       	mov	r29, r12
					LCD_Display_FloatNumber(Iin,3);
					_delay_ms(1000);
					LCD_Display_Location(11,1);
					LCD_Display_String((uint8_t*)"*:ext");
					//if the volt value changed
					while(exit_I != '*'){
    1368:	6c c0       	rjmp	.+216    	; 0x1442 <display_Amp+0x4d8>
						if(old_volt!=volt){
    136a:	ce 15       	cp	r28, r14
    136c:	df 05       	cpc	r29, r15
    136e:	59 f1       	breq	.+86     	; 0x13c6 <display_Amp+0x45c>
							LCD_Display_Location(0,1);
    1370:	21 e0       	ldi	r18, 0x01	; 1
    1372:	30 e0       	ldi	r19, 0x00	; 0
    1374:	40 e0       	ldi	r20, 0x00	; 0
    1376:	50 e0       	ldi	r21, 0x00	; 0
    1378:	60 e0       	ldi	r22, 0x00	; 0
    137a:	70 e0       	ldi	r23, 0x00	; 0
    137c:	cb 01       	movw	r24, r22
    137e:	0e 94 20 13 	call	0x2640	; 0x2640 <LCD_Display_Location>
							old_volt=volt;
							LCD_Display_String((uint8_t*)"           ");
    1382:	80 e4       	ldi	r24, 0x40	; 64
    1384:	91 e0       	ldi	r25, 0x01	; 1
    1386:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_Display_String>
							Iin=Read_Amp(volt,Itot,range,mode);
    138a:	20 2f       	mov	r18, r16
    138c:	4d 2d       	mov	r20, r13
    138e:	6b 2d       	mov	r22, r11
    1390:	7c 2d       	mov	r23, r12
    1392:	ce 01       	movw	r24, r28
    1394:	0e 94 a2 01 	call	0x344	; 0x344 <Read_Amp>
    1398:	2b 01       	movw	r4, r22
    139a:	3c 01       	movw	r6, r24
							LCD_Display_Location(0,1);
    139c:	21 e0       	ldi	r18, 0x01	; 1
    139e:	30 e0       	ldi	r19, 0x00	; 0
    13a0:	40 e0       	ldi	r20, 0x00	; 0
    13a2:	50 e0       	ldi	r21, 0x00	; 0
    13a4:	60 e0       	ldi	r22, 0x00	; 0
    13a6:	70 e0       	ldi	r23, 0x00	; 0
    13a8:	cb 01       	movw	r24, r22
    13aa:	0e 94 20 13 	call	0x2640	; 0x2640 <LCD_Display_Location>
							LCD_Display_FloatNumber(Iin,3);
    13ae:	43 e0       	ldi	r20, 0x03	; 3
    13b0:	c3 01       	movw	r24, r6
    13b2:	b2 01       	movw	r22, r4
    13b4:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <LCD_Display_FloatNumber>
    13b8:	8f ec       	ldi	r24, 0xCF	; 207
    13ba:	97 e0       	ldi	r25, 0x07	; 7
    13bc:	01 97       	sbiw	r24, 0x01	; 1
    13be:	f1 f7       	brne	.-4      	; 0x13bc <display_Amp+0x452>
    13c0:	00 c0       	rjmp	.+0      	; 0x13c2 <display_Amp+0x458>
    13c2:	00 00       	nop
					LCD_Display_String((uint8_t*)"*:ext");
					//if the volt value changed
					while(exit_I != '*'){
						if(old_volt!=volt){
							LCD_Display_Location(0,1);
							old_volt=volt;
    13c4:	7e 01       	movw	r14, r28
							LCD_Display_Location(0,1);
							LCD_Display_FloatNumber(Iin,3);
							_delay_ms(1);
						}
						
						if(volt>=810 || volt<=200){ //make sure
    13c6:	ce 01       	movw	r24, r28
    13c8:	89 5c       	subi	r24, 0xC9	; 201
    13ca:	91 09       	sbc	r25, r1
    13cc:	81 36       	cpi	r24, 0x61	; 97
    13ce:	92 40       	sbci	r25, 0x02	; 2
    13d0:	68 f0       	brcs	.+26     	; 0x13ec <display_Amp+0x482>
    13d2:	8f ef       	ldi	r24, 0xFF	; 255
    13d4:	90 e7       	ldi	r25, 0x70	; 112
    13d6:	22 e0       	ldi	r18, 0x02	; 2
    13d8:	81 50       	subi	r24, 0x01	; 1
    13da:	90 40       	sbci	r25, 0x00	; 0
    13dc:	20 40       	sbci	r18, 0x00	; 0
    13de:	e1 f7       	brne	.-8      	; 0x13d8 <display_Amp+0x46e>
    13e0:	00 c0       	rjmp	.+0      	; 0x13e2 <display_Amp+0x478>
    13e2:	00 00       	nop
							_delay_ms(100);
							volt=ADC_Read(Itotpin);
    13e4:	84 e0       	ldi	r24, 0x04	; 4
    13e6:	0e 94 43 15 	call	0x2a86	; 0x2a86 <ADC_Read>
    13ea:	ec 01       	movw	r28, r24
						}
						//check if it didn't exceed the max range (positive or negative)
						if(volt>=810 || volt<=200){
    13ec:	c9 5c       	subi	r28, 0xC9	; 201
    13ee:	d1 09       	sbc	r29, r1
    13f0:	c1 36       	cpi	r28, 0x61	; 97
    13f2:	d2 40       	sbci	r29, 0x02	; 2
    13f4:	f8 f0       	brcs	.+62     	; 0x1434 <display_Amp+0x4ca>
							LCD_ClearScreen();
    13f6:	0e 94 8e 10 	call	0x211c	; 0x211c <LCD_ClearScreen>
							LCD_HomeScreen();
    13fa:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <LCD_HomeScreen>
							LCD_Display_String((uint8_t*)"error(big I) :(");
    13fe:	84 e2       	ldi	r24, 0x24	; 36
    1400:	91 e0       	ldi	r25, 0x01	; 1
    1402:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_Display_String>
							LCD_Display_Location(0,1);
    1406:	21 e0       	ldi	r18, 0x01	; 1
    1408:	30 e0       	ldi	r19, 0x00	; 0
    140a:	40 e0       	ldi	r20, 0x00	; 0
    140c:	50 e0       	ldi	r21, 0x00	; 0
    140e:	60 e0       	ldi	r22, 0x00	; 0
    1410:	70 e0       	ldi	r23, 0x00	; 0
    1412:	cb 01       	movw	r24, r22
    1414:	0e 94 20 13 	call	0x2640	; 0x2640 <LCD_Display_Location>
							LCD_Display_String((uint8_t*)"need big range;)");
    1418:	8d eb       	ldi	r24, 0xBD	; 189
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_Display_String>
    1420:	9f ef       	ldi	r25, 0xFF	; 255
    1422:	29 e6       	ldi	r18, 0x69	; 105
    1424:	88 e1       	ldi	r24, 0x18	; 24
    1426:	91 50       	subi	r25, 0x01	; 1
    1428:	20 40       	sbci	r18, 0x00	; 0
    142a:	80 40       	sbci	r24, 0x00	; 0
    142c:	e1 f7       	brne	.-8      	; 0x1426 <display_Amp+0x4bc>
    142e:	00 c0       	rjmp	.+0      	; 0x1430 <display_Amp+0x4c6>
    1430:	00 00       	nop
    1432:	ab c0       	rjmp	.+342    	; 0x158a <display_Amp+0x620>
							_delay_ms(1000);
							return;
						}
						volt=ADC_Read(Itotpin);
    1434:	84 e0       	ldi	r24, 0x04	; 4
    1436:	0e 94 43 15 	call	0x2a86	; 0x2a86 <ADC_Read>
    143a:	ec 01       	movw	r28, r24
						exit_I=KEYPAD_Read();
    143c:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <KEYPAD_Read>
    1440:	18 2f       	mov	r17, r24
					LCD_Display_FloatNumber(Iin,3);
					_delay_ms(1000);
					LCD_Display_Location(11,1);
					LCD_Display_String((uint8_t*)"*:ext");
					//if the volt value changed
					while(exit_I != '*'){
    1442:	1a 32       	cpi	r17, 0x2A	; 42
    1444:	09 f0       	breq	.+2      	; 0x1448 <display_Amp+0x4de>
    1446:	91 cf       	rjmp	.-222    	; 0x136a <display_Amp+0x400>
    1448:	9d c0       	rjmp	.+314    	; 0x1584 <display_Amp+0x61a>
						volt=ADC_Read(Itotpin);
						exit_I=KEYPAD_Read();
					}
				}
				else{//mA
					LCD_Display_String((uint8_t*)"Current (mA)");
    144a:	8c e4       	ldi	r24, 0x4C	; 76
    144c:	91 e0       	ldi	r25, 0x01	; 1
    144e:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_Display_String>
					LCD_Display_Location(0,1);
    1452:	21 e0       	ldi	r18, 0x01	; 1
    1454:	30 e0       	ldi	r19, 0x00	; 0
    1456:	40 e0       	ldi	r20, 0x00	; 0
    1458:	50 e0       	ldi	r21, 0x00	; 0
    145a:	60 e0       	ldi	r22, 0x00	; 0
    145c:	70 e0       	ldi	r23, 0x00	; 0
    145e:	cb 01       	movw	r24, r22
    1460:	0e 94 20 13 	call	0x2640	; 0x2640 <LCD_Display_Location>
					LCD_Display_FloatNumber(Iin,3);
    1464:	43 e0       	ldi	r20, 0x03	; 3
    1466:	c3 01       	movw	r24, r6
    1468:	b2 01       	movw	r22, r4
    146a:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <LCD_Display_FloatNumber>
    146e:	9f ef       	ldi	r25, 0xFF	; 255
    1470:	29 e6       	ldi	r18, 0x69	; 105
    1472:	88 e1       	ldi	r24, 0x18	; 24
    1474:	91 50       	subi	r25, 0x01	; 1
    1476:	20 40       	sbci	r18, 0x00	; 0
    1478:	80 40       	sbci	r24, 0x00	; 0
    147a:	e1 f7       	brne	.-8      	; 0x1474 <display_Amp+0x50a>
    147c:	00 c0       	rjmp	.+0      	; 0x147e <display_Amp+0x514>
    147e:	00 00       	nop
					_delay_ms(1000);
					LCD_Display_Location(11,1);
    1480:	21 e0       	ldi	r18, 0x01	; 1
    1482:	30 e0       	ldi	r19, 0x00	; 0
    1484:	40 e0       	ldi	r20, 0x00	; 0
    1486:	50 e0       	ldi	r21, 0x00	; 0
    1488:	6b e0       	ldi	r22, 0x0B	; 11
    148a:	70 e0       	ldi	r23, 0x00	; 0
    148c:	80 e0       	ldi	r24, 0x00	; 0
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	0e 94 20 13 	call	0x2640	; 0x2640 <LCD_Display_Location>
					LCD_Display_String((uint8_t*)"*:ext");
    1494:	8d ed       	ldi	r24, 0xDD	; 221
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_Display_String>
			}
			case '1':{//AC
				uint16_t Itot;
				Itot=ADC_Read(Itotpin);
				volt=Itot;
				old_volt=volt;
    149c:	eb 2c       	mov	r14, r11
    149e:	fc 2c       	mov	r15, r12
				break;
			}
			case '1':{//AC
				uint16_t Itot;
				Itot=ADC_Read(Itotpin);
				volt=Itot;
    14a0:	cb 2d       	mov	r28, r11
    14a2:	dc 2d       	mov	r29, r12
					LCD_Display_FloatNumber(Iin,3);
					_delay_ms(1000);
					LCD_Display_Location(11,1);
					LCD_Display_String((uint8_t*)"*:ext");
					//if the volt value changed
					while(exit_I != '*'){
    14a4:	6c c0       	rjmp	.+216    	; 0x157e <display_Amp+0x614>
						if(old_volt!=volt){
    14a6:	ce 15       	cp	r28, r14
    14a8:	df 05       	cpc	r29, r15
    14aa:	59 f1       	breq	.+86     	; 0x1502 <display_Amp+0x598>
							LCD_Display_Location(0,1);
    14ac:	21 e0       	ldi	r18, 0x01	; 1
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	40 e0       	ldi	r20, 0x00	; 0
    14b2:	50 e0       	ldi	r21, 0x00	; 0
    14b4:	60 e0       	ldi	r22, 0x00	; 0
    14b6:	70 e0       	ldi	r23, 0x00	; 0
    14b8:	cb 01       	movw	r24, r22
    14ba:	0e 94 20 13 	call	0x2640	; 0x2640 <LCD_Display_Location>
							old_volt=volt;
							LCD_Display_String((uint8_t*)"           ");
    14be:	80 e4       	ldi	r24, 0x40	; 64
    14c0:	91 e0       	ldi	r25, 0x01	; 1
    14c2:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_Display_String>
							Iin=Read_Amp(volt,Itot,range,mode);
    14c6:	20 2f       	mov	r18, r16
    14c8:	4d 2d       	mov	r20, r13
    14ca:	6b 2d       	mov	r22, r11
    14cc:	7c 2d       	mov	r23, r12
    14ce:	ce 01       	movw	r24, r28
    14d0:	0e 94 a2 01 	call	0x344	; 0x344 <Read_Amp>
    14d4:	2b 01       	movw	r4, r22
    14d6:	3c 01       	movw	r6, r24
							LCD_Display_Location(0,1);
    14d8:	21 e0       	ldi	r18, 0x01	; 1
    14da:	30 e0       	ldi	r19, 0x00	; 0
    14dc:	40 e0       	ldi	r20, 0x00	; 0
    14de:	50 e0       	ldi	r21, 0x00	; 0
    14e0:	60 e0       	ldi	r22, 0x00	; 0
    14e2:	70 e0       	ldi	r23, 0x00	; 0
    14e4:	cb 01       	movw	r24, r22
    14e6:	0e 94 20 13 	call	0x2640	; 0x2640 <LCD_Display_Location>
							LCD_Display_FloatNumber(Iin,3);
    14ea:	43 e0       	ldi	r20, 0x03	; 3
    14ec:	c3 01       	movw	r24, r6
    14ee:	b2 01       	movw	r22, r4
    14f0:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <LCD_Display_FloatNumber>
    14f4:	8f ec       	ldi	r24, 0xCF	; 207
    14f6:	97 e0       	ldi	r25, 0x07	; 7
    14f8:	01 97       	sbiw	r24, 0x01	; 1
    14fa:	f1 f7       	brne	.-4      	; 0x14f8 <display_Amp+0x58e>
    14fc:	00 c0       	rjmp	.+0      	; 0x14fe <display_Amp+0x594>
    14fe:	00 00       	nop
					LCD_Display_String((uint8_t*)"*:ext");
					//if the volt value changed
					while(exit_I != '*'){
						if(old_volt!=volt){
							LCD_Display_Location(0,1);
							old_volt=volt;
    1500:	7e 01       	movw	r14, r28
							Iin=Read_Amp(volt,Itot,range,mode);
							LCD_Display_Location(0,1);
							LCD_Display_FloatNumber(Iin,3);
							_delay_ms(1);
						}
						if(volt>=810 || volt<=200){ //make sure
    1502:	ce 01       	movw	r24, r28
    1504:	89 5c       	subi	r24, 0xC9	; 201
    1506:	91 09       	sbc	r25, r1
    1508:	81 36       	cpi	r24, 0x61	; 97
    150a:	92 40       	sbci	r25, 0x02	; 2
    150c:	68 f0       	brcs	.+26     	; 0x1528 <display_Amp+0x5be>
    150e:	8f ef       	ldi	r24, 0xFF	; 255
    1510:	90 e7       	ldi	r25, 0x70	; 112
    1512:	22 e0       	ldi	r18, 0x02	; 2
    1514:	81 50       	subi	r24, 0x01	; 1
    1516:	90 40       	sbci	r25, 0x00	; 0
    1518:	20 40       	sbci	r18, 0x00	; 0
    151a:	e1 f7       	brne	.-8      	; 0x1514 <display_Amp+0x5aa>
    151c:	00 c0       	rjmp	.+0      	; 0x151e <display_Amp+0x5b4>
    151e:	00 00       	nop
							_delay_ms(100);
							volt=ADC_Read(Itotpin);
    1520:	84 e0       	ldi	r24, 0x04	; 4
    1522:	0e 94 43 15 	call	0x2a86	; 0x2a86 <ADC_Read>
    1526:	ec 01       	movw	r28, r24
						}
						//check if it didn't exceed the max range (positive or negative)
						if(volt>=810|| volt<=200){
    1528:	c9 5c       	subi	r28, 0xC9	; 201
    152a:	d1 09       	sbc	r29, r1
    152c:	c1 36       	cpi	r28, 0x61	; 97
    152e:	d2 40       	sbci	r29, 0x02	; 2
    1530:	f8 f0       	brcs	.+62     	; 0x1570 <display_Amp+0x606>
							LCD_ClearScreen();
    1532:	0e 94 8e 10 	call	0x211c	; 0x211c <LCD_ClearScreen>
							LCD_HomeScreen();
    1536:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <LCD_HomeScreen>
							LCD_Display_String((uint8_t*)"error(big I) :(");
    153a:	84 e2       	ldi	r24, 0x24	; 36
    153c:	91 e0       	ldi	r25, 0x01	; 1
    153e:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_Display_String>
							LCD_Display_Location(0,1);
    1542:	21 e0       	ldi	r18, 0x01	; 1
    1544:	30 e0       	ldi	r19, 0x00	; 0
    1546:	40 e0       	ldi	r20, 0x00	; 0
    1548:	50 e0       	ldi	r21, 0x00	; 0
    154a:	60 e0       	ldi	r22, 0x00	; 0
    154c:	70 e0       	ldi	r23, 0x00	; 0
    154e:	cb 01       	movw	r24, r22
    1550:	0e 94 20 13 	call	0x2640	; 0x2640 <LCD_Display_Location>
							LCD_Display_String((uint8_t*)"need big range;)");
    1554:	8d eb       	ldi	r24, 0xBD	; 189
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_Display_String>
    155c:	9f ef       	ldi	r25, 0xFF	; 255
    155e:	29 e6       	ldi	r18, 0x69	; 105
    1560:	88 e1       	ldi	r24, 0x18	; 24
    1562:	91 50       	subi	r25, 0x01	; 1
    1564:	20 40       	sbci	r18, 0x00	; 0
    1566:	80 40       	sbci	r24, 0x00	; 0
    1568:	e1 f7       	brne	.-8      	; 0x1562 <display_Amp+0x5f8>
    156a:	00 c0       	rjmp	.+0      	; 0x156c <display_Amp+0x602>
    156c:	00 00       	nop
    156e:	0d c0       	rjmp	.+26     	; 0x158a <display_Amp+0x620>
							_delay_ms(1000);
							return;
						}
						volt=ADC_Read(Itotpin);
    1570:	84 e0       	ldi	r24, 0x04	; 4
    1572:	0e 94 43 15 	call	0x2a86	; 0x2a86 <ADC_Read>
    1576:	ec 01       	movw	r28, r24
						exit_I=KEYPAD_Read();
    1578:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <KEYPAD_Read>
    157c:	18 2f       	mov	r17, r24
					LCD_Display_FloatNumber(Iin,3);
					_delay_ms(1000);
					LCD_Display_Location(11,1);
					LCD_Display_String((uint8_t*)"*:ext");
					//if the volt value changed
					while(exit_I != '*'){
    157e:	1a 32       	cpi	r17, 0x2A	; 42
    1580:	09 f0       	breq	.+2      	; 0x1584 <display_Amp+0x61a>
    1582:	91 cf       	rjmp	.-222    	; 0x14a6 <display_Amp+0x53c>
	
	uint16_t old_volt;
	old_volt=volt;
	fint32_t Iin;
	count=0;
	while(exit_I != '*'){
    1584:	1a 32       	cpi	r17, 0x2A	; 42
    1586:	09 f0       	breq	.+2      	; 0x158a <display_Amp+0x620>
    1588:	5f cd       	rjmp	.-1346   	; 0x1048 <display_Amp+0xde>
				}
				break;
			}
		}
	}
}
    158a:	df 91       	pop	r29
    158c:	cf 91       	pop	r28
    158e:	1f 91       	pop	r17
    1590:	0f 91       	pop	r16
    1592:	ff 90       	pop	r15
    1594:	ef 90       	pop	r14
    1596:	df 90       	pop	r13
    1598:	cf 90       	pop	r12
    159a:	bf 90       	pop	r11
    159c:	7f 90       	pop	r7
    159e:	6f 90       	pop	r6
    15a0:	5f 90       	pop	r5
    15a2:	4f 90       	pop	r4
    15a4:	08 95       	ret

000015a6 <display_volt>:

void display_volt(uint8_t range,uint16_t Vtot,uint16_t volt,uint8_t mode){
    15a6:	4f 92       	push	r4
    15a8:	5f 92       	push	r5
    15aa:	6f 92       	push	r6
    15ac:	7f 92       	push	r7
    15ae:	8f 92       	push	r8
    15b0:	9f 92       	push	r9
    15b2:	af 92       	push	r10
    15b4:	bf 92       	push	r11
    15b6:	df 92       	push	r13
    15b8:	ef 92       	push	r14
    15ba:	ff 92       	push	r15
    15bc:	0f 93       	push	r16
    15be:	1f 93       	push	r17
    15c0:	cf 93       	push	r28
    15c2:	df 93       	push	r29
    15c4:	d8 2e       	mov	r13, r24
    15c6:	5b 01       	movw	r10, r22
    15c8:	ea 01       	movw	r28, r20
    15ca:	02 2f       	mov	r16, r18
	
	// range 1:300m 2:3V 3:30V 4:400V 
	if (range >'5' || range <'1'){
    15cc:	8f ec       	ldi	r24, 0xCF	; 207
    15ce:	8d 0d       	add	r24, r13
    15d0:	85 30       	cpi	r24, 0x05	; 5
    15d2:	48 f0       	brcs	.+18     	; 0x15e6 <display_volt+0x40>
		LCD_ClearScreen();
    15d4:	0e 94 8e 10 	call	0x211c	; 0x211c <LCD_ClearScreen>
		LCD_HomeScreen();
    15d8:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <LCD_HomeScreen>
		LCD_Display_String((uint8_t*)"Wrong Range :(");
    15dc:	87 e8       	ldi	r24, 0x87	; 135
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_Display_String>
		return;
    15e4:	ec c2       	rjmp	.+1496   	; 0x1bbe <display_volt+0x618>
	}
	
	//check if it didn't exceed the max range
	if(volt>=1003){
    15e6:	4b 3e       	cpi	r20, 0xEB	; 235
    15e8:	53 40       	sbci	r21, 0x03	; 3
    15ea:	f8 f0       	brcs	.+62     	; 0x162a <display_volt+0x84>
		LCD_ClearScreen();
    15ec:	0e 94 8e 10 	call	0x211c	; 0x211c <LCD_ClearScreen>
		LCD_HomeScreen();
    15f0:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <LCD_HomeScreen>
		LCD_Display_String((uint8_t*)"error(big V) :(");
    15f4:	89 e5       	ldi	r24, 0x59	; 89
    15f6:	91 e0       	ldi	r25, 0x01	; 1
    15f8:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_Display_String>
		LCD_Display_Location(0,1);
    15fc:	21 e0       	ldi	r18, 0x01	; 1
    15fe:	30 e0       	ldi	r19, 0x00	; 0
    1600:	40 e0       	ldi	r20, 0x00	; 0
    1602:	50 e0       	ldi	r21, 0x00	; 0
    1604:	60 e0       	ldi	r22, 0x00	; 0
    1606:	70 e0       	ldi	r23, 0x00	; 0
    1608:	cb 01       	movw	r24, r22
    160a:	0e 94 20 13 	call	0x2640	; 0x2640 <LCD_Display_Location>
		LCD_Display_String((uint8_t*)"need big range;)");
    160e:	8d eb       	ldi	r24, 0xBD	; 189
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_Display_String>
    1616:	8f ef       	ldi	r24, 0xFF	; 255
    1618:	99 e6       	ldi	r25, 0x69	; 105
    161a:	28 e1       	ldi	r18, 0x18	; 24
    161c:	81 50       	subi	r24, 0x01	; 1
    161e:	90 40       	sbci	r25, 0x00	; 0
    1620:	20 40       	sbci	r18, 0x00	; 0
    1622:	e1 f7       	brne	.-8      	; 0x161c <display_volt+0x76>
    1624:	00 c0       	rjmp	.+0      	; 0x1626 <display_volt+0x80>
    1626:	00 00       	nop
    1628:	ca c2       	rjmp	.+1428   	; 0x1bbe <display_volt+0x618>
	exit_V=0;
	uint16_t count;
	count=0;
	
	//if you want to return
	LCD_ClearScreen();
    162a:	0e 94 8e 10 	call	0x211c	; 0x211c <LCD_ClearScreen>
	LCD_HomeScreen();
    162e:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <LCD_HomeScreen>
	LCD_Display_String((uint8_t*)"To Return press:");
    1632:	86 e9       	ldi	r24, 0x96	; 150
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_Display_String>
	LCD_Display_Location(0,1);
    163a:	21 e0       	ldi	r18, 0x01	; 1
    163c:	30 e0       	ldi	r19, 0x00	; 0
    163e:	40 e0       	ldi	r20, 0x00	; 0
    1640:	50 e0       	ldi	r21, 0x00	; 0
    1642:	60 e0       	ldi	r22, 0x00	; 0
    1644:	70 e0       	ldi	r23, 0x00	; 0
    1646:	cb 01       	movw	r24, r22
    1648:	0e 94 20 13 	call	0x2640	; 0x2640 <LCD_Display_Location>
	LCD_Display_String((uint8_t*)"*  ;)");
    164c:	87 ea       	ldi	r24, 0xA7	; 167
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_Display_String>
	}
	
	uint8_t exit_V;
	exit_V=0;
	uint16_t count;
	count=0;
    1654:	e1 2c       	mov	r14, r1
    1656:	f1 2c       	mov	r15, r1
		_delay_ms(1000);
		return;
	}
	
	uint8_t exit_V;
	exit_V=0;
    1658:	10 e0       	ldi	r17, 0x00	; 0
	LCD_Display_String((uint8_t*)"To Return press:");
	LCD_Display_Location(0,1);
	LCD_Display_String((uint8_t*)"*  ;)");
	
	//check of yo want to return
	while(exit_V!='*'){
    165a:	10 c0       	rjmp	.+32     	; 0x167c <display_volt+0xd6>
		exit_V =KEYPAD_Read();
    165c:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <KEYPAD_Read>
    1660:	18 2f       	mov	r17, r24
    1662:	8f e0       	ldi	r24, 0x0F	; 15
    1664:	97 e2       	ldi	r25, 0x27	; 39
    1666:	01 97       	sbiw	r24, 0x01	; 1
    1668:	f1 f7       	brne	.-4      	; 0x1666 <display_volt+0xc0>
    166a:	00 c0       	rjmp	.+0      	; 0x166c <display_volt+0xc6>
    166c:	00 00       	nop
		_delay_ms(5);
		count++;
    166e:	9f ef       	ldi	r25, 0xFF	; 255
    1670:	e9 1a       	sub	r14, r25
    1672:	f9 0a       	sbc	r15, r25
		if(count>=200){
    1674:	28 ec       	ldi	r18, 0xC8	; 200
    1676:	e2 16       	cp	r14, r18
    1678:	f1 04       	cpc	r15, r1
    167a:	10 f4       	brcc	.+4      	; 0x1680 <display_volt+0xda>
	LCD_Display_String((uint8_t*)"To Return press:");
	LCD_Display_Location(0,1);
	LCD_Display_String((uint8_t*)"*  ;)");
	
	//check of yo want to return
	while(exit_V!='*'){
    167c:	1a 32       	cpi	r17, 0x2A	; 42
    167e:	71 f7       	brne	.-36     	; 0x165c <display_volt+0xb6>
		if(count>=200){
			count=0;
			break;
		}
	}
	if(exit_V=='*'){
    1680:	1a 32       	cpi	r17, 0x2A	; 42
    1682:	09 f4       	brne	.+2      	; 0x1686 <display_volt+0xe0>
    1684:	9c c2       	rjmp	.+1336   	; 0x1bbe <display_volt+0x618>
    1686:	7e 01       	movw	r14, r28
    1688:	97 c2       	rjmp	.+1326   	; 0x1bb8 <display_volt+0x612>
	uint16_t old_volt;
	old_volt=volt;
	fint32_t vin;
	count=0;
	while(exit_V != '*'){
		LCD_ClearScreen();
    168a:	0e 94 8e 10 	call	0x211c	; 0x211c <LCD_ClearScreen>
		LCD_HomeScreen();
    168e:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <LCD_HomeScreen>
		switch(mode){
    1692:	01 33       	cpi	r16, 0x31	; 49
    1694:	09 f4       	brne	.+2      	; 0x1698 <display_volt+0xf2>
    1696:	54 c1       	rjmp	.+680    	; 0x1940 <display_volt+0x39a>
    1698:	02 33       	cpi	r16, 0x32	; 50
    169a:	09 f0       	breq	.+2      	; 0x169e <display_volt+0xf8>
    169c:	8d c2       	rjmp	.+1306   	; 0x1bb8 <display_volt+0x612>
			case '2':{//DC
				if(range=='1'){ //mV
    169e:	81 e3       	ldi	r24, 0x31	; 49
    16a0:	d8 12       	cpse	r13, r24
    16a2:	ad c0       	rjmp	.+346    	; 0x17fe <display_volt+0x258>
					vin=1000.0*Read_Volt(volt,Vtot,range,mode);
    16a4:	20 2f       	mov	r18, r16
    16a6:	4d 2d       	mov	r20, r13
    16a8:	b5 01       	movw	r22, r10
    16aa:	ce 01       	movw	r24, r28
    16ac:	0e 94 92 00 	call	0x124	; 0x124 <Read_Volt>
    16b0:	20 e0       	ldi	r18, 0x00	; 0
    16b2:	30 e0       	ldi	r19, 0x00	; 0
    16b4:	4a e7       	ldi	r20, 0x7A	; 122
    16b6:	54 e4       	ldi	r21, 0x44	; 68
    16b8:	0e 94 d7 18 	call	0x31ae	; 0x31ae <__mulsf3>
    16bc:	2b 01       	movw	r4, r22
    16be:	3c 01       	movw	r6, r24
					LCD_Display_String((uint8_t*)"Volt (mV)");
    16c0:	89 e6       	ldi	r24, 0x69	; 105
    16c2:	91 e0       	ldi	r25, 0x01	; 1
    16c4:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_Display_String>
					LCD_Display_Location(0,1);
    16c8:	21 e0       	ldi	r18, 0x01	; 1
    16ca:	30 e0       	ldi	r19, 0x00	; 0
    16cc:	40 e0       	ldi	r20, 0x00	; 0
    16ce:	50 e0       	ldi	r21, 0x00	; 0
    16d0:	60 e0       	ldi	r22, 0x00	; 0
    16d2:	70 e0       	ldi	r23, 0x00	; 0
    16d4:	cb 01       	movw	r24, r22
    16d6:	0e 94 20 13 	call	0x2640	; 0x2640 <LCD_Display_Location>
					LCD_Display_FloatNumber(vin,3);
    16da:	43 e0       	ldi	r20, 0x03	; 3
    16dc:	c3 01       	movw	r24, r6
    16de:	b2 01       	movw	r22, r4
    16e0:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <LCD_Display_FloatNumber>
    16e4:	9f ef       	ldi	r25, 0xFF	; 255
    16e6:	29 e6       	ldi	r18, 0x69	; 105
    16e8:	88 e1       	ldi	r24, 0x18	; 24
    16ea:	91 50       	subi	r25, 0x01	; 1
    16ec:	20 40       	sbci	r18, 0x00	; 0
    16ee:	80 40       	sbci	r24, 0x00	; 0
    16f0:	e1 f7       	brne	.-8      	; 0x16ea <display_volt+0x144>
    16f2:	00 c0       	rjmp	.+0      	; 0x16f4 <display_volt+0x14e>
    16f4:	00 00       	nop
					_delay_ms(1000);
					LCD_Display_Location(11,1);
    16f6:	21 e0       	ldi	r18, 0x01	; 1
    16f8:	30 e0       	ldi	r19, 0x00	; 0
    16fa:	40 e0       	ldi	r20, 0x00	; 0
    16fc:	50 e0       	ldi	r21, 0x00	; 0
    16fe:	6b e0       	ldi	r22, 0x0B	; 11
    1700:	70 e0       	ldi	r23, 0x00	; 0
    1702:	80 e0       	ldi	r24, 0x00	; 0
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	0e 94 20 13 	call	0x2640	; 0x2640 <LCD_Display_Location>
					LCD_Display_String((uint8_t*)"*:ext");
    170a:	8d ed       	ldi	r24, 0xDD	; 221
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_Display_String>
					//if the volt value changed
					while(exit_V != '*'){
    1712:	71 c0       	rjmp	.+226    	; 0x17f6 <display_volt+0x250>
						if(old_volt!=volt){
    1714:	ce 15       	cp	r28, r14
    1716:	df 05       	cpc	r29, r15
    1718:	81 f1       	breq	.+96     	; 0x177a <display_volt+0x1d4>
							LCD_Display_Location(0,1);
    171a:	21 e0       	ldi	r18, 0x01	; 1
    171c:	30 e0       	ldi	r19, 0x00	; 0
    171e:	40 e0       	ldi	r20, 0x00	; 0
    1720:	50 e0       	ldi	r21, 0x00	; 0
    1722:	60 e0       	ldi	r22, 0x00	; 0
    1724:	70 e0       	ldi	r23, 0x00	; 0
    1726:	cb 01       	movw	r24, r22
    1728:	0e 94 20 13 	call	0x2640	; 0x2640 <LCD_Display_Location>
							old_volt=volt;
							LCD_Display_String((uint8_t*)"           ");
    172c:	80 e4       	ldi	r24, 0x40	; 64
    172e:	91 e0       	ldi	r25, 0x01	; 1
    1730:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_Display_String>
							vin=1000.0*Read_Volt(volt,Vtot,range,mode);
    1734:	20 2f       	mov	r18, r16
    1736:	4d 2d       	mov	r20, r13
    1738:	b5 01       	movw	r22, r10
    173a:	ce 01       	movw	r24, r28
    173c:	0e 94 92 00 	call	0x124	; 0x124 <Read_Volt>
    1740:	20 e0       	ldi	r18, 0x00	; 0
    1742:	30 e0       	ldi	r19, 0x00	; 0
    1744:	4a e7       	ldi	r20, 0x7A	; 122
    1746:	54 e4       	ldi	r21, 0x44	; 68
    1748:	0e 94 d7 18 	call	0x31ae	; 0x31ae <__mulsf3>
    174c:	2b 01       	movw	r4, r22
    174e:	3c 01       	movw	r6, r24
							LCD_Display_Location(0,1);
    1750:	21 e0       	ldi	r18, 0x01	; 1
    1752:	30 e0       	ldi	r19, 0x00	; 0
    1754:	40 e0       	ldi	r20, 0x00	; 0
    1756:	50 e0       	ldi	r21, 0x00	; 0
    1758:	60 e0       	ldi	r22, 0x00	; 0
    175a:	70 e0       	ldi	r23, 0x00	; 0
    175c:	cb 01       	movw	r24, r22
    175e:	0e 94 20 13 	call	0x2640	; 0x2640 <LCD_Display_Location>
							LCD_Display_FloatNumber(vin,3);
    1762:	43 e0       	ldi	r20, 0x03	; 3
    1764:	c3 01       	movw	r24, r6
    1766:	b2 01       	movw	r22, r4
    1768:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <LCD_Display_FloatNumber>
    176c:	8f ec       	ldi	r24, 0xCF	; 207
    176e:	97 e0       	ldi	r25, 0x07	; 7
    1770:	01 97       	sbiw	r24, 0x01	; 1
    1772:	f1 f7       	brne	.-4      	; 0x1770 <display_volt+0x1ca>
    1774:	00 c0       	rjmp	.+0      	; 0x1776 <display_volt+0x1d0>
    1776:	00 00       	nop
					LCD_Display_String((uint8_t*)"*:ext");
					//if the volt value changed
					while(exit_V != '*'){
						if(old_volt!=volt){
							LCD_Display_Location(0,1);
							old_volt=volt;
    1778:	7e 01       	movw	r14, r28
							vin=1000.0*Read_Volt(volt,Vtot,range,mode);
							LCD_Display_Location(0,1);
							LCD_Display_FloatNumber(vin,3);
							_delay_ms(1);
						}
						if(volt>=1003 || volt<=206){ //make sure
    177a:	ce 01       	movw	r24, r28
    177c:	8f 5c       	subi	r24, 0xCF	; 207
    177e:	91 09       	sbc	r25, r1
    1780:	8c 31       	cpi	r24, 0x1C	; 28
    1782:	93 40       	sbci	r25, 0x03	; 3
    1784:	68 f0       	brcs	.+26     	; 0x17a0 <display_volt+0x1fa>
    1786:	8f ef       	ldi	r24, 0xFF	; 255
    1788:	90 e7       	ldi	r25, 0x70	; 112
    178a:	22 e0       	ldi	r18, 0x02	; 2
    178c:	81 50       	subi	r24, 0x01	; 1
    178e:	90 40       	sbci	r25, 0x00	; 0
    1790:	20 40       	sbci	r18, 0x00	; 0
    1792:	e1 f7       	brne	.-8      	; 0x178c <display_volt+0x1e6>
    1794:	00 c0       	rjmp	.+0      	; 0x1796 <display_volt+0x1f0>
    1796:	00 00       	nop
							_delay_ms(100);
							volt=ADC_Read(VDCpin);
    1798:	86 e0       	ldi	r24, 0x06	; 6
    179a:	0e 94 43 15 	call	0x2a86	; 0x2a86 <ADC_Read>
    179e:	ec 01       	movw	r28, r24
						}
						//check if it didn't exceed the max range (positive or negative)
						if(volt>=1003 || volt<=206){
    17a0:	cf 5c       	subi	r28, 0xCF	; 207
    17a2:	d1 09       	sbc	r29, r1
    17a4:	cc 31       	cpi	r28, 0x1C	; 28
    17a6:	d3 40       	sbci	r29, 0x03	; 3
    17a8:	f8 f0       	brcs	.+62     	; 0x17e8 <display_volt+0x242>
							LCD_ClearScreen();
    17aa:	0e 94 8e 10 	call	0x211c	; 0x211c <LCD_ClearScreen>
							LCD_HomeScreen();
    17ae:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <LCD_HomeScreen>
							LCD_Display_String((uint8_t*)"error(big V) :(");
    17b2:	89 e5       	ldi	r24, 0x59	; 89
    17b4:	91 e0       	ldi	r25, 0x01	; 1
    17b6:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_Display_String>
							LCD_Display_Location(0,1);
    17ba:	21 e0       	ldi	r18, 0x01	; 1
    17bc:	30 e0       	ldi	r19, 0x00	; 0
    17be:	40 e0       	ldi	r20, 0x00	; 0
    17c0:	50 e0       	ldi	r21, 0x00	; 0
    17c2:	60 e0       	ldi	r22, 0x00	; 0
    17c4:	70 e0       	ldi	r23, 0x00	; 0
    17c6:	cb 01       	movw	r24, r22
    17c8:	0e 94 20 13 	call	0x2640	; 0x2640 <LCD_Display_Location>
							LCD_Display_String((uint8_t*)"need big range;)");
    17cc:	8d eb       	ldi	r24, 0xBD	; 189
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_Display_String>
    17d4:	9f ef       	ldi	r25, 0xFF	; 255
    17d6:	29 e6       	ldi	r18, 0x69	; 105
    17d8:	88 e1       	ldi	r24, 0x18	; 24
    17da:	91 50       	subi	r25, 0x01	; 1
    17dc:	20 40       	sbci	r18, 0x00	; 0
    17de:	80 40       	sbci	r24, 0x00	; 0
    17e0:	e1 f7       	brne	.-8      	; 0x17da <display_volt+0x234>
    17e2:	00 c0       	rjmp	.+0      	; 0x17e4 <display_volt+0x23e>
    17e4:	00 00       	nop
    17e6:	eb c1       	rjmp	.+982    	; 0x1bbe <display_volt+0x618>
							_delay_ms(1000);
							return;
						}
						volt=ADC_Read(VDCpin);
    17e8:	86 e0       	ldi	r24, 0x06	; 6
    17ea:	0e 94 43 15 	call	0x2a86	; 0x2a86 <ADC_Read>
    17ee:	ec 01       	movw	r28, r24
						exit_V=KEYPAD_Read();
    17f0:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <KEYPAD_Read>
    17f4:	18 2f       	mov	r17, r24
					LCD_Display_FloatNumber(vin,3);
					_delay_ms(1000);
					LCD_Display_Location(11,1);
					LCD_Display_String((uint8_t*)"*:ext");
					//if the volt value changed
					while(exit_V != '*'){
    17f6:	1a 32       	cpi	r17, 0x2A	; 42
    17f8:	09 f0       	breq	.+2      	; 0x17fc <display_volt+0x256>
    17fa:	8c cf       	rjmp	.-232    	; 0x1714 <display_volt+0x16e>
    17fc:	dd c1       	rjmp	.+954    	; 0x1bb8 <display_volt+0x612>
						volt=ADC_Read(VDCpin);
						exit_V=KEYPAD_Read();
					}
				}
				else{//V
					vin=Read_Volt(volt,Vtot,range,mode);
    17fe:	20 2f       	mov	r18, r16
    1800:	4d 2d       	mov	r20, r13
    1802:	b5 01       	movw	r22, r10
    1804:	ce 01       	movw	r24, r28
    1806:	0e 94 92 00 	call	0x124	; 0x124 <Read_Volt>
    180a:	2b 01       	movw	r4, r22
    180c:	3c 01       	movw	r6, r24
					LCD_Display_String((uint8_t*)"Volt (V)");
    180e:	83 e7       	ldi	r24, 0x73	; 115
    1810:	91 e0       	ldi	r25, 0x01	; 1
    1812:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_Display_String>
					LCD_Display_Location(0,1);
    1816:	21 e0       	ldi	r18, 0x01	; 1
    1818:	30 e0       	ldi	r19, 0x00	; 0
    181a:	40 e0       	ldi	r20, 0x00	; 0
    181c:	50 e0       	ldi	r21, 0x00	; 0
    181e:	60 e0       	ldi	r22, 0x00	; 0
    1820:	70 e0       	ldi	r23, 0x00	; 0
    1822:	cb 01       	movw	r24, r22
    1824:	0e 94 20 13 	call	0x2640	; 0x2640 <LCD_Display_Location>
					LCD_Display_FloatNumber(vin,3);
    1828:	43 e0       	ldi	r20, 0x03	; 3
    182a:	c3 01       	movw	r24, r6
    182c:	b2 01       	movw	r22, r4
    182e:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <LCD_Display_FloatNumber>
    1832:	9f ef       	ldi	r25, 0xFF	; 255
    1834:	29 e6       	ldi	r18, 0x69	; 105
    1836:	88 e1       	ldi	r24, 0x18	; 24
    1838:	91 50       	subi	r25, 0x01	; 1
    183a:	20 40       	sbci	r18, 0x00	; 0
    183c:	80 40       	sbci	r24, 0x00	; 0
    183e:	e1 f7       	brne	.-8      	; 0x1838 <display_volt+0x292>
    1840:	00 c0       	rjmp	.+0      	; 0x1842 <display_volt+0x29c>
    1842:	00 00       	nop
					_delay_ms(1000);
					LCD_Display_Location(11,1);
    1844:	21 e0       	ldi	r18, 0x01	; 1
    1846:	30 e0       	ldi	r19, 0x00	; 0
    1848:	40 e0       	ldi	r20, 0x00	; 0
    184a:	50 e0       	ldi	r21, 0x00	; 0
    184c:	6b e0       	ldi	r22, 0x0B	; 11
    184e:	70 e0       	ldi	r23, 0x00	; 0
    1850:	80 e0       	ldi	r24, 0x00	; 0
    1852:	90 e0       	ldi	r25, 0x00	; 0
    1854:	0e 94 20 13 	call	0x2640	; 0x2640 <LCD_Display_Location>
					LCD_Display_String((uint8_t*)"*:ext");
    1858:	8d ed       	ldi	r24, 0xDD	; 221
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_Display_String>
					//if the volt value changed
					while(exit_V != '*'){
    1860:	6b c0       	rjmp	.+214    	; 0x1938 <display_volt+0x392>
						if(old_volt!=volt){
    1862:	ce 15       	cp	r28, r14
    1864:	df 05       	cpc	r29, r15
    1866:	51 f1       	breq	.+84     	; 0x18bc <display_volt+0x316>
							LCD_Display_Location(0,1);
    1868:	21 e0       	ldi	r18, 0x01	; 1
    186a:	30 e0       	ldi	r19, 0x00	; 0
    186c:	40 e0       	ldi	r20, 0x00	; 0
    186e:	50 e0       	ldi	r21, 0x00	; 0
    1870:	60 e0       	ldi	r22, 0x00	; 0
    1872:	70 e0       	ldi	r23, 0x00	; 0
    1874:	cb 01       	movw	r24, r22
    1876:	0e 94 20 13 	call	0x2640	; 0x2640 <LCD_Display_Location>
							old_volt=volt;
							LCD_Display_String((uint8_t*)"           ");
    187a:	80 e4       	ldi	r24, 0x40	; 64
    187c:	91 e0       	ldi	r25, 0x01	; 1
    187e:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_Display_String>
							vin=Read_Volt(volt,Vtot,range,mode);
    1882:	20 2f       	mov	r18, r16
    1884:	4d 2d       	mov	r20, r13
    1886:	b5 01       	movw	r22, r10
    1888:	ce 01       	movw	r24, r28
    188a:	0e 94 92 00 	call	0x124	; 0x124 <Read_Volt>
    188e:	2b 01       	movw	r4, r22
    1890:	3c 01       	movw	r6, r24
							LCD_Display_Location(0,1);
    1892:	21 e0       	ldi	r18, 0x01	; 1
    1894:	30 e0       	ldi	r19, 0x00	; 0
    1896:	40 e0       	ldi	r20, 0x00	; 0
    1898:	50 e0       	ldi	r21, 0x00	; 0
    189a:	60 e0       	ldi	r22, 0x00	; 0
    189c:	70 e0       	ldi	r23, 0x00	; 0
    189e:	cb 01       	movw	r24, r22
    18a0:	0e 94 20 13 	call	0x2640	; 0x2640 <LCD_Display_Location>
							LCD_Display_FloatNumber(vin,3);
    18a4:	43 e0       	ldi	r20, 0x03	; 3
    18a6:	c3 01       	movw	r24, r6
    18a8:	b2 01       	movw	r22, r4
    18aa:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <LCD_Display_FloatNumber>
    18ae:	8f ec       	ldi	r24, 0xCF	; 207
    18b0:	97 e0       	ldi	r25, 0x07	; 7
    18b2:	01 97       	sbiw	r24, 0x01	; 1
    18b4:	f1 f7       	brne	.-4      	; 0x18b2 <display_volt+0x30c>
    18b6:	00 c0       	rjmp	.+0      	; 0x18b8 <display_volt+0x312>
    18b8:	00 00       	nop
					LCD_Display_String((uint8_t*)"*:ext");
					//if the volt value changed
					while(exit_V != '*'){
						if(old_volt!=volt){
							LCD_Display_Location(0,1);
							old_volt=volt;
    18ba:	7e 01       	movw	r14, r28
							vin=Read_Volt(volt,Vtot,range,mode);
							LCD_Display_Location(0,1);
							LCD_Display_FloatNumber(vin,3);
							_delay_ms(1);
							}
							if(volt>=1003 || volt<=206){ //make sure
    18bc:	ce 01       	movw	r24, r28
    18be:	8f 5c       	subi	r24, 0xCF	; 207
    18c0:	91 09       	sbc	r25, r1
    18c2:	8c 31       	cpi	r24, 0x1C	; 28
    18c4:	93 40       	sbci	r25, 0x03	; 3
    18c6:	68 f0       	brcs	.+26     	; 0x18e2 <display_volt+0x33c>
    18c8:	8f ef       	ldi	r24, 0xFF	; 255
    18ca:	90 e7       	ldi	r25, 0x70	; 112
    18cc:	22 e0       	ldi	r18, 0x02	; 2
    18ce:	81 50       	subi	r24, 0x01	; 1
    18d0:	90 40       	sbci	r25, 0x00	; 0
    18d2:	20 40       	sbci	r18, 0x00	; 0
    18d4:	e1 f7       	brne	.-8      	; 0x18ce <display_volt+0x328>
    18d6:	00 c0       	rjmp	.+0      	; 0x18d8 <display_volt+0x332>
    18d8:	00 00       	nop
								_delay_ms(100);
								volt=ADC_Read(VDCpin);
    18da:	86 e0       	ldi	r24, 0x06	; 6
    18dc:	0e 94 43 15 	call	0x2a86	; 0x2a86 <ADC_Read>
    18e0:	ec 01       	movw	r28, r24
							}
							//check if it didn't exceed the max range (positive or negative)
							if(volt>=1003|| volt<=206){
    18e2:	cf 5c       	subi	r28, 0xCF	; 207
    18e4:	d1 09       	sbc	r29, r1
    18e6:	cc 31       	cpi	r28, 0x1C	; 28
    18e8:	d3 40       	sbci	r29, 0x03	; 3
    18ea:	f8 f0       	brcs	.+62     	; 0x192a <display_volt+0x384>
								LCD_ClearScreen();
    18ec:	0e 94 8e 10 	call	0x211c	; 0x211c <LCD_ClearScreen>
								LCD_HomeScreen();
    18f0:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <LCD_HomeScreen>
								LCD_Display_String((uint8_t*)"error(big V) :(");
    18f4:	89 e5       	ldi	r24, 0x59	; 89
    18f6:	91 e0       	ldi	r25, 0x01	; 1
    18f8:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_Display_String>
								LCD_Display_Location(0,1);
    18fc:	21 e0       	ldi	r18, 0x01	; 1
    18fe:	30 e0       	ldi	r19, 0x00	; 0
    1900:	40 e0       	ldi	r20, 0x00	; 0
    1902:	50 e0       	ldi	r21, 0x00	; 0
    1904:	60 e0       	ldi	r22, 0x00	; 0
    1906:	70 e0       	ldi	r23, 0x00	; 0
    1908:	cb 01       	movw	r24, r22
    190a:	0e 94 20 13 	call	0x2640	; 0x2640 <LCD_Display_Location>
								LCD_Display_String((uint8_t*)"need big range;)");
    190e:	8d eb       	ldi	r24, 0xBD	; 189
    1910:	90 e0       	ldi	r25, 0x00	; 0
    1912:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_Display_String>
    1916:	9f ef       	ldi	r25, 0xFF	; 255
    1918:	29 e6       	ldi	r18, 0x69	; 105
    191a:	88 e1       	ldi	r24, 0x18	; 24
    191c:	91 50       	subi	r25, 0x01	; 1
    191e:	20 40       	sbci	r18, 0x00	; 0
    1920:	80 40       	sbci	r24, 0x00	; 0
    1922:	e1 f7       	brne	.-8      	; 0x191c <display_volt+0x376>
    1924:	00 c0       	rjmp	.+0      	; 0x1926 <display_volt+0x380>
    1926:	00 00       	nop
    1928:	4a c1       	rjmp	.+660    	; 0x1bbe <display_volt+0x618>
								_delay_ms(1000);
								return;
							}
							volt=ADC_Read(VDCpin);
    192a:	86 e0       	ldi	r24, 0x06	; 6
    192c:	0e 94 43 15 	call	0x2a86	; 0x2a86 <ADC_Read>
    1930:	ec 01       	movw	r28, r24
							exit_V=KEYPAD_Read();
    1932:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <KEYPAD_Read>
    1936:	18 2f       	mov	r17, r24
					LCD_Display_FloatNumber(vin,3);
					_delay_ms(1000);
					LCD_Display_Location(11,1);
					LCD_Display_String((uint8_t*)"*:ext");
					//if the volt value changed
					while(exit_V != '*'){
    1938:	1a 32       	cpi	r17, 0x2A	; 42
    193a:	09 f0       	breq	.+2      	; 0x193e <display_volt+0x398>
    193c:	92 cf       	rjmp	.-220    	; 0x1862 <display_volt+0x2bc>
    193e:	3c c1       	rjmp	.+632    	; 0x1bb8 <display_volt+0x612>
						}
					}
			break;	
			}
			case '1':{//AC
				if(range=='1'){ //mV
    1940:	91 e3       	ldi	r25, 0x31	; 49
    1942:	d9 12       	cpse	r13, r25
    1944:	a3 c0       	rjmp	.+326    	; 0x1a8c <display_volt+0x4e6>
					uint16_t VAC;
					VAC=ADC_Read(Vtotpin);
    1946:	84 e0       	ldi	r24, 0x04	; 4
    1948:	0e 94 43 15 	call	0x2a86	; 0x2a86 <ADC_Read>
    194c:	7c 01       	movw	r14, r24
					vin=1000.0*Read_Volt(volt,Vtot,range,mode);
    194e:	20 2f       	mov	r18, r16
    1950:	4d 2d       	mov	r20, r13
    1952:	b5 01       	movw	r22, r10
    1954:	ce 01       	movw	r24, r28
    1956:	0e 94 92 00 	call	0x124	; 0x124 <Read_Volt>
    195a:	20 e0       	ldi	r18, 0x00	; 0
    195c:	30 e0       	ldi	r19, 0x00	; 0
    195e:	4a e7       	ldi	r20, 0x7A	; 122
    1960:	54 e4       	ldi	r21, 0x44	; 68
    1962:	0e 94 d7 18 	call	0x31ae	; 0x31ae <__mulsf3>
    1966:	2b 01       	movw	r4, r22
    1968:	3c 01       	movw	r6, r24
					LCD_Display_String((uint8_t*)"Volt AC (mV)");
    196a:	8c e7       	ldi	r24, 0x7C	; 124
    196c:	91 e0       	ldi	r25, 0x01	; 1
    196e:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_Display_String>
					LCD_Display_Location(0,1);
    1972:	21 e0       	ldi	r18, 0x01	; 1
    1974:	30 e0       	ldi	r19, 0x00	; 0
    1976:	40 e0       	ldi	r20, 0x00	; 0
    1978:	50 e0       	ldi	r21, 0x00	; 0
    197a:	60 e0       	ldi	r22, 0x00	; 0
    197c:	70 e0       	ldi	r23, 0x00	; 0
    197e:	cb 01       	movw	r24, r22
    1980:	0e 94 20 13 	call	0x2640	; 0x2640 <LCD_Display_Location>
					LCD_Display_FloatNumber(vin,3);
    1984:	43 e0       	ldi	r20, 0x03	; 3
    1986:	c3 01       	movw	r24, r6
    1988:	b2 01       	movw	r22, r4
    198a:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <LCD_Display_FloatNumber>
    198e:	2f ef       	ldi	r18, 0xFF	; 255
    1990:	89 e6       	ldi	r24, 0x69	; 105
    1992:	98 e1       	ldi	r25, 0x18	; 24
    1994:	21 50       	subi	r18, 0x01	; 1
    1996:	80 40       	sbci	r24, 0x00	; 0
    1998:	90 40       	sbci	r25, 0x00	; 0
    199a:	e1 f7       	brne	.-8      	; 0x1994 <display_volt+0x3ee>
    199c:	00 c0       	rjmp	.+0      	; 0x199e <display_volt+0x3f8>
    199e:	00 00       	nop
					_delay_ms(1000);
					LCD_Display_Location(11,1);
    19a0:	21 e0       	ldi	r18, 0x01	; 1
    19a2:	30 e0       	ldi	r19, 0x00	; 0
    19a4:	40 e0       	ldi	r20, 0x00	; 0
    19a6:	50 e0       	ldi	r21, 0x00	; 0
    19a8:	6b e0       	ldi	r22, 0x0B	; 11
    19aa:	70 e0       	ldi	r23, 0x00	; 0
    19ac:	80 e0       	ldi	r24, 0x00	; 0
    19ae:	90 e0       	ldi	r25, 0x00	; 0
    19b0:	0e 94 20 13 	call	0x2640	; 0x2640 <LCD_Display_Location>
					LCD_Display_String((uint8_t*)"*:ext");
    19b4:	8d ed       	ldi	r24, 0xDD	; 221
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_Display_String>
			break;	
			}
			case '1':{//AC
				if(range=='1'){ //mV
					uint16_t VAC;
					VAC=ADC_Read(Vtotpin);
    19bc:	47 01       	movw	r8, r14
					_delay_ms(1000);
					LCD_Display_Location(11,1);
					LCD_Display_String((uint8_t*)"*:ext");
					old_volt=VAC;
					//if the volt value changed
					while(exit_V != '*'){
    19be:	62 c0       	rjmp	.+196    	; 0x1a84 <display_volt+0x4de>
						if(old_volt!=VAC){
    19c0:	e8 14       	cp	r14, r8
    19c2:	f9 04       	cpc	r15, r9
    19c4:	09 f4       	brne	.+2      	; 0x19c8 <display_volt+0x422>
    19c6:	57 c0       	rjmp	.+174    	; 0x1a76 <display_volt+0x4d0>
							//check if it didn't exceed the max range (positive or negative)
							if(volt>=1003 || volt<=206){
    19c8:	cf 5c       	subi	r28, 0xCF	; 207
    19ca:	d1 09       	sbc	r29, r1
    19cc:	cc 31       	cpi	r28, 0x1C	; 28
    19ce:	d3 40       	sbci	r29, 0x03	; 3
    19d0:	f8 f0       	brcs	.+62     	; 0x1a10 <display_volt+0x46a>
								LCD_ClearScreen();
    19d2:	0e 94 8e 10 	call	0x211c	; 0x211c <LCD_ClearScreen>
								LCD_HomeScreen();
    19d6:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <LCD_HomeScreen>
								LCD_Display_String((uint8_t*)"error(big V) :(");
    19da:	89 e5       	ldi	r24, 0x59	; 89
    19dc:	91 e0       	ldi	r25, 0x01	; 1
    19de:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_Display_String>
								LCD_Display_Location(0,1);
    19e2:	21 e0       	ldi	r18, 0x01	; 1
    19e4:	30 e0       	ldi	r19, 0x00	; 0
    19e6:	40 e0       	ldi	r20, 0x00	; 0
    19e8:	50 e0       	ldi	r21, 0x00	; 0
    19ea:	60 e0       	ldi	r22, 0x00	; 0
    19ec:	70 e0       	ldi	r23, 0x00	; 0
    19ee:	cb 01       	movw	r24, r22
    19f0:	0e 94 20 13 	call	0x2640	; 0x2640 <LCD_Display_Location>
								LCD_Display_String((uint8_t*)"need big range;)");
    19f4:	8d eb       	ldi	r24, 0xBD	; 189
    19f6:	90 e0       	ldi	r25, 0x00	; 0
    19f8:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_Display_String>
    19fc:	8f ef       	ldi	r24, 0xFF	; 255
    19fe:	99 e6       	ldi	r25, 0x69	; 105
    1a00:	28 e1       	ldi	r18, 0x18	; 24
    1a02:	81 50       	subi	r24, 0x01	; 1
    1a04:	90 40       	sbci	r25, 0x00	; 0
    1a06:	20 40       	sbci	r18, 0x00	; 0
    1a08:	e1 f7       	brne	.-8      	; 0x1a02 <display_volt+0x45c>
    1a0a:	00 c0       	rjmp	.+0      	; 0x1a0c <display_volt+0x466>
    1a0c:	00 00       	nop
    1a0e:	d7 c0       	rjmp	.+430    	; 0x1bbe <display_volt+0x618>
								_delay_ms(1000);
								return;
							}
							LCD_Display_Location(0,1);
    1a10:	21 e0       	ldi	r18, 0x01	; 1
    1a12:	30 e0       	ldi	r19, 0x00	; 0
    1a14:	40 e0       	ldi	r20, 0x00	; 0
    1a16:	50 e0       	ldi	r21, 0x00	; 0
    1a18:	60 e0       	ldi	r22, 0x00	; 0
    1a1a:	70 e0       	ldi	r23, 0x00	; 0
    1a1c:	cb 01       	movw	r24, r22
    1a1e:	0e 94 20 13 	call	0x2640	; 0x2640 <LCD_Display_Location>
							old_volt=VAC;
							LCD_Display_String((uint8_t*)"           ");
    1a22:	80 e4       	ldi	r24, 0x40	; 64
    1a24:	91 e0       	ldi	r25, 0x01	; 1
    1a26:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_Display_String>
							volt=ADC_Read(VDCpin);
    1a2a:	86 e0       	ldi	r24, 0x06	; 6
    1a2c:	0e 94 43 15 	call	0x2a86	; 0x2a86 <ADC_Read>
    1a30:	ec 01       	movw	r28, r24
							vin=1000.0*Read_Volt(volt,Vtot,range,mode);
    1a32:	20 2f       	mov	r18, r16
    1a34:	4d 2d       	mov	r20, r13
    1a36:	b5 01       	movw	r22, r10
    1a38:	0e 94 92 00 	call	0x124	; 0x124 <Read_Volt>
    1a3c:	20 e0       	ldi	r18, 0x00	; 0
    1a3e:	30 e0       	ldi	r19, 0x00	; 0
    1a40:	4a e7       	ldi	r20, 0x7A	; 122
    1a42:	54 e4       	ldi	r21, 0x44	; 68
    1a44:	0e 94 d7 18 	call	0x31ae	; 0x31ae <__mulsf3>
    1a48:	2b 01       	movw	r4, r22
    1a4a:	3c 01       	movw	r6, r24
							LCD_Display_Location(0,1);
    1a4c:	21 e0       	ldi	r18, 0x01	; 1
    1a4e:	30 e0       	ldi	r19, 0x00	; 0
    1a50:	40 e0       	ldi	r20, 0x00	; 0
    1a52:	50 e0       	ldi	r21, 0x00	; 0
    1a54:	60 e0       	ldi	r22, 0x00	; 0
    1a56:	70 e0       	ldi	r23, 0x00	; 0
    1a58:	cb 01       	movw	r24, r22
    1a5a:	0e 94 20 13 	call	0x2640	; 0x2640 <LCD_Display_Location>
							LCD_Display_FloatNumber(vin,3);
    1a5e:	43 e0       	ldi	r20, 0x03	; 3
    1a60:	c3 01       	movw	r24, r6
    1a62:	b2 01       	movw	r22, r4
    1a64:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <LCD_Display_FloatNumber>
    1a68:	8f ec       	ldi	r24, 0xCF	; 207
    1a6a:	97 e0       	ldi	r25, 0x07	; 7
    1a6c:	01 97       	sbiw	r24, 0x01	; 1
    1a6e:	f1 f7       	brne	.-4      	; 0x1a6c <display_volt+0x4c6>
    1a70:	00 c0       	rjmp	.+0      	; 0x1a72 <display_volt+0x4cc>
    1a72:	00 00       	nop
								LCD_Display_String((uint8_t*)"need big range;)");
								_delay_ms(1000);
								return;
							}
							LCD_Display_Location(0,1);
							old_volt=VAC;
    1a74:	74 01       	movw	r14, r8
							vin=1000.0*Read_Volt(volt,Vtot,range,mode);
							LCD_Display_Location(0,1);
							LCD_Display_FloatNumber(vin,3);
							_delay_ms(1);
						}
						VAC=ADC_Read(Vtotpin);
    1a76:	84 e0       	ldi	r24, 0x04	; 4
    1a78:	0e 94 43 15 	call	0x2a86	; 0x2a86 <ADC_Read>
    1a7c:	4c 01       	movw	r8, r24
						exit_V=KEYPAD_Read();
    1a7e:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <KEYPAD_Read>
    1a82:	18 2f       	mov	r17, r24
					_delay_ms(1000);
					LCD_Display_Location(11,1);
					LCD_Display_String((uint8_t*)"*:ext");
					old_volt=VAC;
					//if the volt value changed
					while(exit_V != '*'){
    1a84:	1a 32       	cpi	r17, 0x2A	; 42
    1a86:	09 f0       	breq	.+2      	; 0x1a8a <display_volt+0x4e4>
    1a88:	9b cf       	rjmp	.-202    	; 0x19c0 <display_volt+0x41a>
    1a8a:	96 c0       	rjmp	.+300    	; 0x1bb8 <display_volt+0x612>
						exit_V=KEYPAD_Read();
					}
				}
				else{//V
					uint16_t VAC;
					VAC=ADC_Read(Vtotpin);
    1a8c:	84 e0       	ldi	r24, 0x04	; 4
    1a8e:	0e 94 43 15 	call	0x2a86	; 0x2a86 <ADC_Read>
    1a92:	7c 01       	movw	r14, r24
					vin=Read_Volt(volt,Vtot,range,mode);
    1a94:	20 2f       	mov	r18, r16
    1a96:	4d 2d       	mov	r20, r13
    1a98:	b5 01       	movw	r22, r10
    1a9a:	ce 01       	movw	r24, r28
    1a9c:	0e 94 92 00 	call	0x124	; 0x124 <Read_Volt>
    1aa0:	2b 01       	movw	r4, r22
    1aa2:	3c 01       	movw	r6, r24
					LCD_Display_String((uint8_t*)"Volt AC (V)");
    1aa4:	89 e8       	ldi	r24, 0x89	; 137
    1aa6:	91 e0       	ldi	r25, 0x01	; 1
    1aa8:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_Display_String>
					LCD_Display_Location(0,1);
    1aac:	21 e0       	ldi	r18, 0x01	; 1
    1aae:	30 e0       	ldi	r19, 0x00	; 0
    1ab0:	40 e0       	ldi	r20, 0x00	; 0
    1ab2:	50 e0       	ldi	r21, 0x00	; 0
    1ab4:	60 e0       	ldi	r22, 0x00	; 0
    1ab6:	70 e0       	ldi	r23, 0x00	; 0
    1ab8:	cb 01       	movw	r24, r22
    1aba:	0e 94 20 13 	call	0x2640	; 0x2640 <LCD_Display_Location>
					LCD_Display_FloatNumber(vin,3);
    1abe:	43 e0       	ldi	r20, 0x03	; 3
    1ac0:	c3 01       	movw	r24, r6
    1ac2:	b2 01       	movw	r22, r4
    1ac4:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <LCD_Display_FloatNumber>
    1ac8:	9f ef       	ldi	r25, 0xFF	; 255
    1aca:	23 e2       	ldi	r18, 0x23	; 35
    1acc:	84 ef       	ldi	r24, 0xF4	; 244
    1ace:	91 50       	subi	r25, 0x01	; 1
    1ad0:	20 40       	sbci	r18, 0x00	; 0
    1ad2:	80 40       	sbci	r24, 0x00	; 0
    1ad4:	e1 f7       	brne	.-8      	; 0x1ace <display_volt+0x528>
    1ad6:	00 c0       	rjmp	.+0      	; 0x1ad8 <display_volt+0x532>
    1ad8:	00 00       	nop
					_delay_ms(10000);
					LCD_Display_Location(11,1);
    1ada:	21 e0       	ldi	r18, 0x01	; 1
    1adc:	30 e0       	ldi	r19, 0x00	; 0
    1ade:	40 e0       	ldi	r20, 0x00	; 0
    1ae0:	50 e0       	ldi	r21, 0x00	; 0
    1ae2:	6b e0       	ldi	r22, 0x0B	; 11
    1ae4:	70 e0       	ldi	r23, 0x00	; 0
    1ae6:	80 e0       	ldi	r24, 0x00	; 0
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	0e 94 20 13 	call	0x2640	; 0x2640 <LCD_Display_Location>
					LCD_Display_String((uint8_t*)"*:ext");
    1aee:	8d ed       	ldi	r24, 0xDD	; 221
    1af0:	90 e0       	ldi	r25, 0x00	; 0
    1af2:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_Display_String>
						exit_V=KEYPAD_Read();
					}
				}
				else{//V
					uint16_t VAC;
					VAC=ADC_Read(Vtotpin);
    1af6:	47 01       	movw	r8, r14
					_delay_ms(10000);
					LCD_Display_Location(11,1);
					LCD_Display_String((uint8_t*)"*:ext");
					old_volt=VAC;
					//if the volt value changed
					while(exit_V != '*'){
    1af8:	5c c0       	rjmp	.+184    	; 0x1bb2 <display_volt+0x60c>
						if(old_volt!=VAC){
    1afa:	e8 14       	cp	r14, r8
    1afc:	f9 04       	cpc	r15, r9
    1afe:	09 f4       	brne	.+2      	; 0x1b02 <display_volt+0x55c>
    1b00:	51 c0       	rjmp	.+162    	; 0x1ba4 <display_volt+0x5fe>
							//check if it didn't exceed the max range (positive or negative)
							if(volt>=1003|| volt<=206){
    1b02:	cf 5c       	subi	r28, 0xCF	; 207
    1b04:	d1 09       	sbc	r29, r1
    1b06:	cc 31       	cpi	r28, 0x1C	; 28
    1b08:	d3 40       	sbci	r29, 0x03	; 3
    1b0a:	f8 f0       	brcs	.+62     	; 0x1b4a <display_volt+0x5a4>
								LCD_ClearScreen();
    1b0c:	0e 94 8e 10 	call	0x211c	; 0x211c <LCD_ClearScreen>
								LCD_HomeScreen();
    1b10:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <LCD_HomeScreen>
								LCD_Display_String((uint8_t*)"error(big V) :(");
    1b14:	89 e5       	ldi	r24, 0x59	; 89
    1b16:	91 e0       	ldi	r25, 0x01	; 1
    1b18:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_Display_String>
								LCD_Display_Location(0,1);
    1b1c:	21 e0       	ldi	r18, 0x01	; 1
    1b1e:	30 e0       	ldi	r19, 0x00	; 0
    1b20:	40 e0       	ldi	r20, 0x00	; 0
    1b22:	50 e0       	ldi	r21, 0x00	; 0
    1b24:	60 e0       	ldi	r22, 0x00	; 0
    1b26:	70 e0       	ldi	r23, 0x00	; 0
    1b28:	cb 01       	movw	r24, r22
    1b2a:	0e 94 20 13 	call	0x2640	; 0x2640 <LCD_Display_Location>
								LCD_Display_String((uint8_t*)"need big range;)");
    1b2e:	8d eb       	ldi	r24, 0xBD	; 189
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_Display_String>
    1b36:	2f ef       	ldi	r18, 0xFF	; 255
    1b38:	89 e6       	ldi	r24, 0x69	; 105
    1b3a:	98 e1       	ldi	r25, 0x18	; 24
    1b3c:	21 50       	subi	r18, 0x01	; 1
    1b3e:	80 40       	sbci	r24, 0x00	; 0
    1b40:	90 40       	sbci	r25, 0x00	; 0
    1b42:	e1 f7       	brne	.-8      	; 0x1b3c <display_volt+0x596>
    1b44:	00 c0       	rjmp	.+0      	; 0x1b46 <display_volt+0x5a0>
    1b46:	00 00       	nop
    1b48:	3a c0       	rjmp	.+116    	; 0x1bbe <display_volt+0x618>
								_delay_ms(1000);
								return;
							}
							LCD_Display_Location(0,1);
    1b4a:	21 e0       	ldi	r18, 0x01	; 1
    1b4c:	30 e0       	ldi	r19, 0x00	; 0
    1b4e:	40 e0       	ldi	r20, 0x00	; 0
    1b50:	50 e0       	ldi	r21, 0x00	; 0
    1b52:	60 e0       	ldi	r22, 0x00	; 0
    1b54:	70 e0       	ldi	r23, 0x00	; 0
    1b56:	cb 01       	movw	r24, r22
    1b58:	0e 94 20 13 	call	0x2640	; 0x2640 <LCD_Display_Location>
							old_volt=VAC;
							LCD_Display_String((uint8_t*)"           ");
    1b5c:	80 e4       	ldi	r24, 0x40	; 64
    1b5e:	91 e0       	ldi	r25, 0x01	; 1
    1b60:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_Display_String>
							volt=ADC_Read(VDCpin);
    1b64:	86 e0       	ldi	r24, 0x06	; 6
    1b66:	0e 94 43 15 	call	0x2a86	; 0x2a86 <ADC_Read>
    1b6a:	ec 01       	movw	r28, r24
							vin=Read_Volt(volt,Vtot,range,mode);
    1b6c:	20 2f       	mov	r18, r16
    1b6e:	4d 2d       	mov	r20, r13
    1b70:	b5 01       	movw	r22, r10
    1b72:	0e 94 92 00 	call	0x124	; 0x124 <Read_Volt>
    1b76:	2b 01       	movw	r4, r22
    1b78:	3c 01       	movw	r6, r24
							LCD_Display_Location(0,1);
    1b7a:	21 e0       	ldi	r18, 0x01	; 1
    1b7c:	30 e0       	ldi	r19, 0x00	; 0
    1b7e:	40 e0       	ldi	r20, 0x00	; 0
    1b80:	50 e0       	ldi	r21, 0x00	; 0
    1b82:	60 e0       	ldi	r22, 0x00	; 0
    1b84:	70 e0       	ldi	r23, 0x00	; 0
    1b86:	cb 01       	movw	r24, r22
    1b88:	0e 94 20 13 	call	0x2640	; 0x2640 <LCD_Display_Location>
							LCD_Display_FloatNumber(vin,3);
    1b8c:	43 e0       	ldi	r20, 0x03	; 3
    1b8e:	c3 01       	movw	r24, r6
    1b90:	b2 01       	movw	r22, r4
    1b92:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <LCD_Display_FloatNumber>
    1b96:	8f ec       	ldi	r24, 0xCF	; 207
    1b98:	97 e0       	ldi	r25, 0x07	; 7
    1b9a:	01 97       	sbiw	r24, 0x01	; 1
    1b9c:	f1 f7       	brne	.-4      	; 0x1b9a <display_volt+0x5f4>
    1b9e:	00 c0       	rjmp	.+0      	; 0x1ba0 <display_volt+0x5fa>
    1ba0:	00 00       	nop
								LCD_Display_String((uint8_t*)"need big range;)");
								_delay_ms(1000);
								return;
							}
							LCD_Display_Location(0,1);
							old_volt=VAC;
    1ba2:	74 01       	movw	r14, r8
							vin=Read_Volt(volt,Vtot,range,mode);
							LCD_Display_Location(0,1);
							LCD_Display_FloatNumber(vin,3);
							_delay_ms(1);
						}
						VAC=ADC_Read(Vtotpin);
    1ba4:	84 e0       	ldi	r24, 0x04	; 4
    1ba6:	0e 94 43 15 	call	0x2a86	; 0x2a86 <ADC_Read>
    1baa:	4c 01       	movw	r8, r24
						exit_V=KEYPAD_Read();
    1bac:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <KEYPAD_Read>
    1bb0:	18 2f       	mov	r17, r24
					_delay_ms(10000);
					LCD_Display_Location(11,1);
					LCD_Display_String((uint8_t*)"*:ext");
					old_volt=VAC;
					//if the volt value changed
					while(exit_V != '*'){
    1bb2:	1a 32       	cpi	r17, 0x2A	; 42
    1bb4:	09 f0       	breq	.+2      	; 0x1bb8 <display_volt+0x612>
    1bb6:	a1 cf       	rjmp	.-190    	; 0x1afa <display_volt+0x554>
	}
	uint16_t old_volt;
	old_volt=volt;
	fint32_t vin;
	count=0;
	while(exit_V != '*'){
    1bb8:	1a 32       	cpi	r17, 0x2A	; 42
    1bba:	09 f0       	breq	.+2      	; 0x1bbe <display_volt+0x618>
    1bbc:	66 cd       	rjmp	.-1332   	; 0x168a <display_volt+0xe4>
				
			break;
			}
		}
	}
}
    1bbe:	df 91       	pop	r29
    1bc0:	cf 91       	pop	r28
    1bc2:	1f 91       	pop	r17
    1bc4:	0f 91       	pop	r16
    1bc6:	ff 90       	pop	r15
    1bc8:	ef 90       	pop	r14
    1bca:	df 90       	pop	r13
    1bcc:	bf 90       	pop	r11
    1bce:	af 90       	pop	r10
    1bd0:	9f 90       	pop	r9
    1bd2:	8f 90       	pop	r8
    1bd4:	7f 90       	pop	r7
    1bd6:	6f 90       	pop	r6
    1bd8:	5f 90       	pop	r5
    1bda:	4f 90       	pop	r4
    1bdc:	08 95       	ret

00001bde <ask_to_return>:

uint8_t ask_to_return(uint8_t return_key){
    1bde:	1f 93       	push	r17
    1be0:	cf 93       	push	r28
    1be2:	df 93       	push	r29
    1be4:	18 2f       	mov	r17, r24
	uint8_t exit_test;
	uint16_t count;
	count=0;
	exit_test=0;
	//to return
	LCD_ClearScreen();
    1be6:	0e 94 8e 10 	call	0x211c	; 0x211c <LCD_ClearScreen>
	LCD_HomeScreen();
    1bea:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <LCD_HomeScreen>
	LCD_Display_String((uint8_t*)"To Return press:");
    1bee:	86 e9       	ldi	r24, 0x96	; 150
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_Display_String>
	LCD_Display_Location(0,1);
    1bf6:	21 e0       	ldi	r18, 0x01	; 1
    1bf8:	30 e0       	ldi	r19, 0x00	; 0
    1bfa:	40 e0       	ldi	r20, 0x00	; 0
    1bfc:	50 e0       	ldi	r21, 0x00	; 0
    1bfe:	60 e0       	ldi	r22, 0x00	; 0
    1c00:	70 e0       	ldi	r23, 0x00	; 0
    1c02:	cb 01       	movw	r24, r22
    1c04:	0e 94 20 13 	call	0x2640	; 0x2640 <LCD_Display_Location>
	LCD_Display_Character(return_key);
    1c08:	81 2f       	mov	r24, r17
    1c0a:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <LCD_Display_Character>
	LCD_Display_String((uint8_t*)"  ;)");
    1c0e:	88 ea       	ldi	r24, 0xA8	; 168
    1c10:	90 e0       	ldi	r25, 0x00	; 0
    1c12:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_Display_String>
	count=0;
    1c16:	c0 e0       	ldi	r28, 0x00	; 0
    1c18:	d0 e0       	ldi	r29, 0x00	; 0

uint8_t ask_to_return(uint8_t return_key){
	uint8_t exit_test;
	uint16_t count;
	count=0;
	exit_test=0;
    1c1a:	80 e0       	ldi	r24, 0x00	; 0
	LCD_Display_Location(0,1);
	LCD_Display_Character(return_key);
	LCD_Display_String((uint8_t*)"  ;)");
	count=0;
	//check if you want to return
	while(exit_test!=return_key){
    1c1c:	0d c0       	rjmp	.+26     	; 0x1c38 <ask_to_return+0x5a>
		exit_test =KEYPAD_Read();
    1c1e:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <KEYPAD_Read>
    1c22:	ef e0       	ldi	r30, 0x0F	; 15
    1c24:	f7 e2       	ldi	r31, 0x27	; 39
    1c26:	31 97       	sbiw	r30, 0x01	; 1
    1c28:	f1 f7       	brne	.-4      	; 0x1c26 <ask_to_return+0x48>
    1c2a:	00 c0       	rjmp	.+0      	; 0x1c2c <ask_to_return+0x4e>
    1c2c:	00 00       	nop
		_delay_ms(5);
		count++;
    1c2e:	21 96       	adiw	r28, 0x01	; 1
		if(count>=300){
    1c30:	cc 32       	cpi	r28, 0x2C	; 44
    1c32:	f1 e0       	ldi	r31, 0x01	; 1
    1c34:	df 07       	cpc	r29, r31
    1c36:	10 f4       	brcc	.+4      	; 0x1c3c <ask_to_return+0x5e>
	LCD_Display_Location(0,1);
	LCD_Display_Character(return_key);
	LCD_Display_String((uint8_t*)"  ;)");
	count=0;
	//check if you want to return
	while(exit_test!=return_key){
    1c38:	81 13       	cpse	r24, r17
    1c3a:	f1 cf       	rjmp	.-30     	; 0x1c1e <ask_to_return+0x40>
		if(count>=300){
			count=0;
			break;
		}
	}
	if(exit_test==return_key){
    1c3c:	81 13       	cpse	r24, r17
    1c3e:	02 c0       	rjmp	.+4      	; 0x1c44 <ask_to_return+0x66>
		return 1;
    1c40:	81 e0       	ldi	r24, 0x01	; 1
    1c42:	01 c0       	rjmp	.+2      	; 0x1c46 <ask_to_return+0x68>
	}
	return 0;
    1c44:	80 e0       	ldi	r24, 0x00	; 0
}
    1c46:	df 91       	pop	r29
    1c48:	cf 91       	pop	r28
    1c4a:	1f 91       	pop	r17
    1c4c:	08 95       	ret

00001c4e <select_mux>:

void select_mux(uint8_t device,uint8_t range)
{
    1c4e:	cf 93       	push	r28
    1c50:	c6 2f       	mov	r28, r22
    1c52:	2f ef       	ldi	r18, 0xFF	; 255
    1c54:	30 e7       	ldi	r19, 0x70	; 112
    1c56:	92 e0       	ldi	r25, 0x02	; 2
    1c58:	21 50       	subi	r18, 0x01	; 1
    1c5a:	30 40       	sbci	r19, 0x00	; 0
    1c5c:	90 40       	sbci	r25, 0x00	; 0
    1c5e:	e1 f7       	brne	.-8      	; 0x1c58 <select_mux+0xa>
    1c60:	00 c0       	rjmp	.+0      	; 0x1c62 <select_mux+0x14>
    1c62:	00 00       	nop
	
	_delay_ms(100);
	switch(device)
    1c64:	82 33       	cpi	r24, 0x32	; 50
    1c66:	71 f1       	breq	.+92     	; 0x1cc4 <select_mux+0x76>
    1c68:	83 33       	cpi	r24, 0x33	; 51
    1c6a:	09 f4       	brne	.+2      	; 0x1c6e <select_mux+0x20>
    1c6c:	75 c0       	rjmp	.+234    	; 0x1d58 <select_mux+0x10a>
    1c6e:	81 33       	cpi	r24, 0x31	; 49
    1c70:	09 f0       	breq	.+2      	; 0x1c74 <select_mux+0x26>
    1c72:	b6 c0       	rjmp	.+364    	; 0x1de0 <select_mux+0x192>
	{
		case '1':
		{
			switch(range)
    1c74:	62 33       	cpi	r22, 0x32	; 50
    1c76:	81 f0       	breq	.+32     	; 0x1c98 <select_mux+0x4a>
    1c78:	63 33       	cpi	r22, 0x33	; 51
    1c7a:	c9 f0       	breq	.+50     	; 0x1cae <select_mux+0x60>
    1c7c:	61 33       	cpi	r22, 0x31	; 49
    1c7e:	09 f0       	breq	.+2      	; 0x1c82 <select_mux+0x34>
    1c80:	af c0       	rjmp	.+350    	; 0x1de0 <select_mux+0x192>
			{
				case '1':
				{
					// Ohm range 1
					DIO_SetPinValue(DIO_PORTB, A_MUX_2, DIO_LOW);
    1c82:	40 e0       	ldi	r20, 0x00	; 0
    1c84:	64 e0       	ldi	r22, 0x04	; 4
    1c86:	81 e0       	ldi	r24, 0x01	; 1
    1c88:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <DIO_SetPinValue>
					DIO_SetPinValue(DIO_PORTB, B_MUX_2, DIO_LOW);
    1c8c:	40 e0       	ldi	r20, 0x00	; 0
    1c8e:	65 e0       	ldi	r22, 0x05	; 5
    1c90:	81 e0       	ldi	r24, 0x01	; 1
    1c92:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <DIO_SetPinValue>
					
				}
				break;
    1c96:	a4 c0       	rjmp	.+328    	; 0x1de0 <select_mux+0x192>
				case '2':
				{
					// Ohm range 2
					DIO_SetPinValue(DIO_PORTB, A_MUX_2, DIO_HIGH);
    1c98:	41 e0       	ldi	r20, 0x01	; 1
    1c9a:	64 e0       	ldi	r22, 0x04	; 4
    1c9c:	81 e0       	ldi	r24, 0x01	; 1
    1c9e:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <DIO_SetPinValue>
					DIO_SetPinValue(DIO_PORTB, B_MUX_2, DIO_LOW);
    1ca2:	40 e0       	ldi	r20, 0x00	; 0
    1ca4:	65 e0       	ldi	r22, 0x05	; 5
    1ca6:	81 e0       	ldi	r24, 0x01	; 1
    1ca8:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <DIO_SetPinValue>
					
				}
				break;
    1cac:	99 c0       	rjmp	.+306    	; 0x1de0 <select_mux+0x192>
				case '3':
				{
					// Ohm range 3
					DIO_SetPinValue(DIO_PORTB, A_MUX_2, DIO_LOW);
    1cae:	40 e0       	ldi	r20, 0x00	; 0
    1cb0:	64 e0       	ldi	r22, 0x04	; 4
    1cb2:	81 e0       	ldi	r24, 0x01	; 1
    1cb4:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <DIO_SetPinValue>
					DIO_SetPinValue(DIO_PORTB, B_MUX_2, DIO_HIGH);
    1cb8:	41 e0       	ldi	r20, 0x01	; 1
    1cba:	65 e0       	ldi	r22, 0x05	; 5
    1cbc:	81 e0       	ldi	r24, 0x01	; 1
    1cbe:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <DIO_SetPinValue>
					
				}
				break;
    1cc2:	8e c0       	rjmp	.+284    	; 0x1de0 <select_mux+0x192>
			}
		}
		break;//for ohm device
		case '2'://ammeter
		{
			DIO_SetPinValue(DIO_PORTB, A_MUX_2, DIO_LOW);
    1cc4:	40 e0       	ldi	r20, 0x00	; 0
    1cc6:	64 e0       	ldi	r22, 0x04	; 4
    1cc8:	81 e0       	ldi	r24, 0x01	; 1
    1cca:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <DIO_SetPinValue>
    1cce:	2f ef       	ldi	r18, 0xFF	; 255
    1cd0:	30 e7       	ldi	r19, 0x70	; 112
    1cd2:	82 e0       	ldi	r24, 0x02	; 2
    1cd4:	21 50       	subi	r18, 0x01	; 1
    1cd6:	30 40       	sbci	r19, 0x00	; 0
    1cd8:	80 40       	sbci	r24, 0x00	; 0
    1cda:	e1 f7       	brne	.-8      	; 0x1cd4 <select_mux+0x86>
    1cdc:	00 c0       	rjmp	.+0      	; 0x1cde <select_mux+0x90>
    1cde:	00 00       	nop
			_delay_ms(100);
			switch(range)
    1ce0:	c2 33       	cpi	r28, 0x32	; 50
    1ce2:	a1 f0       	breq	.+40     	; 0x1d0c <select_mux+0xbe>
    1ce4:	18 f4       	brcc	.+6      	; 0x1cec <select_mux+0x9e>
    1ce6:	c1 33       	cpi	r28, 0x31	; 49
    1ce8:	31 f0       	breq	.+12     	; 0x1cf6 <select_mux+0xa8>
    1cea:	31 c0       	rjmp	.+98     	; 0x1d4e <select_mux+0x100>
    1cec:	c3 33       	cpi	r28, 0x33	; 51
    1cee:	c9 f0       	breq	.+50     	; 0x1d22 <select_mux+0xd4>
    1cf0:	c4 33       	cpi	r28, 0x34	; 52
    1cf2:	11 f1       	breq	.+68     	; 0x1d38 <select_mux+0xea>
    1cf4:	2c c0       	rjmp	.+88     	; 0x1d4e <select_mux+0x100>
			{
				case '1'://2mA range
				{
					// Ammeter range 1
					DIO_SetPinValue(DIO_PORTB, A_MUX_3, DIO_HIGH);
    1cf6:	41 e0       	ldi	r20, 0x01	; 1
    1cf8:	66 e0       	ldi	r22, 0x06	; 6
    1cfa:	81 e0       	ldi	r24, 0x01	; 1
    1cfc:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <DIO_SetPinValue>
					DIO_SetPinValue(DIO_PORTB, B_MUX_3, DIO_HIGH);
    1d00:	41 e0       	ldi	r20, 0x01	; 1
    1d02:	67 e0       	ldi	r22, 0x07	; 7
    1d04:	81 e0       	ldi	r24, 0x01	; 1
    1d06:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <DIO_SetPinValue>
				}
				break;
    1d0a:	6a c0       	rjmp	.+212    	; 0x1de0 <select_mux+0x192>
				case '2'://20mA range
				{
					// Ammeter range 2
					DIO_SetPinValue(DIO_PORTB, A_MUX_3, DIO_LOW);
    1d0c:	40 e0       	ldi	r20, 0x00	; 0
    1d0e:	66 e0       	ldi	r22, 0x06	; 6
    1d10:	81 e0       	ldi	r24, 0x01	; 1
    1d12:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <DIO_SetPinValue>
					DIO_SetPinValue(DIO_PORTB, B_MUX_3, DIO_HIGH);
    1d16:	41 e0       	ldi	r20, 0x01	; 1
    1d18:	67 e0       	ldi	r22, 0x07	; 7
    1d1a:	81 e0       	ldi	r24, 0x01	; 1
    1d1c:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <DIO_SetPinValue>
				}
				break;
    1d20:	5f c0       	rjmp	.+190    	; 0x1de0 <select_mux+0x192>
				case '3'://200mA range
				{
					// ammeter range 3
					DIO_SetPinValue(DIO_PORTB, A_MUX_3, DIO_HIGH);
    1d22:	41 e0       	ldi	r20, 0x01	; 1
    1d24:	66 e0       	ldi	r22, 0x06	; 6
    1d26:	81 e0       	ldi	r24, 0x01	; 1
    1d28:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <DIO_SetPinValue>
					DIO_SetPinValue(DIO_PORTB, B_MUX_3, DIO_LOW);
    1d2c:	40 e0       	ldi	r20, 0x00	; 0
    1d2e:	67 e0       	ldi	r22, 0x07	; 7
    1d30:	81 e0       	ldi	r24, 0x01	; 1
    1d32:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <DIO_SetPinValue>
				}
				break;
    1d36:	54 c0       	rjmp	.+168    	; 0x1de0 <select_mux+0x192>
				case '4'://1A range
				{
					// ammeter range 4
					DIO_SetPinValue(DIO_PORTB, A_MUX_3, DIO_LOW);
    1d38:	40 e0       	ldi	r20, 0x00	; 0
    1d3a:	66 e0       	ldi	r22, 0x06	; 6
    1d3c:	81 e0       	ldi	r24, 0x01	; 1
    1d3e:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <DIO_SetPinValue>
					DIO_SetPinValue(DIO_PORTB, B_MUX_3, DIO_LOW);
    1d42:	40 e0       	ldi	r20, 0x00	; 0
    1d44:	67 e0       	ldi	r22, 0x07	; 7
    1d46:	81 e0       	ldi	r24, 0x01	; 1
    1d48:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <DIO_SetPinValue>
				}
				break;
    1d4c:	49 c0       	rjmp	.+146    	; 0x1de0 <select_mux+0x192>
				default:
				LCD_Display_String((uint8_t*)"Wrong, select a proper current range");
    1d4e:	85 e9       	ldi	r24, 0x95	; 149
    1d50:	91 e0       	ldi	r25, 0x01	; 1
    1d52:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_Display_String>
				break;
    1d56:	44 c0       	rjmp	.+136    	; 0x1de0 <select_mux+0x192>
			}
		}
		break;//for Ammeter device
		case '3': //voltage
		{
			DIO_SetPinValue(DIO_PORTB, A_MUX_2, DIO_HIGH);
    1d58:	41 e0       	ldi	r20, 0x01	; 1
    1d5a:	64 e0       	ldi	r22, 0x04	; 4
    1d5c:	81 e0       	ldi	r24, 0x01	; 1
    1d5e:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <DIO_SetPinValue>
    1d62:	9f ef       	ldi	r25, 0xFF	; 255
    1d64:	20 e7       	ldi	r18, 0x70	; 112
    1d66:	32 e0       	ldi	r19, 0x02	; 2
    1d68:	91 50       	subi	r25, 0x01	; 1
    1d6a:	20 40       	sbci	r18, 0x00	; 0
    1d6c:	30 40       	sbci	r19, 0x00	; 0
    1d6e:	e1 f7       	brne	.-8      	; 0x1d68 <select_mux+0x11a>
    1d70:	00 c0       	rjmp	.+0      	; 0x1d72 <select_mux+0x124>
    1d72:	00 00       	nop
			_delay_ms(100);
			switch(range)
    1d74:	c2 33       	cpi	r28, 0x32	; 50
    1d76:	a1 f0       	breq	.+40     	; 0x1da0 <select_mux+0x152>
    1d78:	18 f4       	brcc	.+6      	; 0x1d80 <select_mux+0x132>
    1d7a:	c1 33       	cpi	r28, 0x31	; 49
    1d7c:	31 f0       	breq	.+12     	; 0x1d8a <select_mux+0x13c>
    1d7e:	30 c0       	rjmp	.+96     	; 0x1de0 <select_mux+0x192>
    1d80:	c3 33       	cpi	r28, 0x33	; 51
    1d82:	c9 f0       	breq	.+50     	; 0x1db6 <select_mux+0x168>
    1d84:	c4 33       	cpi	r28, 0x34	; 52
    1d86:	11 f1       	breq	.+68     	; 0x1dcc <select_mux+0x17e>
    1d88:	2b c0       	rjmp	.+86     	; 0x1de0 <select_mux+0x192>
			{
				case '1':
				{
					// Volt range 1
					DIO_SetPinValue(DIO_PORTB, A_MUX_3, DIO_HIGH);
    1d8a:	41 e0       	ldi	r20, 0x01	; 1
    1d8c:	66 e0       	ldi	r22, 0x06	; 6
    1d8e:	81 e0       	ldi	r24, 0x01	; 1
    1d90:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <DIO_SetPinValue>
					DIO_SetPinValue(DIO_PORTB, B_MUX_3, DIO_HIGH);
    1d94:	41 e0       	ldi	r20, 0x01	; 1
    1d96:	67 e0       	ldi	r22, 0x07	; 7
    1d98:	81 e0       	ldi	r24, 0x01	; 1
    1d9a:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <DIO_SetPinValue>
				}
				break;
    1d9e:	20 c0       	rjmp	.+64     	; 0x1de0 <select_mux+0x192>
				case '2':
				{
					// Volt range 2
					DIO_SetPinValue(DIO_PORTB, A_MUX_3, DIO_LOW);
    1da0:	40 e0       	ldi	r20, 0x00	; 0
    1da2:	66 e0       	ldi	r22, 0x06	; 6
    1da4:	81 e0       	ldi	r24, 0x01	; 1
    1da6:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <DIO_SetPinValue>
					DIO_SetPinValue(DIO_PORTB, B_MUX_3, DIO_HIGH);
    1daa:	41 e0       	ldi	r20, 0x01	; 1
    1dac:	67 e0       	ldi	r22, 0x07	; 7
    1dae:	81 e0       	ldi	r24, 0x01	; 1
    1db0:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <DIO_SetPinValue>
				}
				break;
    1db4:	15 c0       	rjmp	.+42     	; 0x1de0 <select_mux+0x192>
				case '3':
				{
					// Volt range 3
					DIO_SetPinValue(DIO_PORTB, A_MUX_3, DIO_HIGH);
    1db6:	41 e0       	ldi	r20, 0x01	; 1
    1db8:	66 e0       	ldi	r22, 0x06	; 6
    1dba:	81 e0       	ldi	r24, 0x01	; 1
    1dbc:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <DIO_SetPinValue>
					DIO_SetPinValue(DIO_PORTB, B_MUX_3, DIO_LOW);
    1dc0:	40 e0       	ldi	r20, 0x00	; 0
    1dc2:	67 e0       	ldi	r22, 0x07	; 7
    1dc4:	81 e0       	ldi	r24, 0x01	; 1
    1dc6:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <DIO_SetPinValue>
				}
				break;
    1dca:	0a c0       	rjmp	.+20     	; 0x1de0 <select_mux+0x192>
				case '4':
				{
					// Volt range 4
					DIO_SetPinValue(DIO_PORTB, A_MUX_3, DIO_LOW);
    1dcc:	40 e0       	ldi	r20, 0x00	; 0
    1dce:	66 e0       	ldi	r22, 0x06	; 6
    1dd0:	81 e0       	ldi	r24, 0x01	; 1
    1dd2:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <DIO_SetPinValue>
					DIO_SetPinValue(DIO_PORTB, B_MUX_3, DIO_LOW);
    1dd6:	40 e0       	ldi	r20, 0x00	; 0
    1dd8:	67 e0       	ldi	r22, 0x07	; 7
    1dda:	81 e0       	ldi	r24, 0x01	; 1
    1ddc:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <DIO_SetPinValue>
			}
		}
		break;//for volt device
	}
	return;
}
    1de0:	cf 91       	pop	r28
    1de2:	08 95       	ret

00001de4 <select_LCD>:

uint8_t select_LCD(char row1[],char row2[],uint8_t num,uint8_t return_key){
    1de4:	8f 92       	push	r8
    1de6:	9f 92       	push	r9
    1de8:	af 92       	push	r10
    1dea:	cf 92       	push	r12
    1dec:	df 92       	push	r13
    1dee:	ef 92       	push	r14
    1df0:	ff 92       	push	r15
    1df2:	1f 93       	push	r17
    1df4:	cf 93       	push	r28
    1df6:	df 93       	push	r29
    1df8:	7c 01       	movw	r14, r24
    1dfa:	4b 01       	movw	r8, r22
    1dfc:	c4 2e       	mov	r12, r20
    1dfe:	a2 2e       	mov	r10, r18
	uint16_t count;
	uint8_t num_test;
	num_test=0;
	count=0;
	//choosing the ranges
	LCD_ClearScreen();
    1e00:	0e 94 8e 10 	call	0x211c	; 0x211c <LCD_ClearScreen>
	LCD_HomeScreen();
    1e04:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <LCD_HomeScreen>
	LCD_Display_String((uint8_t*)row1);
    1e08:	c7 01       	movw	r24, r14
    1e0a:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_Display_String>
	LCD_Display_Location(0,1);
    1e0e:	21 e0       	ldi	r18, 0x01	; 1
    1e10:	30 e0       	ldi	r19, 0x00	; 0
    1e12:	40 e0       	ldi	r20, 0x00	; 0
    1e14:	50 e0       	ldi	r21, 0x00	; 0
    1e16:	60 e0       	ldi	r22, 0x00	; 0
    1e18:	70 e0       	ldi	r23, 0x00	; 0
    1e1a:	cb 01       	movw	r24, r22
    1e1c:	0e 94 20 13 	call	0x2640	; 0x2640 <LCD_Display_Location>
	LCD_Display_String((uint8_t*)row2);
    1e20:	c4 01       	movw	r24, r8
    1e22:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_Display_String>
	keypad_read =KEYPAD_Read();
    1e26:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <KEYPAD_Read>
    1e2a:	d8 2e       	mov	r13, r24

uint8_t select_LCD(char row1[],char row2[],uint8_t num,uint8_t return_key){
	uint8_t keypad_read;
	uint16_t count;
	uint8_t num_test;
	num_test=0;
    1e2c:	10 e0       	ldi	r17, 0x00	; 0
	LCD_Display_String((uint8_t*)row1);
	LCD_Display_Location(0,1);
	LCD_Display_String((uint8_t*)row2);
	keypad_read =KEYPAD_Read();
	//waiting to select
	while (keypad_read !=return_key){
    1e2e:	79 c0       	rjmp	.+242    	; 0x1f22 <select_LCD+0x13e>
		for(uint8_t i=0;i<num;i++){
			if(keypad_read==('1'+i)){
    1e30:	4d 2d       	mov	r20, r13
    1e32:	50 e0       	ldi	r21, 0x00	; 0
    1e34:	28 2f       	mov	r18, r24
    1e36:	30 e0       	ldi	r19, 0x00	; 0
    1e38:	2f 5c       	subi	r18, 0xCF	; 207
    1e3a:	3f 4f       	sbci	r19, 0xFF	; 255
    1e3c:	42 17       	cp	r20, r18
    1e3e:	53 07       	cpc	r21, r19
    1e40:	31 f0       	breq	.+12     	; 0x1e4e <select_LCD+0x6a>
	LCD_Display_Location(0,1);
	LCD_Display_String((uint8_t*)row2);
	keypad_read =KEYPAD_Read();
	//waiting to select
	while (keypad_read !=return_key){
		for(uint8_t i=0;i<num;i++){
    1e42:	8f 5f       	subi	r24, 0xFF	; 255
    1e44:	01 c0       	rjmp	.+2      	; 0x1e48 <select_LCD+0x64>
    1e46:	80 e0       	ldi	r24, 0x00	; 0
    1e48:	8c 15       	cp	r24, r12
    1e4a:	90 f3       	brcs	.-28     	; 0x1e30 <select_LCD+0x4c>
    1e4c:	01 c0       	rjmp	.+2      	; 0x1e50 <select_LCD+0x6c>
			if(keypad_read==('1'+i)){
				num_test=1;
    1e4e:	11 e0       	ldi	r17, 0x01	; 1
				break;
			}
		}
		if(num_test==1)
    1e50:	11 30       	cpi	r17, 0x01	; 1
    1e52:	09 f4       	brne	.+2      	; 0x1e56 <select_LCD+0x72>
    1e54:	6a c0       	rjmp	.+212    	; 0x1f2a <select_LCD+0x146>
		break;
		keypad_read =KEYPAD_Read();
    1e56:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <KEYPAD_Read>
    1e5a:	d8 2e       	mov	r13, r24
    1e5c:	8f e0       	ldi	r24, 0x0F	; 15
    1e5e:	97 e2       	ldi	r25, 0x27	; 39
    1e60:	01 97       	sbiw	r24, 0x01	; 1
    1e62:	f1 f7       	brne	.-4      	; 0x1e60 <select_LCD+0x7c>
    1e64:	00 c0       	rjmp	.+0      	; 0x1e66 <select_LCD+0x82>
    1e66:	00 00       	nop
		_delay_ms(5);
		count++;
    1e68:	21 96       	adiw	r28, 0x01	; 1
		//waited for too long
		if(count>=500){
    1e6a:	c4 3f       	cpi	r28, 0xF4	; 244
    1e6c:	91 e0       	ldi	r25, 0x01	; 1
    1e6e:	d9 07       	cpc	r29, r25
    1e70:	08 f4       	brcc	.+2      	; 0x1e74 <select_LCD+0x90>
    1e72:	59 c0       	rjmp	.+178    	; 0x1f26 <select_LCD+0x142>
			count=0;
			LCD_ClearScreen();
    1e74:	0e 94 8e 10 	call	0x211c	; 0x211c <LCD_ClearScreen>
			LCD_HomeScreen();
    1e78:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <LCD_HomeScreen>
			LCD_Display_String((uint8_t*)"Ok I can do this");
    1e7c:	8a eb       	ldi	r24, 0xBA	; 186
    1e7e:	91 e0       	ldi	r25, 0x01	; 1
    1e80:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_Display_String>
			LCD_Display_Location(0,1);
    1e84:	21 e0       	ldi	r18, 0x01	; 1
    1e86:	30 e0       	ldi	r19, 0x00	; 0
    1e88:	40 e0       	ldi	r20, 0x00	; 0
    1e8a:	50 e0       	ldi	r21, 0x00	; 0
    1e8c:	60 e0       	ldi	r22, 0x00	; 0
    1e8e:	70 e0       	ldi	r23, 0x00	; 0
    1e90:	cb 01       	movw	r24, r22
    1e92:	0e 94 20 13 	call	0x2640	; 0x2640 <LCD_Display_Location>
			LCD_Display_String((uint8_t*)"all day! :)");
    1e96:	8b ec       	ldi	r24, 0xCB	; 203
    1e98:	91 e0       	ldi	r25, 0x01	; 1
    1e9a:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_Display_String>
		keypad_read =KEYPAD_Read();
		_delay_ms(5);
		count++;
		//waited for too long
		if(count>=500){
			count=0;
    1e9e:	c0 e0       	ldi	r28, 0x00	; 0
    1ea0:	d0 e0       	ldi	r29, 0x00	; 0
			LCD_ClearScreen();
			LCD_HomeScreen();
			LCD_Display_String((uint8_t*)"Ok I can do this");
			LCD_Display_Location(0,1);
			LCD_Display_String((uint8_t*)"all day! :)");
			while(keypad_read !=return_key && count<500){
    1ea2:	22 c0       	rjmp	.+68     	; 0x1ee8 <select_LCD+0x104>
				keypad_read =KEYPAD_Read();
    1ea4:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <KEYPAD_Read>
    1ea8:	d8 2e       	mov	r13, r24
    1eaa:	8f e0       	ldi	r24, 0x0F	; 15
    1eac:	97 e2       	ldi	r25, 0x27	; 39
    1eae:	01 97       	sbiw	r24, 0x01	; 1
    1eb0:	f1 f7       	brne	.-4      	; 0x1eae <select_LCD+0xca>
    1eb2:	00 c0       	rjmp	.+0      	; 0x1eb4 <select_LCD+0xd0>
    1eb4:	00 00       	nop
				_delay_ms(5);
				for(uint8_t i=0;i<num;i++){
    1eb6:	80 e0       	ldi	r24, 0x00	; 0
    1eb8:	0a c0       	rjmp	.+20     	; 0x1ece <select_LCD+0xea>
					if(keypad_read==('1'+i)){
    1eba:	4d 2d       	mov	r20, r13
    1ebc:	50 e0       	ldi	r21, 0x00	; 0
    1ebe:	28 2f       	mov	r18, r24
    1ec0:	30 e0       	ldi	r19, 0x00	; 0
    1ec2:	2f 5c       	subi	r18, 0xCF	; 207
    1ec4:	3f 4f       	sbci	r19, 0xFF	; 255
    1ec6:	42 17       	cp	r20, r18
    1ec8:	53 07       	cpc	r21, r19
    1eca:	21 f0       	breq	.+8      	; 0x1ed4 <select_LCD+0xf0>
			LCD_Display_Location(0,1);
			LCD_Display_String((uint8_t*)"all day! :)");
			while(keypad_read !=return_key && count<500){
				keypad_read =KEYPAD_Read();
				_delay_ms(5);
				for(uint8_t i=0;i<num;i++){
    1ecc:	8f 5f       	subi	r24, 0xFF	; 255
    1ece:	8c 15       	cp	r24, r12
    1ed0:	a0 f3       	brcs	.-24     	; 0x1eba <select_LCD+0xd6>
    1ed2:	01 c0       	rjmp	.+2      	; 0x1ed6 <select_LCD+0xf2>
					if(keypad_read==('1'+i)){
						num_test=1;
    1ed4:	11 e0       	ldi	r17, 0x01	; 1
						break;
					}
				}
				if(num_test==1)
    1ed6:	11 30       	cpi	r17, 0x01	; 1
    1ed8:	69 f0       	breq	.+26     	; 0x1ef4 <select_LCD+0x110>
    1eda:	8f e0       	ldi	r24, 0x0F	; 15
    1edc:	97 e2       	ldi	r25, 0x27	; 39
    1ede:	01 97       	sbiw	r24, 0x01	; 1
    1ee0:	f1 f7       	brne	.-4      	; 0x1ede <select_LCD+0xfa>
    1ee2:	00 c0       	rjmp	.+0      	; 0x1ee4 <select_LCD+0x100>
    1ee4:	00 00       	nop
				break;
				_delay_ms(5);
				count++;
    1ee6:	21 96       	adiw	r28, 0x01	; 1
			LCD_ClearScreen();
			LCD_HomeScreen();
			LCD_Display_String((uint8_t*)"Ok I can do this");
			LCD_Display_Location(0,1);
			LCD_Display_String((uint8_t*)"all day! :)");
			while(keypad_read !=return_key && count<500){
    1ee8:	da 14       	cp	r13, r10
    1eea:	21 f0       	breq	.+8      	; 0x1ef4 <select_LCD+0x110>
    1eec:	c4 3f       	cpi	r28, 0xF4	; 244
    1eee:	91 e0       	ldi	r25, 0x01	; 1
    1ef0:	d9 07       	cpc	r29, r25
    1ef2:	c0 f2       	brcs	.-80     	; 0x1ea4 <select_LCD+0xc0>
				_delay_ms(5);
				count++;
			}
			count=0;
			//ask again
			LCD_ClearScreen();
    1ef4:	0e 94 8e 10 	call	0x211c	; 0x211c <LCD_ClearScreen>
			LCD_HomeScreen();
    1ef8:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <LCD_HomeScreen>
			if(keypad_read!=return_key && num_test!=1){
    1efc:	da 14       	cp	r13, r10
    1efe:	89 f0       	breq	.+34     	; 0x1f22 <select_LCD+0x13e>
    1f00:	11 30       	cpi	r17, 0x01	; 1
    1f02:	79 f0       	breq	.+30     	; 0x1f22 <select_LCD+0x13e>
				LCD_Display_String((uint8_t*)row1);
    1f04:	c7 01       	movw	r24, r14
    1f06:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_Display_String>
				LCD_Display_Location(0,1);
    1f0a:	21 e0       	ldi	r18, 0x01	; 1
    1f0c:	30 e0       	ldi	r19, 0x00	; 0
    1f0e:	40 e0       	ldi	r20, 0x00	; 0
    1f10:	50 e0       	ldi	r21, 0x00	; 0
    1f12:	60 e0       	ldi	r22, 0x00	; 0
    1f14:	70 e0       	ldi	r23, 0x00	; 0
    1f16:	cb 01       	movw	r24, r22
    1f18:	0e 94 20 13 	call	0x2640	; 0x2640 <LCD_Display_Location>
				LCD_Display_String((uint8_t*)row2);
    1f1c:	c4 01       	movw	r24, r8
    1f1e:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_Display_String>

uint8_t select_LCD(char row1[],char row2[],uint8_t num,uint8_t return_key){
	uint8_t keypad_read;
	uint16_t count;
	uint8_t num_test;
	num_test=0;
    1f22:	c0 e0       	ldi	r28, 0x00	; 0
    1f24:	d0 e0       	ldi	r29, 0x00	; 0
	LCD_Display_String((uint8_t*)row1);
	LCD_Display_Location(0,1);
	LCD_Display_String((uint8_t*)row2);
	keypad_read =KEYPAD_Read();
	//waiting to select
	while (keypad_read !=return_key){
    1f26:	da 10       	cpse	r13, r10
    1f28:	8e cf       	rjmp	.-228    	; 0x1e46 <select_LCD+0x62>
				LCD_Display_String((uint8_t*)row2);
			}
		}
	}
	return keypad_read;
    1f2a:	8d 2d       	mov	r24, r13
    1f2c:	df 91       	pop	r29
    1f2e:	cf 91       	pop	r28
    1f30:	1f 91       	pop	r17
    1f32:	ff 90       	pop	r15
    1f34:	ef 90       	pop	r14
    1f36:	df 90       	pop	r13
    1f38:	cf 90       	pop	r12
    1f3a:	af 90       	pop	r10
    1f3c:	9f 90       	pop	r9
    1f3e:	8f 90       	pop	r8
    1f40:	08 95       	ret

00001f42 <KEYPAD_Initialize>:
    1f42:	41 e0       	ldi	r20, 0x01	; 1
    1f44:	60 e0       	ldi	r22, 0x00	; 0
    1f46:	82 e0       	ldi	r24, 0x02	; 2
    1f48:	0e 94 7d 15 	call	0x2afa	; 0x2afa <DIO_SetPinDirection>
    1f4c:	41 e0       	ldi	r20, 0x01	; 1
    1f4e:	61 e0       	ldi	r22, 0x01	; 1
    1f50:	82 e0       	ldi	r24, 0x02	; 2
    1f52:	0e 94 7d 15 	call	0x2afa	; 0x2afa <DIO_SetPinDirection>
    1f56:	41 e0       	ldi	r20, 0x01	; 1
    1f58:	62 e0       	ldi	r22, 0x02	; 2
    1f5a:	82 e0       	ldi	r24, 0x02	; 2
    1f5c:	0e 94 7d 15 	call	0x2afa	; 0x2afa <DIO_SetPinDirection>
    1f60:	41 e0       	ldi	r20, 0x01	; 1
    1f62:	63 e0       	ldi	r22, 0x03	; 3
    1f64:	82 e0       	ldi	r24, 0x02	; 2
    1f66:	0e 94 7d 15 	call	0x2afa	; 0x2afa <DIO_SetPinDirection>
    1f6a:	41 e0       	ldi	r20, 0x01	; 1
    1f6c:	60 e0       	ldi	r22, 0x00	; 0
    1f6e:	82 e0       	ldi	r24, 0x02	; 2
    1f70:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <DIO_SetPinValue>
    1f74:	41 e0       	ldi	r20, 0x01	; 1
    1f76:	61 e0       	ldi	r22, 0x01	; 1
    1f78:	82 e0       	ldi	r24, 0x02	; 2
    1f7a:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <DIO_SetPinValue>
    1f7e:	41 e0       	ldi	r20, 0x01	; 1
    1f80:	62 e0       	ldi	r22, 0x02	; 2
    1f82:	82 e0       	ldi	r24, 0x02	; 2
    1f84:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <DIO_SetPinValue>
    1f88:	41 e0       	ldi	r20, 0x01	; 1
    1f8a:	63 e0       	ldi	r22, 0x03	; 3
    1f8c:	82 e0       	ldi	r24, 0x02	; 2
    1f8e:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <DIO_SetPinValue>
    1f92:	40 e0       	ldi	r20, 0x00	; 0
    1f94:	64 e0       	ldi	r22, 0x04	; 4
    1f96:	82 e0       	ldi	r24, 0x02	; 2
    1f98:	0e 94 7d 15 	call	0x2afa	; 0x2afa <DIO_SetPinDirection>
    1f9c:	40 e0       	ldi	r20, 0x00	; 0
    1f9e:	65 e0       	ldi	r22, 0x05	; 5
    1fa0:	82 e0       	ldi	r24, 0x02	; 2
    1fa2:	0e 94 7d 15 	call	0x2afa	; 0x2afa <DIO_SetPinDirection>
    1fa6:	40 e0       	ldi	r20, 0x00	; 0
    1fa8:	66 e0       	ldi	r22, 0x06	; 6
    1faa:	82 e0       	ldi	r24, 0x02	; 2
    1fac:	0e 94 7d 15 	call	0x2afa	; 0x2afa <DIO_SetPinDirection>
    1fb0:	40 e0       	ldi	r20, 0x00	; 0
    1fb2:	67 e0       	ldi	r22, 0x07	; 7
    1fb4:	82 e0       	ldi	r24, 0x02	; 2
    1fb6:	0e 94 7d 15 	call	0x2afa	; 0x2afa <DIO_SetPinDirection>
    1fba:	64 e0       	ldi	r22, 0x04	; 4
    1fbc:	82 e0       	ldi	r24, 0x02	; 2
    1fbe:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <DIO_SetPinPullUp>
    1fc2:	65 e0       	ldi	r22, 0x05	; 5
    1fc4:	82 e0       	ldi	r24, 0x02	; 2
    1fc6:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <DIO_SetPinPullUp>
    1fca:	66 e0       	ldi	r22, 0x06	; 6
    1fcc:	82 e0       	ldi	r24, 0x02	; 2
    1fce:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <DIO_SetPinPullUp>
    1fd2:	67 e0       	ldi	r22, 0x07	; 7
    1fd4:	82 e0       	ldi	r24, 0x02	; 2
    1fd6:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <DIO_SetPinPullUp>
    1fda:	08 95       	ret

00001fdc <KEYPAD_Read>:
    1fdc:	1f 93       	push	r17
    1fde:	cf 93       	push	r28
    1fe0:	df 93       	push	r29
    1fe2:	16 e4       	ldi	r17, 0x46	; 70
    1fe4:	d0 e0       	ldi	r29, 0x00	; 0
    1fe6:	2f c0       	rjmp	.+94     	; 0x2046 <KEYPAD_Read+0x6a>
    1fe8:	40 e0       	ldi	r20, 0x00	; 0
    1fea:	6d 2f       	mov	r22, r29
    1fec:	82 e0       	ldi	r24, 0x02	; 2
    1fee:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <DIO_SetPinValue>
    1ff2:	c4 e0       	ldi	r28, 0x04	; 4
    1ff4:	20 c0       	rjmp	.+64     	; 0x2036 <KEYPAD_Read+0x5a>
    1ff6:	6c 2f       	mov	r22, r28
    1ff8:	82 e0       	ldi	r24, 0x02	; 2
    1ffa:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <DIO_GetPinValue>
    1ffe:	81 11       	cpse	r24, r1
    2000:	19 c0       	rjmp	.+50     	; 0x2034 <KEYPAD_Read+0x58>
    2002:	ec 2f       	mov	r30, r28
    2004:	f0 e0       	ldi	r31, 0x00	; 0
    2006:	34 97       	sbiw	r30, 0x04	; 4
    2008:	ee 0f       	add	r30, r30
    200a:	ff 1f       	adc	r31, r31
    200c:	ee 0f       	add	r30, r30
    200e:	ff 1f       	adc	r31, r31
    2010:	e9 52       	subi	r30, 0x29	; 41
    2012:	fe 4f       	sbci	r31, 0xFE	; 254
    2014:	ed 0f       	add	r30, r29
    2016:	f1 1d       	adc	r31, r1
    2018:	10 81       	ld	r17, Z
    201a:	04 c0       	rjmp	.+8      	; 0x2024 <KEYPAD_Read+0x48>
    201c:	6c 2f       	mov	r22, r28
    201e:	82 e0       	ldi	r24, 0x02	; 2
    2020:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <DIO_GetPinValue>
    2024:	88 23       	and	r24, r24
    2026:	d1 f3       	breq	.-12     	; 0x201c <KEYPAD_Read+0x40>
    2028:	8f ec       	ldi	r24, 0xCF	; 207
    202a:	97 e0       	ldi	r25, 0x07	; 7
    202c:	01 97       	sbiw	r24, 0x01	; 1
    202e:	f1 f7       	brne	.-4      	; 0x202c <KEYPAD_Read+0x50>
    2030:	00 c0       	rjmp	.+0      	; 0x2032 <KEYPAD_Read+0x56>
    2032:	00 00       	nop
    2034:	cf 5f       	subi	r28, 0xFF	; 255
    2036:	c8 30       	cpi	r28, 0x08	; 8
    2038:	f0 f2       	brcs	.-68     	; 0x1ff6 <KEYPAD_Read+0x1a>
    203a:	41 e0       	ldi	r20, 0x01	; 1
    203c:	6d 2f       	mov	r22, r29
    203e:	82 e0       	ldi	r24, 0x02	; 2
    2040:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <DIO_SetPinValue>
    2044:	df 5f       	subi	r29, 0xFF	; 255
    2046:	d4 30       	cpi	r29, 0x04	; 4
    2048:	78 f2       	brcs	.-98     	; 0x1fe8 <KEYPAD_Read+0xc>
    204a:	81 2f       	mov	r24, r17
    204c:	df 91       	pop	r29
    204e:	cf 91       	pop	r28
    2050:	1f 91       	pop	r17
    2052:	08 95       	ret

00002054 <LCD_Enable>:
	{
		LCD_ClearScreen();
		LCD_Send_Command(LCD_Command_1stLine);
	}
	else if(Character_Counter % 16 == 0)
	LCD_Send_Command(LCD_Command_2ndLine);
    2054:	41 e0       	ldi	r20, 0x01	; 1
    2056:	63 e0       	ldi	r22, 0x03	; 3
    2058:	81 e0       	ldi	r24, 0x01	; 1
    205a:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <DIO_SetPinValue>
    205e:	8f ec       	ldi	r24, 0xCF	; 207
    2060:	97 e0       	ldi	r25, 0x07	; 7
    2062:	01 97       	sbiw	r24, 0x01	; 1
    2064:	f1 f7       	brne	.-4      	; 0x2062 <LCD_Enable+0xe>
    2066:	00 c0       	rjmp	.+0      	; 0x2068 <LCD_Enable+0x14>
    2068:	00 00       	nop
    206a:	40 e0       	ldi	r20, 0x00	; 0
    206c:	63 e0       	ldi	r22, 0x03	; 3
    206e:	81 e0       	ldi	r24, 0x01	; 1
    2070:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <DIO_SetPinValue>
    2074:	08 95       	ret

00002076 <LCD_Write_Command>:
    2076:	cf 93       	push	r28
    2078:	c8 2f       	mov	r28, r24
    207a:	40 e0       	ldi	r20, 0x00	; 0
    207c:	61 e0       	ldi	r22, 0x01	; 1
    207e:	81 e0       	ldi	r24, 0x01	; 1
    2080:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <DIO_SetPinValue>
    2084:	40 e0       	ldi	r20, 0x00	; 0
    2086:	62 e0       	ldi	r22, 0x02	; 2
    2088:	81 e0       	ldi	r24, 0x01	; 1
    208a:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <DIO_SetPinValue>
    208e:	40 e0       	ldi	r20, 0x00	; 0
    2090:	63 e0       	ldi	r22, 0x03	; 3
    2092:	81 e0       	ldi	r24, 0x01	; 1
    2094:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <DIO_SetPinValue>
    2098:	8c 2f       	mov	r24, r28
    209a:	80 7f       	andi	r24, 0xF0	; 240
    209c:	82 bb       	out	0x12, r24	; 18
    209e:	41 e0       	ldi	r20, 0x01	; 1
    20a0:	63 e0       	ldi	r22, 0x03	; 3
    20a2:	81 e0       	ldi	r24, 0x01	; 1
    20a4:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <DIO_SetPinValue>
    20a8:	8f ec       	ldi	r24, 0xCF	; 207
    20aa:	97 e0       	ldi	r25, 0x07	; 7
    20ac:	01 97       	sbiw	r24, 0x01	; 1
    20ae:	f1 f7       	brne	.-4      	; 0x20ac <LCD_Write_Command+0x36>
    20b0:	00 c0       	rjmp	.+0      	; 0x20b2 <LCD_Write_Command+0x3c>
    20b2:	00 00       	nop
    20b4:	40 e0       	ldi	r20, 0x00	; 0
    20b6:	63 e0       	ldi	r22, 0x03	; 3
    20b8:	81 e0       	ldi	r24, 0x01	; 1
    20ba:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <DIO_SetPinValue>
    20be:	20 e1       	ldi	r18, 0x10	; 16
    20c0:	c2 9f       	mul	r28, r18
    20c2:	c0 01       	movw	r24, r0
    20c4:	11 24       	eor	r1, r1
    20c6:	82 bb       	out	0x12, r24	; 18
    20c8:	41 e0       	ldi	r20, 0x01	; 1
    20ca:	63 e0       	ldi	r22, 0x03	; 3
    20cc:	81 e0       	ldi	r24, 0x01	; 1
    20ce:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <DIO_SetPinValue>
    20d2:	8f ec       	ldi	r24, 0xCF	; 207
    20d4:	97 e0       	ldi	r25, 0x07	; 7
    20d6:	01 97       	sbiw	r24, 0x01	; 1
    20d8:	f1 f7       	brne	.-4      	; 0x20d6 <LCD_Write_Command+0x60>
    20da:	00 c0       	rjmp	.+0      	; 0x20dc <LCD_Write_Command+0x66>
    20dc:	00 00       	nop
    20de:	40 e0       	ldi	r20, 0x00	; 0
    20e0:	63 e0       	ldi	r22, 0x03	; 3
    20e2:	81 e0       	ldi	r24, 0x01	; 1
    20e4:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <DIO_SetPinValue>
    20e8:	8f e9       	ldi	r24, 0x9F	; 159
    20ea:	9f e0       	ldi	r25, 0x0F	; 15
    20ec:	01 97       	sbiw	r24, 0x01	; 1
    20ee:	f1 f7       	brne	.-4      	; 0x20ec <LCD_Write_Command+0x76>
    20f0:	00 c0       	rjmp	.+0      	; 0x20f2 <LCD_Write_Command+0x7c>
    20f2:	00 00       	nop
    20f4:	cf 91       	pop	r28
    20f6:	08 95       	ret

000020f8 <LCD_HomeScreen>:
    20f8:	82 e0       	ldi	r24, 0x02	; 2
    20fa:	0e 94 3b 10 	call	0x2076	; 0x2076 <LCD_Write_Command>
    20fe:	87 ed       	ldi	r24, 0xD7	; 215
    2100:	9e e0       	ldi	r25, 0x0E	; 14
    2102:	01 97       	sbiw	r24, 0x01	; 1
    2104:	f1 f7       	brne	.-4      	; 0x2102 <LCD_HomeScreen+0xa>
    2106:	00 c0       	rjmp	.+0      	; 0x2108 <LCD_HomeScreen+0x10>
    2108:	00 00       	nop
    210a:	10 92 a0 02 	sts	0x02A0, r1	; 0x8002a0 <Character_Counter>
    210e:	10 92 a1 02 	sts	0x02A1, r1	; 0x8002a1 <Character_Counter+0x1>
    2112:	10 92 a2 02 	sts	0x02A2, r1	; 0x8002a2 <Character_Counter+0x2>
    2116:	10 92 a3 02 	sts	0x02A3, r1	; 0x8002a3 <Character_Counter+0x3>
    211a:	08 95       	ret

0000211c <LCD_ClearScreen>:
    211c:	81 e0       	ldi	r24, 0x01	; 1
    211e:	0e 94 3b 10 	call	0x2076	; 0x2076 <LCD_Write_Command>
    2122:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <LCD_HomeScreen>
    2126:	87 ed       	ldi	r24, 0xD7	; 215
    2128:	9e e0       	ldi	r25, 0x0E	; 14
    212a:	01 97       	sbiw	r24, 0x01	; 1
    212c:	f1 f7       	brne	.-4      	; 0x212a <LCD_ClearScreen+0xe>
    212e:	00 c0       	rjmp	.+0      	; 0x2130 <LCD_ClearScreen+0x14>
    2130:	00 00       	nop
    2132:	08 95       	ret

00002134 <LCD_Initialize>:
    2134:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <__data_end>
    2138:	81 11       	cpse	r24, r1
    213a:	43 c0       	rjmp	.+134    	; 0x21c2 <LCD_Initialize+0x8e>
    213c:	41 e0       	ldi	r20, 0x01	; 1
    213e:	61 e0       	ldi	r22, 0x01	; 1
    2140:	81 e0       	ldi	r24, 0x01	; 1
    2142:	0e 94 7d 15 	call	0x2afa	; 0x2afa <DIO_SetPinDirection>
    2146:	41 e0       	ldi	r20, 0x01	; 1
    2148:	62 e0       	ldi	r22, 0x02	; 2
    214a:	81 e0       	ldi	r24, 0x01	; 1
    214c:	0e 94 7d 15 	call	0x2afa	; 0x2afa <DIO_SetPinDirection>
    2150:	41 e0       	ldi	r20, 0x01	; 1
    2152:	61 e0       	ldi	r22, 0x01	; 1
    2154:	81 e0       	ldi	r24, 0x01	; 1
    2156:	0e 94 7d 15 	call	0x2afa	; 0x2afa <DIO_SetPinDirection>
    215a:	41 e0       	ldi	r20, 0x01	; 1
    215c:	63 e0       	ldi	r22, 0x03	; 3
    215e:	81 e0       	ldi	r24, 0x01	; 1
    2160:	0e 94 7d 15 	call	0x2afa	; 0x2afa <DIO_SetPinDirection>
    2164:	41 e0       	ldi	r20, 0x01	; 1
    2166:	64 e0       	ldi	r22, 0x04	; 4
    2168:	81 e0       	ldi	r24, 0x01	; 1
    216a:	0e 94 7d 15 	call	0x2afa	; 0x2afa <DIO_SetPinDirection>
    216e:	41 e0       	ldi	r20, 0x01	; 1
    2170:	65 e0       	ldi	r22, 0x05	; 5
    2172:	81 e0       	ldi	r24, 0x01	; 1
    2174:	0e 94 7d 15 	call	0x2afa	; 0x2afa <DIO_SetPinDirection>
    2178:	41 e0       	ldi	r20, 0x01	; 1
    217a:	66 e0       	ldi	r22, 0x06	; 6
    217c:	81 e0       	ldi	r24, 0x01	; 1
    217e:	0e 94 7d 15 	call	0x2afa	; 0x2afa <DIO_SetPinDirection>
    2182:	8f e2       	ldi	r24, 0x2F	; 47
    2184:	95 e7       	ldi	r25, 0x75	; 117
    2186:	01 97       	sbiw	r24, 0x01	; 1
    2188:	f1 f7       	brne	.-4      	; 0x2186 <LCD_Initialize+0x52>
    218a:	00 c0       	rjmp	.+0      	; 0x218c <LCD_Initialize+0x58>
    218c:	00 00       	nop
    218e:	83 e3       	ldi	r24, 0x33	; 51
    2190:	0e 94 3b 10 	call	0x2076	; 0x2076 <LCD_Write_Command>
    2194:	82 e3       	ldi	r24, 0x32	; 50
    2196:	0e 94 3b 10 	call	0x2076	; 0x2076 <LCD_Write_Command>
    219a:	88 e2       	ldi	r24, 0x28	; 40
    219c:	0e 94 3b 10 	call	0x2076	; 0x2076 <LCD_Write_Command>
    21a0:	81 e0       	ldi	r24, 0x01	; 1
    21a2:	0e 94 3b 10 	call	0x2076	; 0x2076 <LCD_Write_Command>
    21a6:	82 e0       	ldi	r24, 0x02	; 2
    21a8:	0e 94 3b 10 	call	0x2076	; 0x2076 <LCD_Write_Command>
    21ac:	8c e0       	ldi	r24, 0x0C	; 12
    21ae:	0e 94 3b 10 	call	0x2076	; 0x2076 <LCD_Write_Command>
    21b2:	86 e0       	ldi	r24, 0x06	; 6
    21b4:	0e 94 3b 10 	call	0x2076	; 0x2076 <LCD_Write_Command>
    21b8:	0e 94 8e 10 	call	0x211c	; 0x211c <LCD_ClearScreen>
    21bc:	81 e0       	ldi	r24, 0x01	; 1
    21be:	80 93 9e 02 	sts	0x029E, r24	; 0x80029e <__data_end>
    21c2:	08 95       	ret

000021c4 <LCD_Display_Character>:
    21c4:	cf 93       	push	r28
    21c6:	c8 2f       	mov	r28, r24
    21c8:	41 e0       	ldi	r20, 0x01	; 1
    21ca:	61 e0       	ldi	r22, 0x01	; 1
    21cc:	81 e0       	ldi	r24, 0x01	; 1
    21ce:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <DIO_SetPinValue>
    21d2:	40 e0       	ldi	r20, 0x00	; 0
    21d4:	62 e0       	ldi	r22, 0x02	; 2
    21d6:	81 e0       	ldi	r24, 0x01	; 1
    21d8:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <DIO_SetPinValue>
    21dc:	40 e0       	ldi	r20, 0x00	; 0
    21de:	63 e0       	ldi	r22, 0x03	; 3
    21e0:	81 e0       	ldi	r24, 0x01	; 1
    21e2:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <DIO_SetPinValue>
    21e6:	8c 2f       	mov	r24, r28
    21e8:	80 7f       	andi	r24, 0xF0	; 240
    21ea:	82 bb       	out	0x12, r24	; 18
    21ec:	41 e0       	ldi	r20, 0x01	; 1
    21ee:	63 e0       	ldi	r22, 0x03	; 3
    21f0:	81 e0       	ldi	r24, 0x01	; 1
    21f2:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <DIO_SetPinValue>
    21f6:	8f ec       	ldi	r24, 0xCF	; 207
    21f8:	97 e0       	ldi	r25, 0x07	; 7
    21fa:	01 97       	sbiw	r24, 0x01	; 1
    21fc:	f1 f7       	brne	.-4      	; 0x21fa <LCD_Display_Character+0x36>
    21fe:	00 c0       	rjmp	.+0      	; 0x2200 <LCD_Display_Character+0x3c>
    2200:	00 00       	nop
    2202:	40 e0       	ldi	r20, 0x00	; 0
    2204:	63 e0       	ldi	r22, 0x03	; 3
    2206:	81 e0       	ldi	r24, 0x01	; 1
    2208:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <DIO_SetPinValue>
    220c:	20 e1       	ldi	r18, 0x10	; 16
    220e:	c2 9f       	mul	r28, r18
    2210:	c0 01       	movw	r24, r0
    2212:	11 24       	eor	r1, r1
    2214:	82 bb       	out	0x12, r24	; 18
    2216:	41 e0       	ldi	r20, 0x01	; 1
    2218:	63 e0       	ldi	r22, 0x03	; 3
    221a:	81 e0       	ldi	r24, 0x01	; 1
    221c:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <DIO_SetPinValue>
    2220:	8f ec       	ldi	r24, 0xCF	; 207
    2222:	97 e0       	ldi	r25, 0x07	; 7
    2224:	01 97       	sbiw	r24, 0x01	; 1
    2226:	f1 f7       	brne	.-4      	; 0x2224 <LCD_Display_Character+0x60>
    2228:	00 c0       	rjmp	.+0      	; 0x222a <LCD_Display_Character+0x66>
    222a:	00 00       	nop
    222c:	40 e0       	ldi	r20, 0x00	; 0
    222e:	63 e0       	ldi	r22, 0x03	; 3
    2230:	81 e0       	ldi	r24, 0x01	; 1
    2232:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <DIO_SetPinValue>
    2236:	8f e9       	ldi	r24, 0x9F	; 159
    2238:	9f e0       	ldi	r25, 0x0F	; 15
    223a:	01 97       	sbiw	r24, 0x01	; 1
    223c:	f1 f7       	brne	.-4      	; 0x223a <LCD_Display_Character+0x76>
    223e:	00 c0       	rjmp	.+0      	; 0x2240 <LCD_Display_Character+0x7c>
    2240:	00 00       	nop
    2242:	cf 91       	pop	r28
    2244:	08 95       	ret

00002246 <LCD_Display_String>:
    2246:	cf 93       	push	r28
    2248:	df 93       	push	r29
    224a:	ec 01       	movw	r28, r24
    224c:	09 c0       	rjmp	.+18     	; 0x2260 <LCD_Display_String+0x1a>
    224e:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <LCD_Display_Character>
    2252:	8f e0       	ldi	r24, 0x0F	; 15
    2254:	97 e2       	ldi	r25, 0x27	; 39
    2256:	01 97       	sbiw	r24, 0x01	; 1
    2258:	f1 f7       	brne	.-4      	; 0x2256 <LCD_Display_String+0x10>
    225a:	00 c0       	rjmp	.+0      	; 0x225c <LCD_Display_String+0x16>
    225c:	00 00       	nop
    225e:	21 96       	adiw	r28, 0x01	; 1
    2260:	88 81       	ld	r24, Y
    2262:	81 11       	cpse	r24, r1
    2264:	f4 cf       	rjmp	.-24     	; 0x224e <LCD_Display_String+0x8>
    2266:	df 91       	pop	r29
    2268:	cf 91       	pop	r28
    226a:	08 95       	ret

0000226c <LCD_Reverse_String>:
    226c:	9c 01       	movw	r18, r24
    226e:	61 50       	subi	r22, 0x01	; 1
    2270:	90 e0       	ldi	r25, 0x00	; 0
    2272:	0c c0       	rjmp	.+24     	; 0x228c <LCD_Reverse_String+0x20>
    2274:	d9 01       	movw	r26, r18
    2276:	a9 0f       	add	r26, r25
    2278:	b1 1d       	adc	r27, r1
    227a:	8c 91       	ld	r24, X
    227c:	9f 5f       	subi	r25, 0xFF	; 255
    227e:	f9 01       	movw	r30, r18
    2280:	e6 0f       	add	r30, r22
    2282:	f1 1d       	adc	r31, r1
    2284:	40 81       	ld	r20, Z
    2286:	4c 93       	st	X, r20
    2288:	61 50       	subi	r22, 0x01	; 1
    228a:	80 83       	st	Z, r24
    228c:	96 17       	cp	r25, r22
    228e:	90 f3       	brcs	.-28     	; 0x2274 <LCD_Reverse_String+0x8>
    2290:	08 95       	ret

00002292 <LCD_IntToString>:
    2292:	ef 92       	push	r14
    2294:	ff 92       	push	r15
    2296:	0f 93       	push	r16
    2298:	1f 93       	push	r17
    229a:	cf 93       	push	r28
    229c:	df 93       	push	r29
    229e:	8a 01       	movw	r16, r20
    22a0:	d2 2f       	mov	r29, r18
    22a2:	61 15       	cp	r22, r1
    22a4:	71 05       	cpc	r23, r1
    22a6:	81 05       	cpc	r24, r1
    22a8:	91 05       	cpc	r25, r1
    22aa:	c1 f4       	brne	.+48     	; 0x22dc <LCD_IntToString+0x4a>
    22ac:	80 e3       	ldi	r24, 0x30	; 48
    22ae:	fa 01       	movw	r30, r20
    22b0:	80 83       	st	Z, r24
    22b2:	11 82       	std	Z+1, r1	; 0x01
    22b4:	81 e0       	ldi	r24, 0x01	; 1
    22b6:	2a c0       	rjmp	.+84     	; 0x230c <LCD_IntToString+0x7a>
    22b8:	78 01       	movw	r14, r16
    22ba:	ec 0e       	add	r14, r28
    22bc:	f1 1c       	adc	r15, r1
    22be:	2a e0       	ldi	r18, 0x0A	; 10
    22c0:	30 e0       	ldi	r19, 0x00	; 0
    22c2:	40 e0       	ldi	r20, 0x00	; 0
    22c4:	50 e0       	ldi	r21, 0x00	; 0
    22c6:	0e 94 c9 1a 	call	0x3592	; 0x3592 <__udivmodsi4>
    22ca:	60 5d       	subi	r22, 0xD0	; 208
    22cc:	f7 01       	movw	r30, r14
    22ce:	60 83       	st	Z, r22
    22d0:	62 2f       	mov	r22, r18
    22d2:	73 2f       	mov	r23, r19
    22d4:	84 2f       	mov	r24, r20
    22d6:	95 2f       	mov	r25, r21
    22d8:	cf 5f       	subi	r28, 0xFF	; 255
    22da:	01 c0       	rjmp	.+2      	; 0x22de <LCD_IntToString+0x4c>
    22dc:	c0 e0       	ldi	r28, 0x00	; 0
    22de:	61 15       	cp	r22, r1
    22e0:	71 05       	cpc	r23, r1
    22e2:	81 05       	cpc	r24, r1
    22e4:	91 05       	cpc	r25, r1
    22e6:	41 f7       	brne	.-48     	; 0x22b8 <LCD_IntToString+0x26>
    22e8:	06 c0       	rjmp	.+12     	; 0x22f6 <LCD_IntToString+0x64>
    22ea:	f8 01       	movw	r30, r16
    22ec:	ec 0f       	add	r30, r28
    22ee:	f1 1d       	adc	r31, r1
    22f0:	80 e3       	ldi	r24, 0x30	; 48
    22f2:	80 83       	st	Z, r24
    22f4:	cf 5f       	subi	r28, 0xFF	; 255
    22f6:	cd 17       	cp	r28, r29
    22f8:	c0 f3       	brcs	.-16     	; 0x22ea <LCD_IntToString+0x58>
    22fa:	6c 2f       	mov	r22, r28
    22fc:	c8 01       	movw	r24, r16
    22fe:	0e 94 36 11 	call	0x226c	; 0x226c <LCD_Reverse_String>
    2302:	f8 01       	movw	r30, r16
    2304:	ec 0f       	add	r30, r28
    2306:	f1 1d       	adc	r31, r1
    2308:	10 82       	st	Z, r1
    230a:	8c 2f       	mov	r24, r28
    230c:	df 91       	pop	r29
    230e:	cf 91       	pop	r28
    2310:	1f 91       	pop	r17
    2312:	0f 91       	pop	r16
    2314:	ff 90       	pop	r15
    2316:	ef 90       	pop	r14
    2318:	08 95       	ret

0000231a <LCD_Display_Number>:
    231a:	cf 93       	push	r28
    231c:	df 93       	push	r29
    231e:	cd b7       	in	r28, 0x3d	; 61
    2320:	de b7       	in	r29, 0x3e	; 62
    2322:	a1 97       	sbiw	r28, 0x21	; 33
    2324:	0f b6       	in	r0, 0x3f	; 63
    2326:	f8 94       	cli
    2328:	de bf       	out	0x3e, r29	; 62
    232a:	0f be       	out	0x3f, r0	; 63
    232c:	cd bf       	out	0x3d, r28	; 61
    232e:	20 e0       	ldi	r18, 0x00	; 0
    2330:	ae 01       	movw	r20, r28
    2332:	4f 5f       	subi	r20, 0xFF	; 255
    2334:	5f 4f       	sbci	r21, 0xFF	; 255
    2336:	0e 94 49 11 	call	0x2292	; 0x2292 <LCD_IntToString>
    233a:	ce 01       	movw	r24, r28
    233c:	01 96       	adiw	r24, 0x01	; 1
    233e:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_Display_String>
    2342:	a1 96       	adiw	r28, 0x21	; 33
    2344:	0f b6       	in	r0, 0x3f	; 63
    2346:	f8 94       	cli
    2348:	de bf       	out	0x3e, r29	; 62
    234a:	0f be       	out	0x3f, r0	; 63
    234c:	cd bf       	out	0x3d, r28	; 61
    234e:	df 91       	pop	r29
    2350:	cf 91       	pop	r28
    2352:	08 95       	ret

00002354 <LCD_FloatToString>:
    2354:	4f 92       	push	r4
    2356:	5f 92       	push	r5
    2358:	6f 92       	push	r6
    235a:	7f 92       	push	r7
    235c:	8f 92       	push	r8
    235e:	9f 92       	push	r9
    2360:	af 92       	push	r10
    2362:	bf 92       	push	r11
    2364:	cf 92       	push	r12
    2366:	df 92       	push	r13
    2368:	ef 92       	push	r14
    236a:	ff 92       	push	r15
    236c:	1f 93       	push	r17
    236e:	cf 93       	push	r28
    2370:	df 93       	push	r29
    2372:	6b 01       	movw	r12, r22
    2374:	7c 01       	movw	r14, r24
    2376:	ea 01       	movw	r28, r20
    2378:	12 2f       	mov	r17, r18
    237a:	20 e0       	ldi	r18, 0x00	; 0
    237c:	30 e0       	ldi	r19, 0x00	; 0
    237e:	40 e8       	ldi	r20, 0x80	; 128
    2380:	5f e3       	ldi	r21, 0x3F	; 63
    2382:	0e 94 d2 18 	call	0x31a4	; 0x31a4 <__gesf2>
    2386:	88 23       	and	r24, r24
    2388:	0c f4       	brge	.+2      	; 0x238c <LCD_FloatToString+0x38>
    238a:	44 c0       	rjmp	.+136    	; 0x2414 <LCD_FloatToString+0xc0>
    238c:	c7 01       	movw	r24, r14
    238e:	b6 01       	movw	r22, r12
    2390:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <__fixunssfsi>
    2394:	4b 01       	movw	r8, r22
    2396:	5c 01       	movw	r10, r24
    2398:	0e 94 10 18 	call	0x3020	; 0x3020 <__floatunsisf>
    239c:	9b 01       	movw	r18, r22
    239e:	ac 01       	movw	r20, r24
    23a0:	c7 01       	movw	r24, r14
    23a2:	b6 01       	movw	r22, r12
    23a4:	0e 94 c1 16 	call	0x2d82	; 0x2d82 <__subsf3>
    23a8:	2b 01       	movw	r4, r22
    23aa:	3c 01       	movw	r6, r24
    23ac:	20 e0       	ldi	r18, 0x00	; 0
    23ae:	ae 01       	movw	r20, r28
    23b0:	c5 01       	movw	r24, r10
    23b2:	b4 01       	movw	r22, r8
    23b4:	0e 94 49 11 	call	0x2292	; 0x2292 <LCD_IntToString>
    23b8:	e8 2e       	mov	r14, r24
    23ba:	f1 2c       	mov	r15, r1
    23bc:	fe 01       	movw	r30, r28
    23be:	ee 0d       	add	r30, r14
    23c0:	ff 1d       	adc	r31, r15
    23c2:	8e e2       	ldi	r24, 0x2E	; 46
    23c4:	80 83       	st	Z, r24
    23c6:	61 2f       	mov	r22, r17
    23c8:	70 e0       	ldi	r23, 0x00	; 0
    23ca:	80 e0       	ldi	r24, 0x00	; 0
    23cc:	90 e0       	ldi	r25, 0x00	; 0
    23ce:	0e 94 10 18 	call	0x3020	; 0x3020 <__floatunsisf>
    23d2:	9b 01       	movw	r18, r22
    23d4:	ac 01       	movw	r20, r24
    23d6:	60 e0       	ldi	r22, 0x00	; 0
    23d8:	70 e0       	ldi	r23, 0x00	; 0
    23da:	80 e2       	ldi	r24, 0x20	; 32
    23dc:	91 e4       	ldi	r25, 0x41	; 65
    23de:	0e 94 44 19 	call	0x3288	; 0x3288 <pow>
    23e2:	9b 01       	movw	r18, r22
    23e4:	ac 01       	movw	r20, r24
    23e6:	c3 01       	movw	r24, r6
    23e8:	b2 01       	movw	r22, r4
    23ea:	0e 94 d7 18 	call	0x31ae	; 0x31ae <__mulsf3>
    23ee:	2f ef       	ldi	r18, 0xFF	; 255
    23f0:	e2 1a       	sub	r14, r18
    23f2:	f2 0a       	sbc	r15, r18
    23f4:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <__fixunssfdi>
    23f8:	a2 2f       	mov	r26, r18
    23fa:	f4 2f       	mov	r31, r20
    23fc:	e5 2f       	mov	r30, r21
    23fe:	ae 01       	movw	r20, r28
    2400:	4e 0d       	add	r20, r14
    2402:	5f 1d       	adc	r21, r15
    2404:	21 2f       	mov	r18, r17
    2406:	6a 2f       	mov	r22, r26
    2408:	73 2f       	mov	r23, r19
    240a:	8f 2f       	mov	r24, r31
    240c:	9e 2f       	mov	r25, r30
    240e:	0e 94 49 11 	call	0x2292	; 0x2292 <LCD_IntToString>
    2412:	b7 c0       	rjmp	.+366    	; 0x2582 <LCD_FloatToString+0x22e>
    2414:	20 e0       	ldi	r18, 0x00	; 0
    2416:	30 e0       	ldi	r19, 0x00	; 0
    2418:	a9 01       	movw	r20, r18
    241a:	c7 01       	movw	r24, r14
    241c:	b6 01       	movw	r22, r12
    241e:	0e 94 d2 18 	call	0x31a4	; 0x31a4 <__gesf2>
    2422:	88 23       	and	r24, r24
    2424:	44 f1       	brlt	.+80     	; 0x2476 <LCD_FloatToString+0x122>
    2426:	80 e3       	ldi	r24, 0x30	; 48
    2428:	88 83       	st	Y, r24
    242a:	8e e2       	ldi	r24, 0x2E	; 46
    242c:	89 83       	std	Y+1, r24	; 0x01
    242e:	61 2f       	mov	r22, r17
    2430:	70 e0       	ldi	r23, 0x00	; 0
    2432:	80 e0       	ldi	r24, 0x00	; 0
    2434:	90 e0       	ldi	r25, 0x00	; 0
    2436:	0e 94 10 18 	call	0x3020	; 0x3020 <__floatunsisf>
    243a:	9b 01       	movw	r18, r22
    243c:	ac 01       	movw	r20, r24
    243e:	60 e0       	ldi	r22, 0x00	; 0
    2440:	70 e0       	ldi	r23, 0x00	; 0
    2442:	80 e2       	ldi	r24, 0x20	; 32
    2444:	91 e4       	ldi	r25, 0x41	; 65
    2446:	0e 94 44 19 	call	0x3288	; 0x3288 <pow>
    244a:	9b 01       	movw	r18, r22
    244c:	ac 01       	movw	r20, r24
    244e:	c7 01       	movw	r24, r14
    2450:	b6 01       	movw	r22, r12
    2452:	0e 94 d7 18 	call	0x31ae	; 0x31ae <__mulsf3>
    2456:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <__fixunssfdi>
    245a:	a2 2f       	mov	r26, r18
    245c:	f4 2f       	mov	r31, r20
    245e:	e5 2f       	mov	r30, r21
    2460:	ae 01       	movw	r20, r28
    2462:	4e 5f       	subi	r20, 0xFE	; 254
    2464:	5f 4f       	sbci	r21, 0xFF	; 255
    2466:	21 2f       	mov	r18, r17
    2468:	6a 2f       	mov	r22, r26
    246a:	73 2f       	mov	r23, r19
    246c:	8f 2f       	mov	r24, r31
    246e:	9e 2f       	mov	r25, r30
    2470:	0e 94 49 11 	call	0x2292	; 0x2292 <LCD_IntToString>
    2474:	86 c0       	rjmp	.+268    	; 0x2582 <LCD_FloatToString+0x22e>
    2476:	20 e0       	ldi	r18, 0x00	; 0
    2478:	30 e0       	ldi	r19, 0x00	; 0
    247a:	40 e8       	ldi	r20, 0x80	; 128
    247c:	5f eb       	ldi	r21, 0xBF	; 191
    247e:	c7 01       	movw	r24, r14
    2480:	b6 01       	movw	r22, r12
    2482:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <__cmpsf2>
    2486:	18 16       	cp	r1, r24
    2488:	0c f4       	brge	.+2      	; 0x248c <LCD_FloatToString+0x138>
    248a:	4e c0       	rjmp	.+156    	; 0x2528 <LCD_FloatToString+0x1d4>
    248c:	8d e2       	ldi	r24, 0x2D	; 45
    248e:	88 83       	st	Y, r24
    2490:	87 ee       	ldi	r24, 0xE7	; 231
    2492:	91 e0       	ldi	r25, 0x01	; 1
    2494:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_Display_String>
    2498:	f7 fa       	bst	r15, 7
    249a:	f0 94       	com	r15
    249c:	f7 f8       	bld	r15, 7
    249e:	f0 94       	com	r15
    24a0:	c7 01       	movw	r24, r14
    24a2:	b6 01       	movw	r22, r12
    24a4:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <__fixunssfsi>
    24a8:	4b 01       	movw	r8, r22
    24aa:	5c 01       	movw	r10, r24
    24ac:	0e 94 10 18 	call	0x3020	; 0x3020 <__floatunsisf>
    24b0:	9b 01       	movw	r18, r22
    24b2:	ac 01       	movw	r20, r24
    24b4:	c7 01       	movw	r24, r14
    24b6:	b6 01       	movw	r22, r12
    24b8:	0e 94 c1 16 	call	0x2d82	; 0x2d82 <__subsf3>
    24bc:	2b 01       	movw	r4, r22
    24be:	3c 01       	movw	r6, r24
    24c0:	20 e0       	ldi	r18, 0x00	; 0
    24c2:	ae 01       	movw	r20, r28
    24c4:	c5 01       	movw	r24, r10
    24c6:	b4 01       	movw	r22, r8
    24c8:	0e 94 49 11 	call	0x2292	; 0x2292 <LCD_IntToString>
    24cc:	e8 2e       	mov	r14, r24
    24ce:	f1 2c       	mov	r15, r1
    24d0:	fe 01       	movw	r30, r28
    24d2:	ee 0d       	add	r30, r14
    24d4:	ff 1d       	adc	r31, r15
    24d6:	8e e2       	ldi	r24, 0x2E	; 46
    24d8:	80 83       	st	Z, r24
    24da:	61 2f       	mov	r22, r17
    24dc:	70 e0       	ldi	r23, 0x00	; 0
    24de:	80 e0       	ldi	r24, 0x00	; 0
    24e0:	90 e0       	ldi	r25, 0x00	; 0
    24e2:	0e 94 10 18 	call	0x3020	; 0x3020 <__floatunsisf>
    24e6:	9b 01       	movw	r18, r22
    24e8:	ac 01       	movw	r20, r24
    24ea:	60 e0       	ldi	r22, 0x00	; 0
    24ec:	70 e0       	ldi	r23, 0x00	; 0
    24ee:	80 e2       	ldi	r24, 0x20	; 32
    24f0:	91 e4       	ldi	r25, 0x41	; 65
    24f2:	0e 94 44 19 	call	0x3288	; 0x3288 <pow>
    24f6:	9b 01       	movw	r18, r22
    24f8:	ac 01       	movw	r20, r24
    24fa:	c3 01       	movw	r24, r6
    24fc:	b2 01       	movw	r22, r4
    24fe:	0e 94 d7 18 	call	0x31ae	; 0x31ae <__mulsf3>
    2502:	2f ef       	ldi	r18, 0xFF	; 255
    2504:	e2 1a       	sub	r14, r18
    2506:	f2 0a       	sbc	r15, r18
    2508:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <__fixunssfdi>
    250c:	a2 2f       	mov	r26, r18
    250e:	f4 2f       	mov	r31, r20
    2510:	e5 2f       	mov	r30, r21
    2512:	ae 01       	movw	r20, r28
    2514:	4e 0d       	add	r20, r14
    2516:	5f 1d       	adc	r21, r15
    2518:	21 2f       	mov	r18, r17
    251a:	6a 2f       	mov	r22, r26
    251c:	73 2f       	mov	r23, r19
    251e:	8f 2f       	mov	r24, r31
    2520:	9e 2f       	mov	r25, r30
    2522:	0e 94 49 11 	call	0x2292	; 0x2292 <LCD_IntToString>
    2526:	2d c0       	rjmp	.+90     	; 0x2582 <LCD_FloatToString+0x22e>
    2528:	8d e2       	ldi	r24, 0x2D	; 45
    252a:	88 83       	st	Y, r24
    252c:	80 e3       	ldi	r24, 0x30	; 48
    252e:	89 83       	std	Y+1, r24	; 0x01
    2530:	8e e2       	ldi	r24, 0x2E	; 46
    2532:	8a 83       	std	Y+2, r24	; 0x02
    2534:	f7 fa       	bst	r15, 7
    2536:	f0 94       	com	r15
    2538:	f7 f8       	bld	r15, 7
    253a:	f0 94       	com	r15
    253c:	61 2f       	mov	r22, r17
    253e:	70 e0       	ldi	r23, 0x00	; 0
    2540:	80 e0       	ldi	r24, 0x00	; 0
    2542:	90 e0       	ldi	r25, 0x00	; 0
    2544:	0e 94 10 18 	call	0x3020	; 0x3020 <__floatunsisf>
    2548:	9b 01       	movw	r18, r22
    254a:	ac 01       	movw	r20, r24
    254c:	60 e0       	ldi	r22, 0x00	; 0
    254e:	70 e0       	ldi	r23, 0x00	; 0
    2550:	80 e2       	ldi	r24, 0x20	; 32
    2552:	91 e4       	ldi	r25, 0x41	; 65
    2554:	0e 94 44 19 	call	0x3288	; 0x3288 <pow>
    2558:	9b 01       	movw	r18, r22
    255a:	ac 01       	movw	r20, r24
    255c:	c7 01       	movw	r24, r14
    255e:	b6 01       	movw	r22, r12
    2560:	0e 94 d7 18 	call	0x31ae	; 0x31ae <__mulsf3>
    2564:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <__fixunssfdi>
    2568:	a2 2f       	mov	r26, r18
    256a:	f4 2f       	mov	r31, r20
    256c:	e5 2f       	mov	r30, r21
    256e:	ae 01       	movw	r20, r28
    2570:	4d 5f       	subi	r20, 0xFD	; 253
    2572:	5f 4f       	sbci	r21, 0xFF	; 255
    2574:	21 2f       	mov	r18, r17
    2576:	6a 2f       	mov	r22, r26
    2578:	73 2f       	mov	r23, r19
    257a:	8f 2f       	mov	r24, r31
    257c:	9e 2f       	mov	r25, r30
    257e:	0e 94 49 11 	call	0x2292	; 0x2292 <LCD_IntToString>
    2582:	df 91       	pop	r29
    2584:	cf 91       	pop	r28
    2586:	1f 91       	pop	r17
    2588:	ff 90       	pop	r15
    258a:	ef 90       	pop	r14
    258c:	df 90       	pop	r13
    258e:	cf 90       	pop	r12
    2590:	bf 90       	pop	r11
    2592:	af 90       	pop	r10
    2594:	9f 90       	pop	r9
    2596:	8f 90       	pop	r8
    2598:	7f 90       	pop	r7
    259a:	6f 90       	pop	r6
    259c:	5f 90       	pop	r5
    259e:	4f 90       	pop	r4
    25a0:	08 95       	ret

000025a2 <LCD_Display_FloatNumber>:
    25a2:	cf 93       	push	r28
    25a4:	df 93       	push	r29
    25a6:	cd b7       	in	r28, 0x3d	; 61
    25a8:	de b7       	in	r29, 0x3e	; 62
    25aa:	a1 97       	sbiw	r28, 0x21	; 33
    25ac:	0f b6       	in	r0, 0x3f	; 63
    25ae:	f8 94       	cli
    25b0:	de bf       	out	0x3e, r29	; 62
    25b2:	0f be       	out	0x3f, r0	; 63
    25b4:	cd bf       	out	0x3d, r28	; 61
    25b6:	24 2f       	mov	r18, r20
    25b8:	ae 01       	movw	r20, r28
    25ba:	4f 5f       	subi	r20, 0xFF	; 255
    25bc:	5f 4f       	sbci	r21, 0xFF	; 255
    25be:	0e 94 aa 11 	call	0x2354	; 0x2354 <LCD_FloatToString>
    25c2:	ce 01       	movw	r24, r28
    25c4:	01 96       	adiw	r24, 0x01	; 1
    25c6:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_Display_String>
    25ca:	a1 96       	adiw	r28, 0x21	; 33
    25cc:	0f b6       	in	r0, 0x3f	; 63
    25ce:	f8 94       	cli
    25d0:	de bf       	out	0x3e, r29	; 62
    25d2:	0f be       	out	0x3f, r0	; 63
    25d4:	cd bf       	out	0x3d, r28	; 61
    25d6:	df 91       	pop	r29
    25d8:	cf 91       	pop	r28
    25da:	08 95       	ret

000025dc <LCD_Send_Command>:
    25dc:	cf 93       	push	r28
    25de:	c8 2f       	mov	r28, r24
    25e0:	40 e0       	ldi	r20, 0x00	; 0
    25e2:	61 e0       	ldi	r22, 0x01	; 1
    25e4:	81 e0       	ldi	r24, 0x01	; 1
    25e6:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <DIO_SetPinValue>
    25ea:	40 e0       	ldi	r20, 0x00	; 0
    25ec:	62 e0       	ldi	r22, 0x02	; 2
    25ee:	81 e0       	ldi	r24, 0x01	; 1
    25f0:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <DIO_SetPinValue>
    25f4:	40 e0       	ldi	r20, 0x00	; 0
    25f6:	63 e0       	ldi	r22, 0x03	; 3
    25f8:	81 e0       	ldi	r24, 0x01	; 1
    25fa:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <DIO_SetPinValue>
    25fe:	8c 2f       	mov	r24, r28
    2600:	80 7f       	andi	r24, 0xF0	; 240
    2602:	82 bb       	out	0x12, r24	; 18
    2604:	0e 94 2a 10 	call	0x2054	; 0x2054 <LCD_Enable>
    2608:	20 e1       	ldi	r18, 0x10	; 16
    260a:	c2 9f       	mul	r28, r18
    260c:	c0 01       	movw	r24, r0
    260e:	11 24       	eor	r1, r1
    2610:	82 bb       	out	0x12, r24	; 18
    2612:	0e 94 2a 10 	call	0x2054	; 0x2054 <LCD_Enable>
    2616:	87 ec       	ldi	r24, 0xC7	; 199
    2618:	90 e0       	ldi	r25, 0x00	; 0
    261a:	01 97       	sbiw	r24, 0x01	; 1
    261c:	f1 f7       	brne	.-4      	; 0x261a <LCD_Send_Command+0x3e>
    261e:	00 c0       	rjmp	.+0      	; 0x2620 <LCD_Send_Command+0x44>
    2620:	00 00       	nop
    2622:	c6 30       	cpi	r28, 0x06	; 6
    2624:	11 f0       	breq	.+4      	; 0x262a <LCD_Send_Command+0x4e>
    2626:	c8 31       	cpi	r28, 0x18	; 24
    2628:	11 f4       	brne	.+4      	; 0x262e <LCD_Send_Command+0x52>
    262a:	10 92 9f 02 	sts	0x029F, r1	; 0x80029f <CursorDirection>
    262e:	c4 30       	cpi	r28, 0x04	; 4
    2630:	11 f0       	breq	.+4      	; 0x2636 <LCD_Send_Command+0x5a>
    2632:	cc 31       	cpi	r28, 0x1C	; 28
    2634:	19 f4       	brne	.+6      	; 0x263c <LCD_Send_Command+0x60>
    2636:	81 e0       	ldi	r24, 0x01	; 1
    2638:	80 93 9f 02 	sts	0x029F, r24	; 0x80029f <CursorDirection>
    263c:	cf 91       	pop	r28
    263e:	08 95       	ret

00002640 <LCD_Display_Location>:
	LCD_FloatToString(Number, String, AfterPoint);
	LCD_Display_String(String);
}

void LCD_Display_Location(uint32_t xAxis, uint32_t yAxis)
{
    2640:	8f 92       	push	r8
    2642:	9f 92       	push	r9
    2644:	af 92       	push	r10
    2646:	bf 92       	push	r11
    2648:	cf 92       	push	r12
    264a:	df 92       	push	r13
    264c:	ef 92       	push	r14
    264e:	ff 92       	push	r15
    2650:	cf 93       	push	r28
    2652:	df 93       	push	r29
    2654:	00 d0       	rcall	.+0      	; 0x2656 <LCD_Display_Location+0x16>
    2656:	cd b7       	in	r28, 0x3d	; 61
    2658:	de b7       	in	r29, 0x3e	; 62
    265a:	4b 01       	movw	r8, r22
    265c:	5c 01       	movw	r10, r24
    265e:	69 01       	movw	r12, r18
    2660:	7a 01       	movw	r14, r20
	LCD_Initialize();
    2662:	0e 94 9a 10 	call	0x2134	; 0x2134 <LCD_Initialize>
	uint8_t RowAddress[2] = {0x80, 0xC0};
    2666:	80 e8       	ldi	r24, 0x80	; 128
    2668:	89 83       	std	Y+1, r24	; 0x01
    266a:	80 ec       	ldi	r24, 0xC0	; 192
    266c:	8a 83       	std	Y+2, r24	; 0x02
	LCD_Send_Command(RowAddress[yAxis] + xAxis);
    266e:	e1 e0       	ldi	r30, 0x01	; 1
    2670:	f0 e0       	ldi	r31, 0x00	; 0
    2672:	ec 0f       	add	r30, r28
    2674:	fd 1f       	adc	r31, r29
    2676:	ec 0d       	add	r30, r12
    2678:	fd 1d       	adc	r31, r13
    267a:	80 81       	ld	r24, Z
    267c:	88 0d       	add	r24, r8
    267e:	0e 94 ee 12 	call	0x25dc	; 0x25dc <LCD_Send_Command>
	Character_Counter = (yAxis * 16) + (xAxis);
    2682:	cc 0c       	add	r12, r12
    2684:	dd 1c       	adc	r13, r13
    2686:	ee 1c       	adc	r14, r14
    2688:	ff 1c       	adc	r15, r15
    268a:	cc 0c       	add	r12, r12
    268c:	dd 1c       	adc	r13, r13
    268e:	ee 1c       	adc	r14, r14
    2690:	ff 1c       	adc	r15, r15
    2692:	cc 0c       	add	r12, r12
    2694:	dd 1c       	adc	r13, r13
    2696:	ee 1c       	adc	r14, r14
    2698:	ff 1c       	adc	r15, r15
    269a:	cc 0c       	add	r12, r12
    269c:	dd 1c       	adc	r13, r13
    269e:	ee 1c       	adc	r14, r14
    26a0:	ff 1c       	adc	r15, r15
    26a2:	c8 0c       	add	r12, r8
    26a4:	d9 1c       	adc	r13, r9
    26a6:	ea 1c       	adc	r14, r10
    26a8:	fb 1c       	adc	r15, r11
    26aa:	c0 92 a0 02 	sts	0x02A0, r12	; 0x8002a0 <Character_Counter>
    26ae:	d0 92 a1 02 	sts	0x02A1, r13	; 0x8002a1 <Character_Counter+0x1>
    26b2:	e0 92 a2 02 	sts	0x02A2, r14	; 0x8002a2 <Character_Counter+0x2>
    26b6:	f0 92 a3 02 	sts	0x02A3, r15	; 0x8002a3 <Character_Counter+0x3>
}
    26ba:	0f 90       	pop	r0
    26bc:	0f 90       	pop	r0
    26be:	df 91       	pop	r29
    26c0:	cf 91       	pop	r28
    26c2:	ff 90       	pop	r15
    26c4:	ef 90       	pop	r14
    26c6:	df 90       	pop	r13
    26c8:	cf 90       	pop	r12
    26ca:	bf 90       	pop	r11
    26cc:	af 90       	pop	r10
    26ce:	9f 90       	pop	r9
    26d0:	8f 90       	pop	r8
    26d2:	08 95       	ret

000026d4 <main>:


int main(void)
{
	//intialize
	DIO_SetPinDirection(DIO_PORTB,A_MUX_2,DIO_OUTPUT);
    26d4:	41 e0       	ldi	r20, 0x01	; 1
    26d6:	64 e0       	ldi	r22, 0x04	; 4
    26d8:	81 e0       	ldi	r24, 0x01	; 1
    26da:	0e 94 7d 15 	call	0x2afa	; 0x2afa <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTB,B_MUX_2,DIO_OUTPUT);
    26de:	41 e0       	ldi	r20, 0x01	; 1
    26e0:	65 e0       	ldi	r22, 0x05	; 5
    26e2:	81 e0       	ldi	r24, 0x01	; 1
    26e4:	0e 94 7d 15 	call	0x2afa	; 0x2afa <DIO_SetPinDirection>
    26e8:	2f ef       	ldi	r18, 0xFF	; 255
    26ea:	80 e7       	ldi	r24, 0x70	; 112
    26ec:	92 e0       	ldi	r25, 0x02	; 2
    26ee:	21 50       	subi	r18, 0x01	; 1
    26f0:	80 40       	sbci	r24, 0x00	; 0
    26f2:	90 40       	sbci	r25, 0x00	; 0
    26f4:	e1 f7       	brne	.-8      	; 0x26ee <main+0x1a>
    26f6:	00 c0       	rjmp	.+0      	; 0x26f8 <main+0x24>
    26f8:	00 00       	nop
	_delay_ms(100);
	DIO_SetPinDirection(DIO_PORTB,A_MUX_3,DIO_OUTPUT);
    26fa:	41 e0       	ldi	r20, 0x01	; 1
    26fc:	66 e0       	ldi	r22, 0x06	; 6
    26fe:	81 e0       	ldi	r24, 0x01	; 1
    2700:	0e 94 7d 15 	call	0x2afa	; 0x2afa <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTB,B_MUX_3,DIO_OUTPUT);
    2704:	41 e0       	ldi	r20, 0x01	; 1
    2706:	67 e0       	ldi	r22, 0x07	; 7
    2708:	81 e0       	ldi	r24, 0x01	; 1
    270a:	0e 94 7d 15 	call	0x2afa	; 0x2afa <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTA,IDCpin,DIO_INPUT);
    270e:	40 e0       	ldi	r20, 0x00	; 0
    2710:	66 e0       	ldi	r22, 0x06	; 6
    2712:	80 e0       	ldi	r24, 0x00	; 0
    2714:	0e 94 7d 15 	call	0x2afa	; 0x2afa <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTA,Vtotpin,DIO_INPUT);
    2718:	40 e0       	ldi	r20, 0x00	; 0
    271a:	64 e0       	ldi	r22, 0x04	; 4
    271c:	80 e0       	ldi	r24, 0x00	; 0
    271e:	0e 94 7d 15 	call	0x2afa	; 0x2afa <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTA,VDCpin,DIO_INPUT);
    2722:	40 e0       	ldi	r20, 0x00	; 0
    2724:	66 e0       	ldi	r22, 0x06	; 6
    2726:	80 e0       	ldi	r24, 0x00	; 0
    2728:	0e 94 7d 15 	call	0x2afa	; 0x2afa <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTA,Rpin,DIO_INPUT);
    272c:	40 e0       	ldi	r20, 0x00	; 0
    272e:	67 e0       	ldi	r22, 0x07	; 7
    2730:	80 e0       	ldi	r24, 0x00	; 0
    2732:	0e 94 7d 15 	call	0x2afa	; 0x2afa <DIO_SetPinDirection>
	LCD_Initialize();
    2736:	0e 94 9a 10 	call	0x2134	; 0x2134 <LCD_Initialize>
    273a:	8f e0       	ldi	r24, 0x0F	; 15
    273c:	97 e2       	ldi	r25, 0x27	; 39
    273e:	01 97       	sbiw	r24, 0x01	; 1
    2740:	f1 f7       	brne	.-4      	; 0x273e <main+0x6a>
    2742:	00 c0       	rjmp	.+0      	; 0x2744 <main+0x70>
    2744:	00 00       	nop
	_delay_ms(5);
	KEYPAD_Initialize();
    2746:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <KEYPAD_Initialize>
    274a:	8f e0       	ldi	r24, 0x0F	; 15
    274c:	97 e2       	ldi	r25, 0x27	; 39
    274e:	01 97       	sbiw	r24, 0x01	; 1
    2750:	f1 f7       	brne	.-4      	; 0x274e <main+0x7a>
    2752:	00 c0       	rjmp	.+0      	; 0x2754 <main+0x80>
    2754:	00 00       	nop
	_delay_ms(5);
	ADC_Initialize(5,1024);
    2756:	60 e0       	ldi	r22, 0x00	; 0
    2758:	85 e0       	ldi	r24, 0x05	; 5
    275a:	0e 94 3c 15 	call	0x2a78	; 0x2a78 <ADC_Initialize>
    275e:	8f e0       	ldi	r24, 0x0F	; 15
    2760:	97 e2       	ldi	r25, 0x27	; 39
    2762:	01 97       	sbiw	r24, 0x01	; 1
    2764:	f1 f7       	brne	.-4      	; 0x2762 <main+0x8e>
    2766:	00 c0       	rjmp	.+0      	; 0x2768 <main+0x94>
    2768:	00 00       	nop
    276a:	8f e0       	ldi	r24, 0x0F	; 15
    276c:	97 e2       	ldi	r25, 0x27	; 39
    276e:	01 97       	sbiw	r24, 0x01	; 1
    2770:	f1 f7       	brne	.-4      	; 0x276e <main+0x9a>
    2772:	00 c0       	rjmp	.+0      	; 0x2774 <main+0xa0>
    2774:	00 00       	nop
    2776:	9f ef       	ldi	r25, 0xFF	; 255
    2778:	20 e7       	ldi	r18, 0x70	; 112
    277a:	82 e0       	ldi	r24, 0x02	; 2
    277c:	91 50       	subi	r25, 0x01	; 1
    277e:	20 40       	sbci	r18, 0x00	; 0
    2780:	80 40       	sbci	r24, 0x00	; 0
    2782:	e1 f7       	brne	.-8      	; 0x277c <main+0xa8>
    2784:	00 c0       	rjmp	.+0      	; 0x2786 <main+0xb2>
    2786:	00 00       	nop
	_delay_ms(5);
	while(1){
		range='0';		//device range
		exit_range=0;	//device exit
		_delay_ms(100);
		device=select_LCD("Which Device? ;)","1Ohm 2Amt 3Volt",3,'f'); //select device
    2788:	26 e6       	ldi	r18, 0x66	; 102
    278a:	43 e0       	ldi	r20, 0x03	; 3
    278c:	69 ee       	ldi	r22, 0xE9	; 233
    278e:	71 e0       	ldi	r23, 0x01	; 1
    2790:	89 ef       	ldi	r24, 0xF9	; 249
    2792:	91 e0       	ldi	r25, 0x01	; 1
    2794:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <select_LCD>
    2798:	c8 2f       	mov	r28, r24
    279a:	9f ef       	ldi	r25, 0xFF	; 255
    279c:	20 e7       	ldi	r18, 0x70	; 112
    279e:	82 e0       	ldi	r24, 0x02	; 2
    27a0:	91 50       	subi	r25, 0x01	; 1
    27a2:	20 40       	sbci	r18, 0x00	; 0
    27a4:	80 40       	sbci	r24, 0x00	; 0
    27a6:	e1 f7       	brne	.-8      	; 0x27a0 <main+0xcc>
    27a8:	00 c0       	rjmp	.+0      	; 0x27aa <main+0xd6>
    27aa:	00 00       	nop
		_delay_ms(100);
		LCD_ClearScreen();
    27ac:	0e 94 8e 10 	call	0x211c	; 0x211c <LCD_ClearScreen>
		LCD_HomeScreen();
    27b0:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <LCD_HomeScreen>
		//use the selected device
		switch(device)
    27b4:	c2 33       	cpi	r28, 0x32	; 50
    27b6:	09 f4       	brne	.+2      	; 0x27ba <main+0xe6>
    27b8:	52 c0       	rjmp	.+164    	; 0x285e <main+0x18a>
    27ba:	c3 33       	cpi	r28, 0x33	; 51
    27bc:	09 f4       	brne	.+2      	; 0x27c0 <main+0xec>
    27be:	d3 c0       	rjmp	.+422    	; 0x2966 <main+0x292>
    27c0:	c1 33       	cpi	r28, 0x31	; 49
    27c2:	c9 f6       	brne	.-78     	; 0x2776 <main+0xa2>
    27c4:	47 c0       	rjmp	.+142    	; 0x2854 <main+0x180>
			{
				case '1': //ohm
					//stay till you want to change the device
					while(exit_range==0){
						//default for caution
						select_mux(device,'3');
    27c6:	63 e3       	ldi	r22, 0x33	; 51
    27c8:	8c 2f       	mov	r24, r28
    27ca:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <select_mux>
						
						//ask to return
						exit_range=ask_to_return('#');
    27ce:	83 e2       	ldi	r24, 0x23	; 35
    27d0:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <ask_to_return>
    27d4:	18 2f       	mov	r17, r24
						if(exit_range ==1){
    27d6:	81 30       	cpi	r24, 0x01	; 1
    27d8:	71 f2       	breq	.-100    	; 0x2776 <main+0xa2>
							break;
						}
						//select range
						range=select_LCD("range? 1:10k","2:100k 3:1M",3,'#');
    27da:	23 e2       	ldi	r18, 0x23	; 35
    27dc:	43 e0       	ldi	r20, 0x03	; 3
    27de:	6a e0       	ldi	r22, 0x0A	; 10
    27e0:	72 e0       	ldi	r23, 0x02	; 2
    27e2:	86 e1       	ldi	r24, 0x16	; 22
    27e4:	92 e0       	ldi	r25, 0x02	; 2
    27e6:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <select_LCD>
    27ea:	d8 2f       	mov	r29, r24
    27ec:	8f ec       	ldi	r24, 0xCF	; 207
    27ee:	97 e0       	ldi	r25, 0x07	; 7
    27f0:	01 97       	sbiw	r24, 0x01	; 1
    27f2:	f1 f7       	brne	.-4      	; 0x27f0 <main+0x11c>
    27f4:	00 c0       	rjmp	.+0      	; 0x27f6 <main+0x122>
    27f6:	00 00       	nop
						_delay_ms(1);
						
						if(range=='#'){
    27f8:	d3 32       	cpi	r29, 0x23	; 35
    27fa:	09 f4       	brne	.+2      	; 0x27fe <main+0x12a>
    27fc:	bc cf       	rjmp	.-136    	; 0x2776 <main+0xa2>
    27fe:	8f ec       	ldi	r24, 0xCF	; 207
    2800:	97 e0       	ldi	r25, 0x07	; 7
    2802:	01 97       	sbiw	r24, 0x01	; 1
    2804:	f1 f7       	brne	.-4      	; 0x2802 <main+0x12e>
    2806:	00 c0       	rjmp	.+0      	; 0x2808 <main+0x134>
    2808:	00 00       	nop
							break;
						}
						
						_delay_ms(1);
						//select the mux
						select_mux(device,range);
    280a:	6d 2f       	mov	r22, r29
    280c:	8c 2f       	mov	r24, r28
    280e:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <select_mux>
    2812:	8f e1       	ldi	r24, 0x1F	; 31
    2814:	9e e4       	ldi	r25, 0x4E	; 78
    2816:	01 97       	sbiw	r24, 0x01	; 1
    2818:	f1 f7       	brne	.-4      	; 0x2816 <main+0x142>
    281a:	00 c0       	rjmp	.+0      	; 0x281c <main+0x148>
    281c:	00 00       	nop
						_delay_ms(10);
						
						//read the input
						uint16_t x;
						x=ADC_Read(Rpin);
    281e:	87 e0       	ldi	r24, 0x07	; 7
    2820:	0e 94 43 15 	call	0x2a86	; 0x2a86 <ADC_Read>
    2824:	7c 01       	movw	r14, r24
						LCD_ClearScreen();
    2826:	0e 94 8e 10 	call	0x211c	; 0x211c <LCD_ClearScreen>
						LCD_HomeScreen();
    282a:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <LCD_HomeScreen>
						//display the input volt
						LCD_Display_Number(x);
    282e:	b7 01       	movw	r22, r14
    2830:	80 e0       	ldi	r24, 0x00	; 0
    2832:	90 e0       	ldi	r25, 0x00	; 0
    2834:	0e 94 8d 11 	call	0x231a	; 0x231a <LCD_Display_Number>
    2838:	9f ef       	ldi	r25, 0xFF	; 255
    283a:	29 e6       	ldi	r18, 0x69	; 105
    283c:	88 e1       	ldi	r24, 0x18	; 24
    283e:	91 50       	subi	r25, 0x01	; 1
    2840:	20 40       	sbci	r18, 0x00	; 0
    2842:	80 40       	sbci	r24, 0x00	; 0
    2844:	e1 f7       	brne	.-8      	; 0x283e <main+0x16a>
    2846:	00 c0       	rjmp	.+0      	; 0x2848 <main+0x174>
    2848:	00 00       	nop
						_delay_ms(1000);
						
						//display the resistor
						display_ohm(range,x);
    284a:	b7 01       	movw	r22, r14
    284c:	8d 2f       	mov	r24, r29
    284e:	0e 94 50 02 	call	0x4a0	; 0x4a0 <display_ohm>
    2852:	01 c0       	rjmp	.+2      	; 0x2856 <main+0x182>
		device=select_LCD("Which Device? ;)","1Ohm 2Amt 3Volt",3,'f'); //select device
		_delay_ms(100);
		LCD_ClearScreen();
		LCD_HomeScreen();
		//use the selected device
		switch(device)
    2854:	10 e0       	ldi	r17, 0x00	; 0
			{
				case '1': //ohm
					//stay till you want to change the device
					while(exit_range==0){
    2856:	11 23       	and	r17, r17
    2858:	09 f4       	brne	.+2      	; 0x285c <main+0x188>
    285a:	b5 cf       	rjmp	.-150    	; 0x27c6 <main+0xf2>
    285c:	8c cf       	rjmp	.-232    	; 0x2776 <main+0xa2>
						range='0';
					}
				break;
				case '2'://Ameter
					//default for caution
					select_mux(device,'4');
    285e:	64 e3       	ldi	r22, 0x34	; 52
    2860:	8c 2f       	mov	r24, r28
    2862:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <select_mux>
	mode=0;
	//start
	_delay_ms(5);
	while(1){
		range='0';		//device range
		exit_range=0;	//device exit
    2866:	10 e0       	ldi	r17, 0x00	; 0
				case '2'://Ameter
					//default for caution
					select_mux(device,'4');
					
					//stay till you want to change the device
					while(exit_range==0){
    2868:	7a c0       	rjmp	.+244    	; 0x295e <main+0x28a>
						//ask to return
						exit_range=ask_to_return('#');
    286a:	83 e2       	ldi	r24, 0x23	; 35
    286c:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <ask_to_return>
    2870:	18 2f       	mov	r17, r24
						if(exit_range ==1){
    2872:	81 30       	cpi	r24, 0x01	; 1
    2874:	09 f4       	brne	.+2      	; 0x2878 <main+0x1a4>
    2876:	7f cf       	rjmp	.-258    	; 0x2776 <main+0xa2>
							break;
						}
						
						//mechanical
						LCD_ClearScreen();
    2878:	0e 94 8e 10 	call	0x211c	; 0x211c <LCD_ClearScreen>
						LCD_HomeScreen();
    287c:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <LCD_HomeScreen>
						LCD_Display_String("Chose ranges :)");
    2880:	83 e2       	ldi	r24, 0x23	; 35
    2882:	92 e0       	ldi	r25, 0x02	; 2
    2884:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_Display_String>
						LCD_Display_Location(0,1);
    2888:	21 e0       	ldi	r18, 0x01	; 1
    288a:	30 e0       	ldi	r19, 0x00	; 0
    288c:	40 e0       	ldi	r20, 0x00	; 0
    288e:	50 e0       	ldi	r21, 0x00	; 0
    2890:	60 e0       	ldi	r22, 0x00	; 0
    2892:	70 e0       	ldi	r23, 0x00	; 0
    2894:	cb 01       	movw	r24, r22
    2896:	0e 94 20 13 	call	0x2640	; 0x2640 <LCD_Display_Location>
						LCD_Display_String("From switches!");
    289a:	83 e3       	ldi	r24, 0x33	; 51
    289c:	92 e0       	ldi	r25, 0x02	; 2
    289e:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_Display_String>
    28a2:	9f ef       	ldi	r25, 0xFF	; 255
    28a4:	23 ed       	ldi	r18, 0xD3	; 211
    28a6:	80 e3       	ldi	r24, 0x30	; 48
    28a8:	91 50       	subi	r25, 0x01	; 1
    28aa:	20 40       	sbci	r18, 0x00	; 0
    28ac:	80 40       	sbci	r24, 0x00	; 0
    28ae:	e1 f7       	brne	.-8      	; 0x28a8 <main+0x1d4>
    28b0:	00 c0       	rjmp	.+0      	; 0x28b2 <main+0x1de>
    28b2:	00 00       	nop
						_delay_ms(2000);
						
						//select range
						range=select_LCD("range? 1:2m 4:1A","2:20m 3:200m :0",4,'#');
    28b4:	23 e2       	ldi	r18, 0x23	; 35
    28b6:	44 e0       	ldi	r20, 0x04	; 4
    28b8:	62 e4       	ldi	r22, 0x42	; 66
    28ba:	72 e0       	ldi	r23, 0x02	; 2
    28bc:	82 e5       	ldi	r24, 0x52	; 82
    28be:	92 e0       	ldi	r25, 0x02	; 2
    28c0:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <select_LCD>
    28c4:	d8 2f       	mov	r29, r24
    28c6:	8f ec       	ldi	r24, 0xCF	; 207
    28c8:	97 e0       	ldi	r25, 0x07	; 7
    28ca:	01 97       	sbiw	r24, 0x01	; 1
    28cc:	f1 f7       	brne	.-4      	; 0x28ca <main+0x1f6>
    28ce:	00 c0       	rjmp	.+0      	; 0x28d0 <main+0x1fc>
    28d0:	00 00       	nop
						_delay_ms(1);
						
						if(range=='#'){
    28d2:	d3 32       	cpi	r29, 0x23	; 35
    28d4:	09 f4       	brne	.+2      	; 0x28d8 <main+0x204>
    28d6:	4f cf       	rjmp	.-354    	; 0x2776 <main+0xa2>
    28d8:	8f ec       	ldi	r24, 0xCF	; 207
    28da:	97 e0       	ldi	r25, 0x07	; 7
    28dc:	01 97       	sbiw	r24, 0x01	; 1
    28de:	f1 f7       	brne	.-4      	; 0x28dc <main+0x208>
    28e0:	00 c0       	rjmp	.+0      	; 0x28e2 <main+0x20e>
    28e2:	00 00       	nop
							break;
						}
						_delay_ms(1);
						
						//select mode
						mode=select_LCD("mode? 1:AC 2:DC","Be careful!",2,'#');
    28e4:	23 e2       	ldi	r18, 0x23	; 35
    28e6:	42 e0       	ldi	r20, 0x02	; 2
    28e8:	63 e6       	ldi	r22, 0x63	; 99
    28ea:	72 e0       	ldi	r23, 0x02	; 2
    28ec:	8f e6       	ldi	r24, 0x6F	; 111
    28ee:	92 e0       	ldi	r25, 0x02	; 2
    28f0:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <select_LCD>
    28f4:	08 2f       	mov	r16, r24
    28f6:	8f ec       	ldi	r24, 0xCF	; 207
    28f8:	97 e0       	ldi	r25, 0x07	; 7
    28fa:	01 97       	sbiw	r24, 0x01	; 1
    28fc:	f1 f7       	brne	.-4      	; 0x28fa <main+0x226>
    28fe:	00 c0       	rjmp	.+0      	; 0x2900 <main+0x22c>
    2900:	00 00       	nop
						_delay_ms(1);
						if(mode=='#'){
    2902:	03 32       	cpi	r16, 0x23	; 35
    2904:	09 f4       	brne	.+2      	; 0x2908 <main+0x234>
    2906:	37 cf       	rjmp	.-402    	; 0x2776 <main+0xa2>
    2908:	8f ec       	ldi	r24, 0xCF	; 207
    290a:	97 e0       	ldi	r25, 0x07	; 7
    290c:	01 97       	sbiw	r24, 0x01	; 1
    290e:	f1 f7       	brne	.-4      	; 0x290c <main+0x238>
    2910:	00 c0       	rjmp	.+0      	; 0x2912 <main+0x23e>
    2912:	00 00       	nop
							break;
						}
						_delay_ms(1);
						select_mux(device,range);
    2914:	6d 2f       	mov	r22, r29
    2916:	8c 2f       	mov	r24, r28
    2918:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <select_mux>
    291c:	8f e1       	ldi	r24, 0x1F	; 31
    291e:	9e e4       	ldi	r25, 0x4E	; 78
    2920:	01 97       	sbiw	r24, 0x01	; 1
    2922:	f1 f7       	brne	.-4      	; 0x2920 <main+0x24c>
    2924:	00 c0       	rjmp	.+0      	; 0x2926 <main+0x252>
    2926:	00 00       	nop
						_delay_ms(10);
						
						//read the input
						uint16_t x;
						x=ADC_Read(IDCpin);
    2928:	86 e0       	ldi	r24, 0x06	; 6
    292a:	0e 94 43 15 	call	0x2a86	; 0x2a86 <ADC_Read>
    292e:	7c 01       	movw	r14, r24
						LCD_ClearScreen();
    2930:	0e 94 8e 10 	call	0x211c	; 0x211c <LCD_ClearScreen>
						LCD_HomeScreen();
    2934:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <LCD_HomeScreen>
						//display the input volt
						LCD_Display_Number(x);
    2938:	b7 01       	movw	r22, r14
    293a:	80 e0       	ldi	r24, 0x00	; 0
    293c:	90 e0       	ldi	r25, 0x00	; 0
    293e:	0e 94 8d 11 	call	0x231a	; 0x231a <LCD_Display_Number>
    2942:	9f ef       	ldi	r25, 0xFF	; 255
    2944:	29 e6       	ldi	r18, 0x69	; 105
    2946:	88 e1       	ldi	r24, 0x18	; 24
    2948:	91 50       	subi	r25, 0x01	; 1
    294a:	20 40       	sbci	r18, 0x00	; 0
    294c:	80 40       	sbci	r24, 0x00	; 0
    294e:	e1 f7       	brne	.-8      	; 0x2948 <main+0x274>
    2950:	00 c0       	rjmp	.+0      	; 0x2952 <main+0x27e>
    2952:	00 00       	nop
						_delay_ms(1000);
						

						display_Amp(range,x,mode);
    2954:	40 2f       	mov	r20, r16
    2956:	b7 01       	movw	r22, r14
    2958:	8d 2f       	mov	r24, r29
    295a:	0e 94 b5 07 	call	0xf6a	; 0xf6a <display_Amp>
				case '2'://Ameter
					//default for caution
					select_mux(device,'4');
					
					//stay till you want to change the device
					while(exit_range==0){
    295e:	11 23       	and	r17, r17
    2960:	09 f4       	brne	.+2      	; 0x2964 <main+0x290>
    2962:	83 cf       	rjmp	.-250    	; 0x286a <main+0x196>
    2964:	08 cf       	rjmp	.-496    	; 0x2776 <main+0xa2>
						range='0';
						}
				break;
				case '3'://volt
				//default for caution
				select_mux(device,'4');
    2966:	64 e3       	ldi	r22, 0x34	; 52
    2968:	8c 2f       	mov	r24, r28
    296a:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <select_mux>
	mode=0;
	//start
	_delay_ms(5);
	while(1){
		range='0';		//device range
		exit_range=0;	//device exit
    296e:	10 e0       	ldi	r17, 0x00	; 0
				case '3'://volt
				//default for caution
				select_mux(device,'4');
				
				//stay till you want to change the device
				while(exit_range==0){
    2970:	7f c0       	rjmp	.+254    	; 0x2a70 <main+0x39c>
					//ask to return
					exit_range=ask_to_return('#');
    2972:	83 e2       	ldi	r24, 0x23	; 35
    2974:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <ask_to_return>
    2978:	18 2f       	mov	r17, r24
					if(exit_range ==1){
    297a:	81 30       	cpi	r24, 0x01	; 1
    297c:	09 f4       	brne	.+2      	; 0x2980 <main+0x2ac>
    297e:	fb ce       	rjmp	.-522    	; 0x2776 <main+0xa2>
						break;
					}
					
					//mechanical
					LCD_ClearScreen();
    2980:	0e 94 8e 10 	call	0x211c	; 0x211c <LCD_ClearScreen>
					LCD_HomeScreen();
    2984:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <LCD_HomeScreen>
					LCD_Display_String("Chose ranges :)");
    2988:	83 e2       	ldi	r24, 0x23	; 35
    298a:	92 e0       	ldi	r25, 0x02	; 2
    298c:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_Display_String>
					LCD_Display_Location(0,1);
    2990:	21 e0       	ldi	r18, 0x01	; 1
    2992:	30 e0       	ldi	r19, 0x00	; 0
    2994:	40 e0       	ldi	r20, 0x00	; 0
    2996:	50 e0       	ldi	r21, 0x00	; 0
    2998:	60 e0       	ldi	r22, 0x00	; 0
    299a:	70 e0       	ldi	r23, 0x00	; 0
    299c:	cb 01       	movw	r24, r22
    299e:	0e 94 20 13 	call	0x2640	; 0x2640 <LCD_Display_Location>
					LCD_Display_String("From switches!");
    29a2:	83 e3       	ldi	r24, 0x33	; 51
    29a4:	92 e0       	ldi	r25, 0x02	; 2
    29a6:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_Display_String>
    29aa:	9f ef       	ldi	r25, 0xFF	; 255
    29ac:	23 ed       	ldi	r18, 0xD3	; 211
    29ae:	80 e3       	ldi	r24, 0x30	; 48
    29b0:	91 50       	subi	r25, 0x01	; 1
    29b2:	20 40       	sbci	r18, 0x00	; 0
    29b4:	80 40       	sbci	r24, 0x00	; 0
    29b6:	e1 f7       	brne	.-8      	; 0x29b0 <main+0x2dc>
    29b8:	00 c0       	rjmp	.+0      	; 0x29ba <main+0x2e6>
    29ba:	00 00       	nop
					_delay_ms(2000);
					
					//select range
					range=select_LCD("range? 1:300m","2:3V 3:30V 4:400",4,'#');
    29bc:	23 e2       	ldi	r18, 0x23	; 35
    29be:	44 e0       	ldi	r20, 0x04	; 4
    29c0:	6f e7       	ldi	r22, 0x7F	; 127
    29c2:	72 e0       	ldi	r23, 0x02	; 2
    29c4:	80 e9       	ldi	r24, 0x90	; 144
    29c6:	92 e0       	ldi	r25, 0x02	; 2
    29c8:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <select_LCD>
    29cc:	d8 2f       	mov	r29, r24
    29ce:	8f ec       	ldi	r24, 0xCF	; 207
    29d0:	97 e0       	ldi	r25, 0x07	; 7
    29d2:	01 97       	sbiw	r24, 0x01	; 1
    29d4:	f1 f7       	brne	.-4      	; 0x29d2 <main+0x2fe>
    29d6:	00 c0       	rjmp	.+0      	; 0x29d8 <main+0x304>
    29d8:	00 00       	nop
					_delay_ms(1);
					if(range=='#'){
    29da:	d3 32       	cpi	r29, 0x23	; 35
    29dc:	09 f4       	brne	.+2      	; 0x29e0 <main+0x30c>
    29de:	cb ce       	rjmp	.-618    	; 0x2776 <main+0xa2>
    29e0:	8f ec       	ldi	r24, 0xCF	; 207
    29e2:	97 e0       	ldi	r25, 0x07	; 7
    29e4:	01 97       	sbiw	r24, 0x01	; 1
    29e6:	f1 f7       	brne	.-4      	; 0x29e4 <main+0x310>
    29e8:	00 c0       	rjmp	.+0      	; 0x29ea <main+0x316>
    29ea:	00 00       	nop
						break;
					}
					_delay_ms(1);
					
					//select mode
					mode=select_LCD("mode? 1:AC 2:DC","Be careful!",2,'#');
    29ec:	23 e2       	ldi	r18, 0x23	; 35
    29ee:	42 e0       	ldi	r20, 0x02	; 2
    29f0:	63 e6       	ldi	r22, 0x63	; 99
    29f2:	72 e0       	ldi	r23, 0x02	; 2
    29f4:	8f e6       	ldi	r24, 0x6F	; 111
    29f6:	92 e0       	ldi	r25, 0x02	; 2
    29f8:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <select_LCD>
    29fc:	08 2f       	mov	r16, r24
    29fe:	8f ec       	ldi	r24, 0xCF	; 207
    2a00:	97 e0       	ldi	r25, 0x07	; 7
    2a02:	01 97       	sbiw	r24, 0x01	; 1
    2a04:	f1 f7       	brne	.-4      	; 0x2a02 <main+0x32e>
    2a06:	00 c0       	rjmp	.+0      	; 0x2a08 <main+0x334>
    2a08:	00 00       	nop
					_delay_ms(1);
					if(mode=='#'){
    2a0a:	03 32       	cpi	r16, 0x23	; 35
    2a0c:	09 f4       	brne	.+2      	; 0x2a10 <main+0x33c>
    2a0e:	b3 ce       	rjmp	.-666    	; 0x2776 <main+0xa2>
    2a10:	8f ec       	ldi	r24, 0xCF	; 207
    2a12:	97 e0       	ldi	r25, 0x07	; 7
    2a14:	01 97       	sbiw	r24, 0x01	; 1
    2a16:	f1 f7       	brne	.-4      	; 0x2a14 <main+0x340>
    2a18:	00 c0       	rjmp	.+0      	; 0x2a1a <main+0x346>
    2a1a:	00 00       	nop
						break;
					}
					_delay_ms(1);
					
					select_mux(device,range);
    2a1c:	6d 2f       	mov	r22, r29
    2a1e:	8c 2f       	mov	r24, r28
    2a20:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <select_mux>
    2a24:	8f e1       	ldi	r24, 0x1F	; 31
    2a26:	9e e4       	ldi	r25, 0x4E	; 78
    2a28:	01 97       	sbiw	r24, 0x01	; 1
    2a2a:	f1 f7       	brne	.-4      	; 0x2a28 <main+0x354>
    2a2c:	00 c0       	rjmp	.+0      	; 0x2a2e <main+0x35a>
    2a2e:	00 00       	nop
					_delay_ms(10);
					
					//read the input AC+DC
					uint16_t xtot;
					xtot=ADC_Read(Vtotpin);
    2a30:	84 e0       	ldi	r24, 0x04	; 4
    2a32:	0e 94 43 15 	call	0x2a86	; 0x2a86 <ADC_Read>
    2a36:	6c 01       	movw	r12, r24
					_delay_ms(1000);
					*/
					
					//read the input
					uint16_t x;
					x=ADC_Read(VDCpin);
    2a38:	86 e0       	ldi	r24, 0x06	; 6
    2a3a:	0e 94 43 15 	call	0x2a86	; 0x2a86 <ADC_Read>
    2a3e:	7c 01       	movw	r14, r24
					LCD_ClearScreen();
    2a40:	0e 94 8e 10 	call	0x211c	; 0x211c <LCD_ClearScreen>
					LCD_HomeScreen();
    2a44:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <LCD_HomeScreen>
					//display the input volt
					LCD_Display_Number(x);
    2a48:	b7 01       	movw	r22, r14
    2a4a:	80 e0       	ldi	r24, 0x00	; 0
    2a4c:	90 e0       	ldi	r25, 0x00	; 0
    2a4e:	0e 94 8d 11 	call	0x231a	; 0x231a <LCD_Display_Number>
    2a52:	9f ef       	ldi	r25, 0xFF	; 255
    2a54:	29 e6       	ldi	r18, 0x69	; 105
    2a56:	88 e1       	ldi	r24, 0x18	; 24
    2a58:	91 50       	subi	r25, 0x01	; 1
    2a5a:	20 40       	sbci	r18, 0x00	; 0
    2a5c:	80 40       	sbci	r24, 0x00	; 0
    2a5e:	e1 f7       	brne	.-8      	; 0x2a58 <main+0x384>
    2a60:	00 c0       	rjmp	.+0      	; 0x2a62 <main+0x38e>
    2a62:	00 00       	nop
					_delay_ms(1000);
					
					display_volt(range,xtot,x,mode);
    2a64:	20 2f       	mov	r18, r16
    2a66:	a7 01       	movw	r20, r14
    2a68:	b6 01       	movw	r22, r12
    2a6a:	8d 2f       	mov	r24, r29
    2a6c:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <display_volt>
				case '3'://volt
				//default for caution
				select_mux(device,'4');
				
				//stay till you want to change the device
				while(exit_range==0){
    2a70:	11 23       	and	r17, r17
    2a72:	09 f4       	brne	.+2      	; 0x2a76 <main+0x3a2>
    2a74:	7e cf       	rjmp	.-260    	; 0x2972 <main+0x29e>
    2a76:	7f ce       	rjmp	.-770    	; 0x2776 <main+0xa2>

00002a78 <ADC_Initialize>:
    2a78:	87 b1       	in	r24, 0x07	; 7
    2a7a:	80 64       	ori	r24, 0x40	; 64
    2a7c:	87 b9       	out	0x07, r24	; 7
    2a7e:	86 b1       	in	r24, 0x06	; 6
    2a80:	87 6a       	ori	r24, 0xA7	; 167
    2a82:	86 b9       	out	0x06, r24	; 6
    2a84:	08 95       	ret

00002a86 <ADC_Read>:
    2a86:	e8 2f       	mov	r30, r24
    2a88:	84 b1       	in	r24, 0x04	; 4
    2a8a:	95 b1       	in	r25, 0x05	; 5
    2a8c:	8e 2f       	mov	r24, r30
    2a8e:	90 e0       	ldi	r25, 0x00	; 0
    2a90:	88 30       	cpi	r24, 0x08	; 8
    2a92:	91 05       	cpc	r25, r1
    2a94:	50 f5       	brcc	.+84     	; 0x2aea <ADC_Read+0x64>
    2a96:	fc 01       	movw	r30, r24
    2a98:	e6 5d       	subi	r30, 0xD6	; 214
    2a9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a9c:	0c 94 eb 1a 	jmp	0x35d6	; 0x35d6 <__tablejump2__>
    2aa0:	87 b1       	in	r24, 0x07	; 7
    2aa2:	88 7f       	andi	r24, 0xF8	; 248
    2aa4:	87 b9       	out	0x07, r24	; 7
    2aa6:	21 c0       	rjmp	.+66     	; 0x2aea <ADC_Read+0x64>
    2aa8:	87 b1       	in	r24, 0x07	; 7
    2aaa:	88 7f       	andi	r24, 0xF8	; 248
    2aac:	81 60       	ori	r24, 0x01	; 1
    2aae:	87 b9       	out	0x07, r24	; 7
    2ab0:	1c c0       	rjmp	.+56     	; 0x2aea <ADC_Read+0x64>
    2ab2:	87 b1       	in	r24, 0x07	; 7
    2ab4:	88 7f       	andi	r24, 0xF8	; 248
    2ab6:	82 60       	ori	r24, 0x02	; 2
    2ab8:	87 b9       	out	0x07, r24	; 7
    2aba:	17 c0       	rjmp	.+46     	; 0x2aea <ADC_Read+0x64>
    2abc:	87 b1       	in	r24, 0x07	; 7
    2abe:	88 7f       	andi	r24, 0xF8	; 248
    2ac0:	83 60       	ori	r24, 0x03	; 3
    2ac2:	87 b9       	out	0x07, r24	; 7
    2ac4:	12 c0       	rjmp	.+36     	; 0x2aea <ADC_Read+0x64>
    2ac6:	87 b1       	in	r24, 0x07	; 7
    2ac8:	88 7f       	andi	r24, 0xF8	; 248
    2aca:	84 60       	ori	r24, 0x04	; 4
    2acc:	87 b9       	out	0x07, r24	; 7
    2ace:	0d c0       	rjmp	.+26     	; 0x2aea <ADC_Read+0x64>
    2ad0:	87 b1       	in	r24, 0x07	; 7
    2ad2:	88 7f       	andi	r24, 0xF8	; 248
    2ad4:	85 60       	ori	r24, 0x05	; 5
    2ad6:	87 b9       	out	0x07, r24	; 7
    2ad8:	08 c0       	rjmp	.+16     	; 0x2aea <ADC_Read+0x64>
    2ada:	87 b1       	in	r24, 0x07	; 7
    2adc:	88 7f       	andi	r24, 0xF8	; 248
    2ade:	86 60       	ori	r24, 0x06	; 6
    2ae0:	87 b9       	out	0x07, r24	; 7
    2ae2:	03 c0       	rjmp	.+6      	; 0x2aea <ADC_Read+0x64>
    2ae4:	87 b1       	in	r24, 0x07	; 7
    2ae6:	87 60       	ori	r24, 0x07	; 7
    2ae8:	87 b9       	out	0x07, r24	; 7
    2aea:	86 b1       	in	r24, 0x06	; 6
    2aec:	80 64       	ori	r24, 0x40	; 64
    2aee:	86 b9       	out	0x06, r24	; 6
    2af0:	36 99       	sbic	0x06, 6	; 6
    2af2:	fe cf       	rjmp	.-4      	; 0x2af0 <ADC_Read+0x6a>
    2af4:	84 b1       	in	r24, 0x04	; 4
    2af6:	95 b1       	in	r25, 0x05	; 5
    2af8:	08 95       	ret

00002afa <DIO_SetPinDirection>:
    2afa:	44 23       	and	r20, r20
    2afc:	19 f0       	breq	.+6      	; 0x2b04 <DIO_SetPinDirection+0xa>
    2afe:	41 30       	cpi	r20, 0x01	; 1
    2b00:	c9 f1       	breq	.+114    	; 0x2b74 <DIO_SetPinDirection+0x7a>
    2b02:	08 95       	ret
    2b04:	81 30       	cpi	r24, 0x01	; 1
    2b06:	91 f0       	breq	.+36     	; 0x2b2c <DIO_SetPinDirection+0x32>
    2b08:	28 f0       	brcs	.+10     	; 0x2b14 <DIO_SetPinDirection+0x1a>
    2b0a:	82 30       	cpi	r24, 0x02	; 2
    2b0c:	d9 f0       	breq	.+54     	; 0x2b44 <DIO_SetPinDirection+0x4a>
    2b0e:	83 30       	cpi	r24, 0x03	; 3
    2b10:	29 f1       	breq	.+74     	; 0x2b5c <DIO_SetPinDirection+0x62>
    2b12:	08 95       	ret
    2b14:	2a b3       	in	r18, 0x1a	; 26
    2b16:	81 e0       	ldi	r24, 0x01	; 1
    2b18:	90 e0       	ldi	r25, 0x00	; 0
    2b1a:	02 c0       	rjmp	.+4      	; 0x2b20 <DIO_SetPinDirection+0x26>
    2b1c:	88 0f       	add	r24, r24
    2b1e:	99 1f       	adc	r25, r25
    2b20:	6a 95       	dec	r22
    2b22:	e2 f7       	brpl	.-8      	; 0x2b1c <DIO_SetPinDirection+0x22>
    2b24:	80 95       	com	r24
    2b26:	82 23       	and	r24, r18
    2b28:	8a bb       	out	0x1a, r24	; 26
    2b2a:	08 95       	ret
    2b2c:	27 b3       	in	r18, 0x17	; 23
    2b2e:	81 e0       	ldi	r24, 0x01	; 1
    2b30:	90 e0       	ldi	r25, 0x00	; 0
    2b32:	02 c0       	rjmp	.+4      	; 0x2b38 <DIO_SetPinDirection+0x3e>
    2b34:	88 0f       	add	r24, r24
    2b36:	99 1f       	adc	r25, r25
    2b38:	6a 95       	dec	r22
    2b3a:	e2 f7       	brpl	.-8      	; 0x2b34 <DIO_SetPinDirection+0x3a>
    2b3c:	80 95       	com	r24
    2b3e:	82 23       	and	r24, r18
    2b40:	87 bb       	out	0x17, r24	; 23
    2b42:	08 95       	ret
    2b44:	24 b3       	in	r18, 0x14	; 20
    2b46:	81 e0       	ldi	r24, 0x01	; 1
    2b48:	90 e0       	ldi	r25, 0x00	; 0
    2b4a:	02 c0       	rjmp	.+4      	; 0x2b50 <DIO_SetPinDirection+0x56>
    2b4c:	88 0f       	add	r24, r24
    2b4e:	99 1f       	adc	r25, r25
    2b50:	6a 95       	dec	r22
    2b52:	e2 f7       	brpl	.-8      	; 0x2b4c <DIO_SetPinDirection+0x52>
    2b54:	80 95       	com	r24
    2b56:	82 23       	and	r24, r18
    2b58:	84 bb       	out	0x14, r24	; 20
    2b5a:	08 95       	ret
    2b5c:	21 b3       	in	r18, 0x11	; 17
    2b5e:	81 e0       	ldi	r24, 0x01	; 1
    2b60:	90 e0       	ldi	r25, 0x00	; 0
    2b62:	02 c0       	rjmp	.+4      	; 0x2b68 <DIO_SetPinDirection+0x6e>
    2b64:	88 0f       	add	r24, r24
    2b66:	99 1f       	adc	r25, r25
    2b68:	6a 95       	dec	r22
    2b6a:	e2 f7       	brpl	.-8      	; 0x2b64 <DIO_SetPinDirection+0x6a>
    2b6c:	80 95       	com	r24
    2b6e:	82 23       	and	r24, r18
    2b70:	81 bb       	out	0x11, r24	; 17
    2b72:	08 95       	ret
    2b74:	81 30       	cpi	r24, 0x01	; 1
    2b76:	89 f0       	breq	.+34     	; 0x2b9a <DIO_SetPinDirection+0xa0>
    2b78:	28 f0       	brcs	.+10     	; 0x2b84 <DIO_SetPinDirection+0x8a>
    2b7a:	82 30       	cpi	r24, 0x02	; 2
    2b7c:	c9 f0       	breq	.+50     	; 0x2bb0 <DIO_SetPinDirection+0xb6>
    2b7e:	83 30       	cpi	r24, 0x03	; 3
    2b80:	11 f1       	breq	.+68     	; 0x2bc6 <DIO_SetPinDirection+0xcc>
    2b82:	08 95       	ret
    2b84:	2a b3       	in	r18, 0x1a	; 26
    2b86:	81 e0       	ldi	r24, 0x01	; 1
    2b88:	90 e0       	ldi	r25, 0x00	; 0
    2b8a:	02 c0       	rjmp	.+4      	; 0x2b90 <DIO_SetPinDirection+0x96>
    2b8c:	88 0f       	add	r24, r24
    2b8e:	99 1f       	adc	r25, r25
    2b90:	6a 95       	dec	r22
    2b92:	e2 f7       	brpl	.-8      	; 0x2b8c <DIO_SetPinDirection+0x92>
    2b94:	82 2b       	or	r24, r18
    2b96:	8a bb       	out	0x1a, r24	; 26
    2b98:	08 95       	ret
    2b9a:	27 b3       	in	r18, 0x17	; 23
    2b9c:	81 e0       	ldi	r24, 0x01	; 1
    2b9e:	90 e0       	ldi	r25, 0x00	; 0
    2ba0:	02 c0       	rjmp	.+4      	; 0x2ba6 <DIO_SetPinDirection+0xac>
    2ba2:	88 0f       	add	r24, r24
    2ba4:	99 1f       	adc	r25, r25
    2ba6:	6a 95       	dec	r22
    2ba8:	e2 f7       	brpl	.-8      	; 0x2ba2 <DIO_SetPinDirection+0xa8>
    2baa:	82 2b       	or	r24, r18
    2bac:	87 bb       	out	0x17, r24	; 23
    2bae:	08 95       	ret
    2bb0:	24 b3       	in	r18, 0x14	; 20
    2bb2:	81 e0       	ldi	r24, 0x01	; 1
    2bb4:	90 e0       	ldi	r25, 0x00	; 0
    2bb6:	02 c0       	rjmp	.+4      	; 0x2bbc <DIO_SetPinDirection+0xc2>
    2bb8:	88 0f       	add	r24, r24
    2bba:	99 1f       	adc	r25, r25
    2bbc:	6a 95       	dec	r22
    2bbe:	e2 f7       	brpl	.-8      	; 0x2bb8 <DIO_SetPinDirection+0xbe>
    2bc0:	82 2b       	or	r24, r18
    2bc2:	84 bb       	out	0x14, r24	; 20
    2bc4:	08 95       	ret
    2bc6:	21 b3       	in	r18, 0x11	; 17
    2bc8:	81 e0       	ldi	r24, 0x01	; 1
    2bca:	90 e0       	ldi	r25, 0x00	; 0
    2bcc:	02 c0       	rjmp	.+4      	; 0x2bd2 <DIO_SetPinDirection+0xd8>
    2bce:	88 0f       	add	r24, r24
    2bd0:	99 1f       	adc	r25, r25
    2bd2:	6a 95       	dec	r22
    2bd4:	e2 f7       	brpl	.-8      	; 0x2bce <DIO_SetPinDirection+0xd4>
    2bd6:	82 2b       	or	r24, r18
    2bd8:	81 bb       	out	0x11, r24	; 17
    2bda:	08 95       	ret

00002bdc <DIO_SetPinValue>:
    2bdc:	44 23       	and	r20, r20
    2bde:	19 f0       	breq	.+6      	; 0x2be6 <DIO_SetPinValue+0xa>
    2be0:	41 30       	cpi	r20, 0x01	; 1
    2be2:	c9 f1       	breq	.+114    	; 0x2c56 <DIO_SetPinValue+0x7a>
    2be4:	08 95       	ret
    2be6:	81 30       	cpi	r24, 0x01	; 1
    2be8:	91 f0       	breq	.+36     	; 0x2c0e <DIO_SetPinValue+0x32>
    2bea:	28 f0       	brcs	.+10     	; 0x2bf6 <DIO_SetPinValue+0x1a>
    2bec:	82 30       	cpi	r24, 0x02	; 2
    2bee:	d9 f0       	breq	.+54     	; 0x2c26 <DIO_SetPinValue+0x4a>
    2bf0:	83 30       	cpi	r24, 0x03	; 3
    2bf2:	29 f1       	breq	.+74     	; 0x2c3e <DIO_SetPinValue+0x62>
    2bf4:	08 95       	ret
    2bf6:	2b b3       	in	r18, 0x1b	; 27
    2bf8:	81 e0       	ldi	r24, 0x01	; 1
    2bfa:	90 e0       	ldi	r25, 0x00	; 0
    2bfc:	02 c0       	rjmp	.+4      	; 0x2c02 <DIO_SetPinValue+0x26>
    2bfe:	88 0f       	add	r24, r24
    2c00:	99 1f       	adc	r25, r25
    2c02:	6a 95       	dec	r22
    2c04:	e2 f7       	brpl	.-8      	; 0x2bfe <DIO_SetPinValue+0x22>
    2c06:	80 95       	com	r24
    2c08:	82 23       	and	r24, r18
    2c0a:	8b bb       	out	0x1b, r24	; 27
    2c0c:	08 95       	ret
    2c0e:	28 b3       	in	r18, 0x18	; 24
    2c10:	81 e0       	ldi	r24, 0x01	; 1
    2c12:	90 e0       	ldi	r25, 0x00	; 0
    2c14:	02 c0       	rjmp	.+4      	; 0x2c1a <DIO_SetPinValue+0x3e>
    2c16:	88 0f       	add	r24, r24
    2c18:	99 1f       	adc	r25, r25
    2c1a:	6a 95       	dec	r22
    2c1c:	e2 f7       	brpl	.-8      	; 0x2c16 <DIO_SetPinValue+0x3a>
    2c1e:	80 95       	com	r24
    2c20:	82 23       	and	r24, r18
    2c22:	88 bb       	out	0x18, r24	; 24
    2c24:	08 95       	ret
    2c26:	25 b3       	in	r18, 0x15	; 21
    2c28:	81 e0       	ldi	r24, 0x01	; 1
    2c2a:	90 e0       	ldi	r25, 0x00	; 0
    2c2c:	02 c0       	rjmp	.+4      	; 0x2c32 <DIO_SetPinValue+0x56>
    2c2e:	88 0f       	add	r24, r24
    2c30:	99 1f       	adc	r25, r25
    2c32:	6a 95       	dec	r22
    2c34:	e2 f7       	brpl	.-8      	; 0x2c2e <DIO_SetPinValue+0x52>
    2c36:	80 95       	com	r24
    2c38:	82 23       	and	r24, r18
    2c3a:	85 bb       	out	0x15, r24	; 21
    2c3c:	08 95       	ret
    2c3e:	22 b3       	in	r18, 0x12	; 18
    2c40:	81 e0       	ldi	r24, 0x01	; 1
    2c42:	90 e0       	ldi	r25, 0x00	; 0
    2c44:	02 c0       	rjmp	.+4      	; 0x2c4a <DIO_SetPinValue+0x6e>
    2c46:	88 0f       	add	r24, r24
    2c48:	99 1f       	adc	r25, r25
    2c4a:	6a 95       	dec	r22
    2c4c:	e2 f7       	brpl	.-8      	; 0x2c46 <DIO_SetPinValue+0x6a>
    2c4e:	80 95       	com	r24
    2c50:	82 23       	and	r24, r18
    2c52:	82 bb       	out	0x12, r24	; 18
    2c54:	08 95       	ret
    2c56:	81 30       	cpi	r24, 0x01	; 1
    2c58:	89 f0       	breq	.+34     	; 0x2c7c <DIO_SetPinValue+0xa0>
    2c5a:	28 f0       	brcs	.+10     	; 0x2c66 <DIO_SetPinValue+0x8a>
    2c5c:	82 30       	cpi	r24, 0x02	; 2
    2c5e:	c9 f0       	breq	.+50     	; 0x2c92 <DIO_SetPinValue+0xb6>
    2c60:	83 30       	cpi	r24, 0x03	; 3
    2c62:	11 f1       	breq	.+68     	; 0x2ca8 <DIO_SetPinValue+0xcc>
    2c64:	08 95       	ret
    2c66:	2b b3       	in	r18, 0x1b	; 27
    2c68:	81 e0       	ldi	r24, 0x01	; 1
    2c6a:	90 e0       	ldi	r25, 0x00	; 0
    2c6c:	02 c0       	rjmp	.+4      	; 0x2c72 <DIO_SetPinValue+0x96>
    2c6e:	88 0f       	add	r24, r24
    2c70:	99 1f       	adc	r25, r25
    2c72:	6a 95       	dec	r22
    2c74:	e2 f7       	brpl	.-8      	; 0x2c6e <DIO_SetPinValue+0x92>
    2c76:	82 2b       	or	r24, r18
    2c78:	8b bb       	out	0x1b, r24	; 27
    2c7a:	08 95       	ret
    2c7c:	28 b3       	in	r18, 0x18	; 24
    2c7e:	81 e0       	ldi	r24, 0x01	; 1
    2c80:	90 e0       	ldi	r25, 0x00	; 0
    2c82:	02 c0       	rjmp	.+4      	; 0x2c88 <DIO_SetPinValue+0xac>
    2c84:	88 0f       	add	r24, r24
    2c86:	99 1f       	adc	r25, r25
    2c88:	6a 95       	dec	r22
    2c8a:	e2 f7       	brpl	.-8      	; 0x2c84 <DIO_SetPinValue+0xa8>
    2c8c:	82 2b       	or	r24, r18
    2c8e:	88 bb       	out	0x18, r24	; 24
    2c90:	08 95       	ret
    2c92:	25 b3       	in	r18, 0x15	; 21
    2c94:	81 e0       	ldi	r24, 0x01	; 1
    2c96:	90 e0       	ldi	r25, 0x00	; 0
    2c98:	02 c0       	rjmp	.+4      	; 0x2c9e <DIO_SetPinValue+0xc2>
    2c9a:	88 0f       	add	r24, r24
    2c9c:	99 1f       	adc	r25, r25
    2c9e:	6a 95       	dec	r22
    2ca0:	e2 f7       	brpl	.-8      	; 0x2c9a <DIO_SetPinValue+0xbe>
    2ca2:	82 2b       	or	r24, r18
    2ca4:	85 bb       	out	0x15, r24	; 21
    2ca6:	08 95       	ret
    2ca8:	22 b3       	in	r18, 0x12	; 18
    2caa:	81 e0       	ldi	r24, 0x01	; 1
    2cac:	90 e0       	ldi	r25, 0x00	; 0
    2cae:	02 c0       	rjmp	.+4      	; 0x2cb4 <DIO_SetPinValue+0xd8>
    2cb0:	88 0f       	add	r24, r24
    2cb2:	99 1f       	adc	r25, r25
    2cb4:	6a 95       	dec	r22
    2cb6:	e2 f7       	brpl	.-8      	; 0x2cb0 <DIO_SetPinValue+0xd4>
    2cb8:	82 2b       	or	r24, r18
    2cba:	82 bb       	out	0x12, r24	; 18
    2cbc:	08 95       	ret

00002cbe <DIO_GetPinValue>:
    2cbe:	81 30       	cpi	r24, 0x01	; 1
    2cc0:	79 f0       	breq	.+30     	; 0x2ce0 <DIO_GetPinValue+0x22>
    2cc2:	28 f0       	brcs	.+10     	; 0x2cce <DIO_GetPinValue+0x10>
    2cc4:	82 30       	cpi	r24, 0x02	; 2
    2cc6:	a9 f0       	breq	.+42     	; 0x2cf2 <DIO_GetPinValue+0x34>
    2cc8:	83 30       	cpi	r24, 0x03	; 3
    2cca:	e1 f0       	breq	.+56     	; 0x2d04 <DIO_GetPinValue+0x46>
    2ccc:	24 c0       	rjmp	.+72     	; 0x2d16 <DIO_GetPinValue+0x58>
    2cce:	89 b3       	in	r24, 0x19	; 25
    2cd0:	90 e0       	ldi	r25, 0x00	; 0
    2cd2:	02 c0       	rjmp	.+4      	; 0x2cd8 <DIO_GetPinValue+0x1a>
    2cd4:	95 95       	asr	r25
    2cd6:	87 95       	ror	r24
    2cd8:	6a 95       	dec	r22
    2cda:	e2 f7       	brpl	.-8      	; 0x2cd4 <DIO_GetPinValue+0x16>
    2cdc:	81 70       	andi	r24, 0x01	; 1
    2cde:	08 95       	ret
    2ce0:	86 b3       	in	r24, 0x16	; 22
    2ce2:	90 e0       	ldi	r25, 0x00	; 0
    2ce4:	02 c0       	rjmp	.+4      	; 0x2cea <DIO_GetPinValue+0x2c>
    2ce6:	95 95       	asr	r25
    2ce8:	87 95       	ror	r24
    2cea:	6a 95       	dec	r22
    2cec:	e2 f7       	brpl	.-8      	; 0x2ce6 <DIO_GetPinValue+0x28>
    2cee:	81 70       	andi	r24, 0x01	; 1
    2cf0:	08 95       	ret
    2cf2:	83 b3       	in	r24, 0x13	; 19
    2cf4:	90 e0       	ldi	r25, 0x00	; 0
    2cf6:	02 c0       	rjmp	.+4      	; 0x2cfc <DIO_GetPinValue+0x3e>
    2cf8:	95 95       	asr	r25
    2cfa:	87 95       	ror	r24
    2cfc:	6a 95       	dec	r22
    2cfe:	e2 f7       	brpl	.-8      	; 0x2cf8 <DIO_GetPinValue+0x3a>
    2d00:	81 70       	andi	r24, 0x01	; 1
    2d02:	08 95       	ret
    2d04:	80 b3       	in	r24, 0x10	; 16
    2d06:	90 e0       	ldi	r25, 0x00	; 0
    2d08:	02 c0       	rjmp	.+4      	; 0x2d0e <DIO_GetPinValue+0x50>
    2d0a:	95 95       	asr	r25
    2d0c:	87 95       	ror	r24
    2d0e:	6a 95       	dec	r22
    2d10:	e2 f7       	brpl	.-8      	; 0x2d0a <DIO_GetPinValue+0x4c>
    2d12:	81 70       	andi	r24, 0x01	; 1
    2d14:	08 95       	ret
    2d16:	80 e0       	ldi	r24, 0x00	; 0
    2d18:	08 95       	ret

00002d1a <DIO_SetPinPullUp>:
    2d1a:	81 30       	cpi	r24, 0x01	; 1
    2d1c:	89 f0       	breq	.+34     	; 0x2d40 <DIO_SetPinPullUp+0x26>
    2d1e:	28 f0       	brcs	.+10     	; 0x2d2a <DIO_SetPinPullUp+0x10>
    2d20:	82 30       	cpi	r24, 0x02	; 2
    2d22:	c9 f0       	breq	.+50     	; 0x2d56 <DIO_SetPinPullUp+0x3c>
    2d24:	83 30       	cpi	r24, 0x03	; 3
    2d26:	11 f1       	breq	.+68     	; 0x2d6c <DIO_SetPinPullUp+0x52>
    2d28:	08 95       	ret
    2d2a:	2b b3       	in	r18, 0x1b	; 27
    2d2c:	81 e0       	ldi	r24, 0x01	; 1
    2d2e:	90 e0       	ldi	r25, 0x00	; 0
    2d30:	02 c0       	rjmp	.+4      	; 0x2d36 <DIO_SetPinPullUp+0x1c>
    2d32:	88 0f       	add	r24, r24
    2d34:	99 1f       	adc	r25, r25
    2d36:	6a 95       	dec	r22
    2d38:	e2 f7       	brpl	.-8      	; 0x2d32 <DIO_SetPinPullUp+0x18>
    2d3a:	82 2b       	or	r24, r18
    2d3c:	8b bb       	out	0x1b, r24	; 27
    2d3e:	08 95       	ret
    2d40:	28 b3       	in	r18, 0x18	; 24
    2d42:	81 e0       	ldi	r24, 0x01	; 1
    2d44:	90 e0       	ldi	r25, 0x00	; 0
    2d46:	02 c0       	rjmp	.+4      	; 0x2d4c <DIO_SetPinPullUp+0x32>
    2d48:	88 0f       	add	r24, r24
    2d4a:	99 1f       	adc	r25, r25
    2d4c:	6a 95       	dec	r22
    2d4e:	e2 f7       	brpl	.-8      	; 0x2d48 <DIO_SetPinPullUp+0x2e>
    2d50:	82 2b       	or	r24, r18
    2d52:	88 bb       	out	0x18, r24	; 24
    2d54:	08 95       	ret
    2d56:	25 b3       	in	r18, 0x15	; 21
    2d58:	81 e0       	ldi	r24, 0x01	; 1
    2d5a:	90 e0       	ldi	r25, 0x00	; 0
    2d5c:	02 c0       	rjmp	.+4      	; 0x2d62 <DIO_SetPinPullUp+0x48>
    2d5e:	88 0f       	add	r24, r24
    2d60:	99 1f       	adc	r25, r25
    2d62:	6a 95       	dec	r22
    2d64:	e2 f7       	brpl	.-8      	; 0x2d5e <DIO_SetPinPullUp+0x44>
    2d66:	82 2b       	or	r24, r18
    2d68:	85 bb       	out	0x15, r24	; 21
    2d6a:	08 95       	ret
    2d6c:	22 b3       	in	r18, 0x12	; 18
    2d6e:	81 e0       	ldi	r24, 0x01	; 1
    2d70:	90 e0       	ldi	r25, 0x00	; 0
    2d72:	02 c0       	rjmp	.+4      	; 0x2d78 <DIO_SetPinPullUp+0x5e>
    2d74:	88 0f       	add	r24, r24
    2d76:	99 1f       	adc	r25, r25
    2d78:	6a 95       	dec	r22
    2d7a:	e2 f7       	brpl	.-8      	; 0x2d74 <DIO_SetPinPullUp+0x5a>
    2d7c:	82 2b       	or	r24, r18
    2d7e:	82 bb       	out	0x12, r24	; 18
    2d80:	08 95       	ret

00002d82 <__subsf3>:
    2d82:	50 58       	subi	r21, 0x80	; 128

00002d84 <__addsf3>:
    2d84:	bb 27       	eor	r27, r27
    2d86:	aa 27       	eor	r26, r26
    2d88:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <__addsf3x>
    2d8c:	0c 94 98 18 	jmp	0x3130	; 0x3130 <__fp_round>
    2d90:	0e 94 8a 18 	call	0x3114	; 0x3114 <__fp_pscA>
    2d94:	38 f0       	brcs	.+14     	; 0x2da4 <__addsf3+0x20>
    2d96:	0e 94 91 18 	call	0x3122	; 0x3122 <__fp_pscB>
    2d9a:	20 f0       	brcs	.+8      	; 0x2da4 <__addsf3+0x20>
    2d9c:	39 f4       	brne	.+14     	; 0x2dac <__addsf3+0x28>
    2d9e:	9f 3f       	cpi	r25, 0xFF	; 255
    2da0:	19 f4       	brne	.+6      	; 0x2da8 <__addsf3+0x24>
    2da2:	26 f4       	brtc	.+8      	; 0x2dac <__addsf3+0x28>
    2da4:	0c 94 77 18 	jmp	0x30ee	; 0x30ee <__fp_nan>
    2da8:	0e f4       	brtc	.+2      	; 0x2dac <__addsf3+0x28>
    2daa:	e0 95       	com	r30
    2dac:	e7 fb       	bst	r30, 7
    2dae:	0c 94 71 18 	jmp	0x30e2	; 0x30e2 <__fp_inf>

00002db2 <__addsf3x>:
    2db2:	e9 2f       	mov	r30, r25
    2db4:	0e 94 a9 18 	call	0x3152	; 0x3152 <__fp_split3>
    2db8:	58 f3       	brcs	.-42     	; 0x2d90 <__addsf3+0xc>
    2dba:	ba 17       	cp	r27, r26
    2dbc:	62 07       	cpc	r22, r18
    2dbe:	73 07       	cpc	r23, r19
    2dc0:	84 07       	cpc	r24, r20
    2dc2:	95 07       	cpc	r25, r21
    2dc4:	20 f0       	brcs	.+8      	; 0x2dce <__addsf3x+0x1c>
    2dc6:	79 f4       	brne	.+30     	; 0x2de6 <__addsf3x+0x34>
    2dc8:	a6 f5       	brtc	.+104    	; 0x2e32 <__addsf3x+0x80>
    2dca:	0c 94 cb 18 	jmp	0x3196	; 0x3196 <__fp_zero>
    2dce:	0e f4       	brtc	.+2      	; 0x2dd2 <__addsf3x+0x20>
    2dd0:	e0 95       	com	r30
    2dd2:	0b 2e       	mov	r0, r27
    2dd4:	ba 2f       	mov	r27, r26
    2dd6:	a0 2d       	mov	r26, r0
    2dd8:	0b 01       	movw	r0, r22
    2dda:	b9 01       	movw	r22, r18
    2ddc:	90 01       	movw	r18, r0
    2dde:	0c 01       	movw	r0, r24
    2de0:	ca 01       	movw	r24, r20
    2de2:	a0 01       	movw	r20, r0
    2de4:	11 24       	eor	r1, r1
    2de6:	ff 27       	eor	r31, r31
    2de8:	59 1b       	sub	r21, r25
    2dea:	99 f0       	breq	.+38     	; 0x2e12 <__addsf3x+0x60>
    2dec:	59 3f       	cpi	r21, 0xF9	; 249
    2dee:	50 f4       	brcc	.+20     	; 0x2e04 <__addsf3x+0x52>
    2df0:	50 3e       	cpi	r21, 0xE0	; 224
    2df2:	68 f1       	brcs	.+90     	; 0x2e4e <__addsf3x+0x9c>
    2df4:	1a 16       	cp	r1, r26
    2df6:	f0 40       	sbci	r31, 0x00	; 0
    2df8:	a2 2f       	mov	r26, r18
    2dfa:	23 2f       	mov	r18, r19
    2dfc:	34 2f       	mov	r19, r20
    2dfe:	44 27       	eor	r20, r20
    2e00:	58 5f       	subi	r21, 0xF8	; 248
    2e02:	f3 cf       	rjmp	.-26     	; 0x2dea <__addsf3x+0x38>
    2e04:	46 95       	lsr	r20
    2e06:	37 95       	ror	r19
    2e08:	27 95       	ror	r18
    2e0a:	a7 95       	ror	r26
    2e0c:	f0 40       	sbci	r31, 0x00	; 0
    2e0e:	53 95       	inc	r21
    2e10:	c9 f7       	brne	.-14     	; 0x2e04 <__addsf3x+0x52>
    2e12:	7e f4       	brtc	.+30     	; 0x2e32 <__addsf3x+0x80>
    2e14:	1f 16       	cp	r1, r31
    2e16:	ba 0b       	sbc	r27, r26
    2e18:	62 0b       	sbc	r22, r18
    2e1a:	73 0b       	sbc	r23, r19
    2e1c:	84 0b       	sbc	r24, r20
    2e1e:	ba f0       	brmi	.+46     	; 0x2e4e <__addsf3x+0x9c>
    2e20:	91 50       	subi	r25, 0x01	; 1
    2e22:	a1 f0       	breq	.+40     	; 0x2e4c <__addsf3x+0x9a>
    2e24:	ff 0f       	add	r31, r31
    2e26:	bb 1f       	adc	r27, r27
    2e28:	66 1f       	adc	r22, r22
    2e2a:	77 1f       	adc	r23, r23
    2e2c:	88 1f       	adc	r24, r24
    2e2e:	c2 f7       	brpl	.-16     	; 0x2e20 <__addsf3x+0x6e>
    2e30:	0e c0       	rjmp	.+28     	; 0x2e4e <__addsf3x+0x9c>
    2e32:	ba 0f       	add	r27, r26
    2e34:	62 1f       	adc	r22, r18
    2e36:	73 1f       	adc	r23, r19
    2e38:	84 1f       	adc	r24, r20
    2e3a:	48 f4       	brcc	.+18     	; 0x2e4e <__addsf3x+0x9c>
    2e3c:	87 95       	ror	r24
    2e3e:	77 95       	ror	r23
    2e40:	67 95       	ror	r22
    2e42:	b7 95       	ror	r27
    2e44:	f7 95       	ror	r31
    2e46:	9e 3f       	cpi	r25, 0xFE	; 254
    2e48:	08 f0       	brcs	.+2      	; 0x2e4c <__addsf3x+0x9a>
    2e4a:	b0 cf       	rjmp	.-160    	; 0x2dac <__addsf3+0x28>
    2e4c:	93 95       	inc	r25
    2e4e:	88 0f       	add	r24, r24
    2e50:	08 f0       	brcs	.+2      	; 0x2e54 <__addsf3x+0xa2>
    2e52:	99 27       	eor	r25, r25
    2e54:	ee 0f       	add	r30, r30
    2e56:	97 95       	ror	r25
    2e58:	87 95       	ror	r24
    2e5a:	08 95       	ret

00002e5c <__cmpsf2>:
    2e5c:	0e 94 4d 18 	call	0x309a	; 0x309a <__fp_cmp>
    2e60:	08 f4       	brcc	.+2      	; 0x2e64 <__cmpsf2+0x8>
    2e62:	81 e0       	ldi	r24, 0x01	; 1
    2e64:	08 95       	ret

00002e66 <__divsf3>:
    2e66:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <__divsf3x>
    2e6a:	0c 94 98 18 	jmp	0x3130	; 0x3130 <__fp_round>
    2e6e:	0e 94 91 18 	call	0x3122	; 0x3122 <__fp_pscB>
    2e72:	58 f0       	brcs	.+22     	; 0x2e8a <__divsf3+0x24>
    2e74:	0e 94 8a 18 	call	0x3114	; 0x3114 <__fp_pscA>
    2e78:	40 f0       	brcs	.+16     	; 0x2e8a <__divsf3+0x24>
    2e7a:	29 f4       	brne	.+10     	; 0x2e86 <__divsf3+0x20>
    2e7c:	5f 3f       	cpi	r21, 0xFF	; 255
    2e7e:	29 f0       	breq	.+10     	; 0x2e8a <__divsf3+0x24>
    2e80:	0c 94 71 18 	jmp	0x30e2	; 0x30e2 <__fp_inf>
    2e84:	51 11       	cpse	r21, r1
    2e86:	0c 94 cc 18 	jmp	0x3198	; 0x3198 <__fp_szero>
    2e8a:	0c 94 77 18 	jmp	0x30ee	; 0x30ee <__fp_nan>

00002e8e <__divsf3x>:
    2e8e:	0e 94 a9 18 	call	0x3152	; 0x3152 <__fp_split3>
    2e92:	68 f3       	brcs	.-38     	; 0x2e6e <__divsf3+0x8>

00002e94 <__divsf3_pse>:
    2e94:	99 23       	and	r25, r25
    2e96:	b1 f3       	breq	.-20     	; 0x2e84 <__divsf3+0x1e>
    2e98:	55 23       	and	r21, r21
    2e9a:	91 f3       	breq	.-28     	; 0x2e80 <__divsf3+0x1a>
    2e9c:	95 1b       	sub	r25, r21
    2e9e:	55 0b       	sbc	r21, r21
    2ea0:	bb 27       	eor	r27, r27
    2ea2:	aa 27       	eor	r26, r26
    2ea4:	62 17       	cp	r22, r18
    2ea6:	73 07       	cpc	r23, r19
    2ea8:	84 07       	cpc	r24, r20
    2eaa:	38 f0       	brcs	.+14     	; 0x2eba <__divsf3_pse+0x26>
    2eac:	9f 5f       	subi	r25, 0xFF	; 255
    2eae:	5f 4f       	sbci	r21, 0xFF	; 255
    2eb0:	22 0f       	add	r18, r18
    2eb2:	33 1f       	adc	r19, r19
    2eb4:	44 1f       	adc	r20, r20
    2eb6:	aa 1f       	adc	r26, r26
    2eb8:	a9 f3       	breq	.-22     	; 0x2ea4 <__divsf3_pse+0x10>
    2eba:	35 d0       	rcall	.+106    	; 0x2f26 <__divsf3_pse+0x92>
    2ebc:	0e 2e       	mov	r0, r30
    2ebe:	3a f0       	brmi	.+14     	; 0x2ece <__divsf3_pse+0x3a>
    2ec0:	e0 e8       	ldi	r30, 0x80	; 128
    2ec2:	32 d0       	rcall	.+100    	; 0x2f28 <__divsf3_pse+0x94>
    2ec4:	91 50       	subi	r25, 0x01	; 1
    2ec6:	50 40       	sbci	r21, 0x00	; 0
    2ec8:	e6 95       	lsr	r30
    2eca:	00 1c       	adc	r0, r0
    2ecc:	ca f7       	brpl	.-14     	; 0x2ec0 <__divsf3_pse+0x2c>
    2ece:	2b d0       	rcall	.+86     	; 0x2f26 <__divsf3_pse+0x92>
    2ed0:	fe 2f       	mov	r31, r30
    2ed2:	29 d0       	rcall	.+82     	; 0x2f26 <__divsf3_pse+0x92>
    2ed4:	66 0f       	add	r22, r22
    2ed6:	77 1f       	adc	r23, r23
    2ed8:	88 1f       	adc	r24, r24
    2eda:	bb 1f       	adc	r27, r27
    2edc:	26 17       	cp	r18, r22
    2ede:	37 07       	cpc	r19, r23
    2ee0:	48 07       	cpc	r20, r24
    2ee2:	ab 07       	cpc	r26, r27
    2ee4:	b0 e8       	ldi	r27, 0x80	; 128
    2ee6:	09 f0       	breq	.+2      	; 0x2eea <__divsf3_pse+0x56>
    2ee8:	bb 0b       	sbc	r27, r27
    2eea:	80 2d       	mov	r24, r0
    2eec:	bf 01       	movw	r22, r30
    2eee:	ff 27       	eor	r31, r31
    2ef0:	93 58       	subi	r25, 0x83	; 131
    2ef2:	5f 4f       	sbci	r21, 0xFF	; 255
    2ef4:	3a f0       	brmi	.+14     	; 0x2f04 <__divsf3_pse+0x70>
    2ef6:	9e 3f       	cpi	r25, 0xFE	; 254
    2ef8:	51 05       	cpc	r21, r1
    2efa:	78 f0       	brcs	.+30     	; 0x2f1a <__divsf3_pse+0x86>
    2efc:	0c 94 71 18 	jmp	0x30e2	; 0x30e2 <__fp_inf>
    2f00:	0c 94 cc 18 	jmp	0x3198	; 0x3198 <__fp_szero>
    2f04:	5f 3f       	cpi	r21, 0xFF	; 255
    2f06:	e4 f3       	brlt	.-8      	; 0x2f00 <__divsf3_pse+0x6c>
    2f08:	98 3e       	cpi	r25, 0xE8	; 232
    2f0a:	d4 f3       	brlt	.-12     	; 0x2f00 <__divsf3_pse+0x6c>
    2f0c:	86 95       	lsr	r24
    2f0e:	77 95       	ror	r23
    2f10:	67 95       	ror	r22
    2f12:	b7 95       	ror	r27
    2f14:	f7 95       	ror	r31
    2f16:	9f 5f       	subi	r25, 0xFF	; 255
    2f18:	c9 f7       	brne	.-14     	; 0x2f0c <__divsf3_pse+0x78>
    2f1a:	88 0f       	add	r24, r24
    2f1c:	91 1d       	adc	r25, r1
    2f1e:	96 95       	lsr	r25
    2f20:	87 95       	ror	r24
    2f22:	97 f9       	bld	r25, 7
    2f24:	08 95       	ret
    2f26:	e1 e0       	ldi	r30, 0x01	; 1
    2f28:	66 0f       	add	r22, r22
    2f2a:	77 1f       	adc	r23, r23
    2f2c:	88 1f       	adc	r24, r24
    2f2e:	bb 1f       	adc	r27, r27
    2f30:	62 17       	cp	r22, r18
    2f32:	73 07       	cpc	r23, r19
    2f34:	84 07       	cpc	r24, r20
    2f36:	ba 07       	cpc	r27, r26
    2f38:	20 f0       	brcs	.+8      	; 0x2f42 <__divsf3_pse+0xae>
    2f3a:	62 1b       	sub	r22, r18
    2f3c:	73 0b       	sbc	r23, r19
    2f3e:	84 0b       	sbc	r24, r20
    2f40:	ba 0b       	sbc	r27, r26
    2f42:	ee 1f       	adc	r30, r30
    2f44:	88 f7       	brcc	.-30     	; 0x2f28 <__divsf3_pse+0x94>
    2f46:	e0 95       	com	r30
    2f48:	08 95       	ret

00002f4a <__fixsfdi>:
    2f4a:	be e3       	ldi	r27, 0x3E	; 62
    2f4c:	04 d0       	rcall	.+8      	; 0x2f56 <__fixunssfdi+0x2>
    2f4e:	08 f4       	brcc	.+2      	; 0x2f52 <__fixsfdi+0x8>
    2f50:	90 e8       	ldi	r25, 0x80	; 128
    2f52:	08 95       	ret

00002f54 <__fixunssfdi>:
    2f54:	bf e3       	ldi	r27, 0x3F	; 63
    2f56:	22 27       	eor	r18, r18
    2f58:	33 27       	eor	r19, r19
    2f5a:	a9 01       	movw	r20, r18
    2f5c:	0e 94 b1 18 	call	0x3162	; 0x3162 <__fp_splitA>
    2f60:	60 f1       	brcs	.+88     	; 0x2fba <__fixunssfdi+0x66>
    2f62:	9f 57       	subi	r25, 0x7F	; 127
    2f64:	48 f1       	brcs	.+82     	; 0x2fb8 <__fixunssfdi+0x64>
    2f66:	b9 17       	cp	r27, r25
    2f68:	40 f1       	brcs	.+80     	; 0x2fba <__fixunssfdi+0x66>
    2f6a:	bf e3       	ldi	r27, 0x3F	; 63
    2f6c:	b9 1b       	sub	r27, r25
    2f6e:	99 27       	eor	r25, r25
    2f70:	b8 50       	subi	r27, 0x08	; 8
    2f72:	3a f4       	brpl	.+14     	; 0x2f82 <__fixunssfdi+0x2e>
    2f74:	66 0f       	add	r22, r22
    2f76:	77 1f       	adc	r23, r23
    2f78:	88 1f       	adc	r24, r24
    2f7a:	99 1f       	adc	r25, r25
    2f7c:	b3 95       	inc	r27
    2f7e:	d2 f3       	brmi	.-12     	; 0x2f74 <__fixunssfdi+0x20>
    2f80:	16 c0       	rjmp	.+44     	; 0x2fae <__fixunssfdi+0x5a>
    2f82:	b8 50       	subi	r27, 0x08	; 8
    2f84:	4a f0       	brmi	.+18     	; 0x2f98 <__fixunssfdi+0x44>
    2f86:	23 2f       	mov	r18, r19
    2f88:	34 2f       	mov	r19, r20
    2f8a:	45 2f       	mov	r20, r21
    2f8c:	56 2f       	mov	r21, r22
    2f8e:	67 2f       	mov	r22, r23
    2f90:	78 2f       	mov	r23, r24
    2f92:	88 27       	eor	r24, r24
    2f94:	b8 50       	subi	r27, 0x08	; 8
    2f96:	ba f7       	brpl	.-18     	; 0x2f86 <__fixunssfdi+0x32>
    2f98:	b8 5f       	subi	r27, 0xF8	; 248
    2f9a:	49 f0       	breq	.+18     	; 0x2fae <__fixunssfdi+0x5a>
    2f9c:	86 95       	lsr	r24
    2f9e:	77 95       	ror	r23
    2fa0:	67 95       	ror	r22
    2fa2:	57 95       	ror	r21
    2fa4:	47 95       	ror	r20
    2fa6:	37 95       	ror	r19
    2fa8:	27 95       	ror	r18
    2faa:	ba 95       	dec	r27
    2fac:	b9 f7       	brne	.-18     	; 0x2f9c <__fixunssfdi+0x48>
    2fae:	16 f4       	brtc	.+4      	; 0x2fb4 <__fixunssfdi+0x60>
    2fb0:	0e 94 7a 18 	call	0x30f4	; 0x30f4 <__fp_negdi>
    2fb4:	88 94       	clc
    2fb6:	08 95       	ret
    2fb8:	88 94       	clc
    2fba:	60 e0       	ldi	r22, 0x00	; 0
    2fbc:	70 e0       	ldi	r23, 0x00	; 0
    2fbe:	cb 01       	movw	r24, r22
    2fc0:	08 95       	ret

00002fc2 <__fixunssfsi>:
    2fc2:	0e 94 b1 18 	call	0x3162	; 0x3162 <__fp_splitA>
    2fc6:	88 f0       	brcs	.+34     	; 0x2fea <__fixunssfsi+0x28>
    2fc8:	9f 57       	subi	r25, 0x7F	; 127
    2fca:	98 f0       	brcs	.+38     	; 0x2ff2 <__fixunssfsi+0x30>
    2fcc:	b9 2f       	mov	r27, r25
    2fce:	99 27       	eor	r25, r25
    2fd0:	b7 51       	subi	r27, 0x17	; 23
    2fd2:	b0 f0       	brcs	.+44     	; 0x3000 <__fixunssfsi+0x3e>
    2fd4:	e1 f0       	breq	.+56     	; 0x300e <__fixunssfsi+0x4c>
    2fd6:	66 0f       	add	r22, r22
    2fd8:	77 1f       	adc	r23, r23
    2fda:	88 1f       	adc	r24, r24
    2fdc:	99 1f       	adc	r25, r25
    2fde:	1a f0       	brmi	.+6      	; 0x2fe6 <__fixunssfsi+0x24>
    2fe0:	ba 95       	dec	r27
    2fe2:	c9 f7       	brne	.-14     	; 0x2fd6 <__fixunssfsi+0x14>
    2fe4:	14 c0       	rjmp	.+40     	; 0x300e <__fixunssfsi+0x4c>
    2fe6:	b1 30       	cpi	r27, 0x01	; 1
    2fe8:	91 f0       	breq	.+36     	; 0x300e <__fixunssfsi+0x4c>
    2fea:	0e 94 cb 18 	call	0x3196	; 0x3196 <__fp_zero>
    2fee:	b1 e0       	ldi	r27, 0x01	; 1
    2ff0:	08 95       	ret
    2ff2:	0c 94 cb 18 	jmp	0x3196	; 0x3196 <__fp_zero>
    2ff6:	67 2f       	mov	r22, r23
    2ff8:	78 2f       	mov	r23, r24
    2ffa:	88 27       	eor	r24, r24
    2ffc:	b8 5f       	subi	r27, 0xF8	; 248
    2ffe:	39 f0       	breq	.+14     	; 0x300e <__fixunssfsi+0x4c>
    3000:	b9 3f       	cpi	r27, 0xF9	; 249
    3002:	cc f3       	brlt	.-14     	; 0x2ff6 <__fixunssfsi+0x34>
    3004:	86 95       	lsr	r24
    3006:	77 95       	ror	r23
    3008:	67 95       	ror	r22
    300a:	b3 95       	inc	r27
    300c:	d9 f7       	brne	.-10     	; 0x3004 <__fixunssfsi+0x42>
    300e:	3e f4       	brtc	.+14     	; 0x301e <__fixunssfsi+0x5c>
    3010:	90 95       	com	r25
    3012:	80 95       	com	r24
    3014:	70 95       	com	r23
    3016:	61 95       	neg	r22
    3018:	7f 4f       	sbci	r23, 0xFF	; 255
    301a:	8f 4f       	sbci	r24, 0xFF	; 255
    301c:	9f 4f       	sbci	r25, 0xFF	; 255
    301e:	08 95       	ret

00003020 <__floatunsisf>:
    3020:	e8 94       	clt
    3022:	09 c0       	rjmp	.+18     	; 0x3036 <__floatsisf+0x12>

00003024 <__floatsisf>:
    3024:	97 fb       	bst	r25, 7
    3026:	3e f4       	brtc	.+14     	; 0x3036 <__floatsisf+0x12>
    3028:	90 95       	com	r25
    302a:	80 95       	com	r24
    302c:	70 95       	com	r23
    302e:	61 95       	neg	r22
    3030:	7f 4f       	sbci	r23, 0xFF	; 255
    3032:	8f 4f       	sbci	r24, 0xFF	; 255
    3034:	9f 4f       	sbci	r25, 0xFF	; 255
    3036:	99 23       	and	r25, r25
    3038:	a9 f0       	breq	.+42     	; 0x3064 <__floatsisf+0x40>
    303a:	f9 2f       	mov	r31, r25
    303c:	96 e9       	ldi	r25, 0x96	; 150
    303e:	bb 27       	eor	r27, r27
    3040:	93 95       	inc	r25
    3042:	f6 95       	lsr	r31
    3044:	87 95       	ror	r24
    3046:	77 95       	ror	r23
    3048:	67 95       	ror	r22
    304a:	b7 95       	ror	r27
    304c:	f1 11       	cpse	r31, r1
    304e:	f8 cf       	rjmp	.-16     	; 0x3040 <__floatsisf+0x1c>
    3050:	fa f4       	brpl	.+62     	; 0x3090 <__floatsisf+0x6c>
    3052:	bb 0f       	add	r27, r27
    3054:	11 f4       	brne	.+4      	; 0x305a <__floatsisf+0x36>
    3056:	60 ff       	sbrs	r22, 0
    3058:	1b c0       	rjmp	.+54     	; 0x3090 <__floatsisf+0x6c>
    305a:	6f 5f       	subi	r22, 0xFF	; 255
    305c:	7f 4f       	sbci	r23, 0xFF	; 255
    305e:	8f 4f       	sbci	r24, 0xFF	; 255
    3060:	9f 4f       	sbci	r25, 0xFF	; 255
    3062:	16 c0       	rjmp	.+44     	; 0x3090 <__floatsisf+0x6c>
    3064:	88 23       	and	r24, r24
    3066:	11 f0       	breq	.+4      	; 0x306c <__floatsisf+0x48>
    3068:	96 e9       	ldi	r25, 0x96	; 150
    306a:	11 c0       	rjmp	.+34     	; 0x308e <__floatsisf+0x6a>
    306c:	77 23       	and	r23, r23
    306e:	21 f0       	breq	.+8      	; 0x3078 <__floatsisf+0x54>
    3070:	9e e8       	ldi	r25, 0x8E	; 142
    3072:	87 2f       	mov	r24, r23
    3074:	76 2f       	mov	r23, r22
    3076:	05 c0       	rjmp	.+10     	; 0x3082 <__floatsisf+0x5e>
    3078:	66 23       	and	r22, r22
    307a:	71 f0       	breq	.+28     	; 0x3098 <__floatsisf+0x74>
    307c:	96 e8       	ldi	r25, 0x86	; 134
    307e:	86 2f       	mov	r24, r22
    3080:	70 e0       	ldi	r23, 0x00	; 0
    3082:	60 e0       	ldi	r22, 0x00	; 0
    3084:	2a f0       	brmi	.+10     	; 0x3090 <__floatsisf+0x6c>
    3086:	9a 95       	dec	r25
    3088:	66 0f       	add	r22, r22
    308a:	77 1f       	adc	r23, r23
    308c:	88 1f       	adc	r24, r24
    308e:	da f7       	brpl	.-10     	; 0x3086 <__floatsisf+0x62>
    3090:	88 0f       	add	r24, r24
    3092:	96 95       	lsr	r25
    3094:	87 95       	ror	r24
    3096:	97 f9       	bld	r25, 7
    3098:	08 95       	ret

0000309a <__fp_cmp>:
    309a:	99 0f       	add	r25, r25
    309c:	00 08       	sbc	r0, r0
    309e:	55 0f       	add	r21, r21
    30a0:	aa 0b       	sbc	r26, r26
    30a2:	e0 e8       	ldi	r30, 0x80	; 128
    30a4:	fe ef       	ldi	r31, 0xFE	; 254
    30a6:	16 16       	cp	r1, r22
    30a8:	17 06       	cpc	r1, r23
    30aa:	e8 07       	cpc	r30, r24
    30ac:	f9 07       	cpc	r31, r25
    30ae:	c0 f0       	brcs	.+48     	; 0x30e0 <__fp_cmp+0x46>
    30b0:	12 16       	cp	r1, r18
    30b2:	13 06       	cpc	r1, r19
    30b4:	e4 07       	cpc	r30, r20
    30b6:	f5 07       	cpc	r31, r21
    30b8:	98 f0       	brcs	.+38     	; 0x30e0 <__fp_cmp+0x46>
    30ba:	62 1b       	sub	r22, r18
    30bc:	73 0b       	sbc	r23, r19
    30be:	84 0b       	sbc	r24, r20
    30c0:	95 0b       	sbc	r25, r21
    30c2:	39 f4       	brne	.+14     	; 0x30d2 <__fp_cmp+0x38>
    30c4:	0a 26       	eor	r0, r26
    30c6:	61 f0       	breq	.+24     	; 0x30e0 <__fp_cmp+0x46>
    30c8:	23 2b       	or	r18, r19
    30ca:	24 2b       	or	r18, r20
    30cc:	25 2b       	or	r18, r21
    30ce:	21 f4       	brne	.+8      	; 0x30d8 <__fp_cmp+0x3e>
    30d0:	08 95       	ret
    30d2:	0a 26       	eor	r0, r26
    30d4:	09 f4       	brne	.+2      	; 0x30d8 <__fp_cmp+0x3e>
    30d6:	a1 40       	sbci	r26, 0x01	; 1
    30d8:	a6 95       	lsr	r26
    30da:	8f ef       	ldi	r24, 0xFF	; 255
    30dc:	81 1d       	adc	r24, r1
    30de:	81 1d       	adc	r24, r1
    30e0:	08 95       	ret

000030e2 <__fp_inf>:
    30e2:	97 f9       	bld	r25, 7
    30e4:	9f 67       	ori	r25, 0x7F	; 127
    30e6:	80 e8       	ldi	r24, 0x80	; 128
    30e8:	70 e0       	ldi	r23, 0x00	; 0
    30ea:	60 e0       	ldi	r22, 0x00	; 0
    30ec:	08 95       	ret

000030ee <__fp_nan>:
    30ee:	9f ef       	ldi	r25, 0xFF	; 255
    30f0:	80 ec       	ldi	r24, 0xC0	; 192
    30f2:	08 95       	ret

000030f4 <__fp_negdi>:
    30f4:	90 95       	com	r25
    30f6:	80 95       	com	r24
    30f8:	70 95       	com	r23
    30fa:	60 95       	com	r22
    30fc:	50 95       	com	r21
    30fe:	40 95       	com	r20
    3100:	30 95       	com	r19
    3102:	21 95       	neg	r18
    3104:	3f 4f       	sbci	r19, 0xFF	; 255
    3106:	4f 4f       	sbci	r20, 0xFF	; 255
    3108:	5f 4f       	sbci	r21, 0xFF	; 255
    310a:	6f 4f       	sbci	r22, 0xFF	; 255
    310c:	7f 4f       	sbci	r23, 0xFF	; 255
    310e:	8f 4f       	sbci	r24, 0xFF	; 255
    3110:	9f 4f       	sbci	r25, 0xFF	; 255
    3112:	08 95       	ret

00003114 <__fp_pscA>:
    3114:	00 24       	eor	r0, r0
    3116:	0a 94       	dec	r0
    3118:	16 16       	cp	r1, r22
    311a:	17 06       	cpc	r1, r23
    311c:	18 06       	cpc	r1, r24
    311e:	09 06       	cpc	r0, r25
    3120:	08 95       	ret

00003122 <__fp_pscB>:
    3122:	00 24       	eor	r0, r0
    3124:	0a 94       	dec	r0
    3126:	12 16       	cp	r1, r18
    3128:	13 06       	cpc	r1, r19
    312a:	14 06       	cpc	r1, r20
    312c:	05 06       	cpc	r0, r21
    312e:	08 95       	ret

00003130 <__fp_round>:
    3130:	09 2e       	mov	r0, r25
    3132:	03 94       	inc	r0
    3134:	00 0c       	add	r0, r0
    3136:	11 f4       	brne	.+4      	; 0x313c <__fp_round+0xc>
    3138:	88 23       	and	r24, r24
    313a:	52 f0       	brmi	.+20     	; 0x3150 <__fp_round+0x20>
    313c:	bb 0f       	add	r27, r27
    313e:	40 f4       	brcc	.+16     	; 0x3150 <__fp_round+0x20>
    3140:	bf 2b       	or	r27, r31
    3142:	11 f4       	brne	.+4      	; 0x3148 <__fp_round+0x18>
    3144:	60 ff       	sbrs	r22, 0
    3146:	04 c0       	rjmp	.+8      	; 0x3150 <__fp_round+0x20>
    3148:	6f 5f       	subi	r22, 0xFF	; 255
    314a:	7f 4f       	sbci	r23, 0xFF	; 255
    314c:	8f 4f       	sbci	r24, 0xFF	; 255
    314e:	9f 4f       	sbci	r25, 0xFF	; 255
    3150:	08 95       	ret

00003152 <__fp_split3>:
    3152:	57 fd       	sbrc	r21, 7
    3154:	90 58       	subi	r25, 0x80	; 128
    3156:	44 0f       	add	r20, r20
    3158:	55 1f       	adc	r21, r21
    315a:	59 f0       	breq	.+22     	; 0x3172 <__fp_splitA+0x10>
    315c:	5f 3f       	cpi	r21, 0xFF	; 255
    315e:	71 f0       	breq	.+28     	; 0x317c <__fp_splitA+0x1a>
    3160:	47 95       	ror	r20

00003162 <__fp_splitA>:
    3162:	88 0f       	add	r24, r24
    3164:	97 fb       	bst	r25, 7
    3166:	99 1f       	adc	r25, r25
    3168:	61 f0       	breq	.+24     	; 0x3182 <__fp_splitA+0x20>
    316a:	9f 3f       	cpi	r25, 0xFF	; 255
    316c:	79 f0       	breq	.+30     	; 0x318c <__fp_splitA+0x2a>
    316e:	87 95       	ror	r24
    3170:	08 95       	ret
    3172:	12 16       	cp	r1, r18
    3174:	13 06       	cpc	r1, r19
    3176:	14 06       	cpc	r1, r20
    3178:	55 1f       	adc	r21, r21
    317a:	f2 cf       	rjmp	.-28     	; 0x3160 <__fp_split3+0xe>
    317c:	46 95       	lsr	r20
    317e:	f1 df       	rcall	.-30     	; 0x3162 <__fp_splitA>
    3180:	08 c0       	rjmp	.+16     	; 0x3192 <__fp_splitA+0x30>
    3182:	16 16       	cp	r1, r22
    3184:	17 06       	cpc	r1, r23
    3186:	18 06       	cpc	r1, r24
    3188:	99 1f       	adc	r25, r25
    318a:	f1 cf       	rjmp	.-30     	; 0x316e <__fp_splitA+0xc>
    318c:	86 95       	lsr	r24
    318e:	71 05       	cpc	r23, r1
    3190:	61 05       	cpc	r22, r1
    3192:	08 94       	sec
    3194:	08 95       	ret

00003196 <__fp_zero>:
    3196:	e8 94       	clt

00003198 <__fp_szero>:
    3198:	bb 27       	eor	r27, r27
    319a:	66 27       	eor	r22, r22
    319c:	77 27       	eor	r23, r23
    319e:	cb 01       	movw	r24, r22
    31a0:	97 f9       	bld	r25, 7
    31a2:	08 95       	ret

000031a4 <__gesf2>:
    31a4:	0e 94 4d 18 	call	0x309a	; 0x309a <__fp_cmp>
    31a8:	08 f4       	brcc	.+2      	; 0x31ac <__gesf2+0x8>
    31aa:	8f ef       	ldi	r24, 0xFF	; 255
    31ac:	08 95       	ret

000031ae <__mulsf3>:
    31ae:	0e 94 ea 18 	call	0x31d4	; 0x31d4 <__mulsf3x>
    31b2:	0c 94 98 18 	jmp	0x3130	; 0x3130 <__fp_round>
    31b6:	0e 94 8a 18 	call	0x3114	; 0x3114 <__fp_pscA>
    31ba:	38 f0       	brcs	.+14     	; 0x31ca <__mulsf3+0x1c>
    31bc:	0e 94 91 18 	call	0x3122	; 0x3122 <__fp_pscB>
    31c0:	20 f0       	brcs	.+8      	; 0x31ca <__mulsf3+0x1c>
    31c2:	95 23       	and	r25, r21
    31c4:	11 f0       	breq	.+4      	; 0x31ca <__mulsf3+0x1c>
    31c6:	0c 94 71 18 	jmp	0x30e2	; 0x30e2 <__fp_inf>
    31ca:	0c 94 77 18 	jmp	0x30ee	; 0x30ee <__fp_nan>
    31ce:	11 24       	eor	r1, r1
    31d0:	0c 94 cc 18 	jmp	0x3198	; 0x3198 <__fp_szero>

000031d4 <__mulsf3x>:
    31d4:	0e 94 a9 18 	call	0x3152	; 0x3152 <__fp_split3>
    31d8:	70 f3       	brcs	.-36     	; 0x31b6 <__mulsf3+0x8>

000031da <__mulsf3_pse>:
    31da:	95 9f       	mul	r25, r21
    31dc:	c1 f3       	breq	.-16     	; 0x31ce <__mulsf3+0x20>
    31de:	95 0f       	add	r25, r21
    31e0:	50 e0       	ldi	r21, 0x00	; 0
    31e2:	55 1f       	adc	r21, r21
    31e4:	62 9f       	mul	r22, r18
    31e6:	f0 01       	movw	r30, r0
    31e8:	72 9f       	mul	r23, r18
    31ea:	bb 27       	eor	r27, r27
    31ec:	f0 0d       	add	r31, r0
    31ee:	b1 1d       	adc	r27, r1
    31f0:	63 9f       	mul	r22, r19
    31f2:	aa 27       	eor	r26, r26
    31f4:	f0 0d       	add	r31, r0
    31f6:	b1 1d       	adc	r27, r1
    31f8:	aa 1f       	adc	r26, r26
    31fa:	64 9f       	mul	r22, r20
    31fc:	66 27       	eor	r22, r22
    31fe:	b0 0d       	add	r27, r0
    3200:	a1 1d       	adc	r26, r1
    3202:	66 1f       	adc	r22, r22
    3204:	82 9f       	mul	r24, r18
    3206:	22 27       	eor	r18, r18
    3208:	b0 0d       	add	r27, r0
    320a:	a1 1d       	adc	r26, r1
    320c:	62 1f       	adc	r22, r18
    320e:	73 9f       	mul	r23, r19
    3210:	b0 0d       	add	r27, r0
    3212:	a1 1d       	adc	r26, r1
    3214:	62 1f       	adc	r22, r18
    3216:	83 9f       	mul	r24, r19
    3218:	a0 0d       	add	r26, r0
    321a:	61 1d       	adc	r22, r1
    321c:	22 1f       	adc	r18, r18
    321e:	74 9f       	mul	r23, r20
    3220:	33 27       	eor	r19, r19
    3222:	a0 0d       	add	r26, r0
    3224:	61 1d       	adc	r22, r1
    3226:	23 1f       	adc	r18, r19
    3228:	84 9f       	mul	r24, r20
    322a:	60 0d       	add	r22, r0
    322c:	21 1d       	adc	r18, r1
    322e:	82 2f       	mov	r24, r18
    3230:	76 2f       	mov	r23, r22
    3232:	6a 2f       	mov	r22, r26
    3234:	11 24       	eor	r1, r1
    3236:	9f 57       	subi	r25, 0x7F	; 127
    3238:	50 40       	sbci	r21, 0x00	; 0
    323a:	9a f0       	brmi	.+38     	; 0x3262 <__mulsf3_pse+0x88>
    323c:	f1 f0       	breq	.+60     	; 0x327a <__mulsf3_pse+0xa0>
    323e:	88 23       	and	r24, r24
    3240:	4a f0       	brmi	.+18     	; 0x3254 <__mulsf3_pse+0x7a>
    3242:	ee 0f       	add	r30, r30
    3244:	ff 1f       	adc	r31, r31
    3246:	bb 1f       	adc	r27, r27
    3248:	66 1f       	adc	r22, r22
    324a:	77 1f       	adc	r23, r23
    324c:	88 1f       	adc	r24, r24
    324e:	91 50       	subi	r25, 0x01	; 1
    3250:	50 40       	sbci	r21, 0x00	; 0
    3252:	a9 f7       	brne	.-22     	; 0x323e <__mulsf3_pse+0x64>
    3254:	9e 3f       	cpi	r25, 0xFE	; 254
    3256:	51 05       	cpc	r21, r1
    3258:	80 f0       	brcs	.+32     	; 0x327a <__mulsf3_pse+0xa0>
    325a:	0c 94 71 18 	jmp	0x30e2	; 0x30e2 <__fp_inf>
    325e:	0c 94 cc 18 	jmp	0x3198	; 0x3198 <__fp_szero>
    3262:	5f 3f       	cpi	r21, 0xFF	; 255
    3264:	e4 f3       	brlt	.-8      	; 0x325e <__mulsf3_pse+0x84>
    3266:	98 3e       	cpi	r25, 0xE8	; 232
    3268:	d4 f3       	brlt	.-12     	; 0x325e <__mulsf3_pse+0x84>
    326a:	86 95       	lsr	r24
    326c:	77 95       	ror	r23
    326e:	67 95       	ror	r22
    3270:	b7 95       	ror	r27
    3272:	f7 95       	ror	r31
    3274:	e7 95       	ror	r30
    3276:	9f 5f       	subi	r25, 0xFF	; 255
    3278:	c1 f7       	brne	.-16     	; 0x326a <__mulsf3_pse+0x90>
    327a:	fe 2b       	or	r31, r30
    327c:	88 0f       	add	r24, r24
    327e:	91 1d       	adc	r25, r1
    3280:	96 95       	lsr	r25
    3282:	87 95       	ror	r24
    3284:	97 f9       	bld	r25, 7
    3286:	08 95       	ret

00003288 <pow>:
    3288:	fa 01       	movw	r30, r20
    328a:	ee 0f       	add	r30, r30
    328c:	ff 1f       	adc	r31, r31
    328e:	30 96       	adiw	r30, 0x00	; 0
    3290:	21 05       	cpc	r18, r1
    3292:	31 05       	cpc	r19, r1
    3294:	a1 f1       	breq	.+104    	; 0x32fe <pow+0x76>
    3296:	61 15       	cp	r22, r1
    3298:	71 05       	cpc	r23, r1
    329a:	61 f4       	brne	.+24     	; 0x32b4 <pow+0x2c>
    329c:	80 38       	cpi	r24, 0x80	; 128
    329e:	bf e3       	ldi	r27, 0x3F	; 63
    32a0:	9b 07       	cpc	r25, r27
    32a2:	49 f1       	breq	.+82     	; 0x32f6 <pow+0x6e>
    32a4:	68 94       	set
    32a6:	90 38       	cpi	r25, 0x80	; 128
    32a8:	81 05       	cpc	r24, r1
    32aa:	61 f0       	breq	.+24     	; 0x32c4 <pow+0x3c>
    32ac:	80 38       	cpi	r24, 0x80	; 128
    32ae:	bf ef       	ldi	r27, 0xFF	; 255
    32b0:	9b 07       	cpc	r25, r27
    32b2:	41 f0       	breq	.+16     	; 0x32c4 <pow+0x3c>
    32b4:	99 23       	and	r25, r25
    32b6:	4a f5       	brpl	.+82     	; 0x330a <pow+0x82>
    32b8:	ff 3f       	cpi	r31, 0xFF	; 255
    32ba:	e1 05       	cpc	r30, r1
    32bc:	31 05       	cpc	r19, r1
    32be:	21 05       	cpc	r18, r1
    32c0:	19 f1       	breq	.+70     	; 0x3308 <pow+0x80>
    32c2:	e8 94       	clt
    32c4:	08 94       	sec
    32c6:	e7 95       	ror	r30
    32c8:	d9 01       	movw	r26, r18
    32ca:	aa 23       	and	r26, r26
    32cc:	29 f4       	brne	.+10     	; 0x32d8 <pow+0x50>
    32ce:	ab 2f       	mov	r26, r27
    32d0:	be 2f       	mov	r27, r30
    32d2:	f8 5f       	subi	r31, 0xF8	; 248
    32d4:	d0 f3       	brcs	.-12     	; 0x32ca <pow+0x42>
    32d6:	10 c0       	rjmp	.+32     	; 0x32f8 <pow+0x70>
    32d8:	ff 5f       	subi	r31, 0xFF	; 255
    32da:	70 f4       	brcc	.+28     	; 0x32f8 <pow+0x70>
    32dc:	a6 95       	lsr	r26
    32de:	e0 f7       	brcc	.-8      	; 0x32d8 <pow+0x50>
    32e0:	f7 39       	cpi	r31, 0x97	; 151
    32e2:	50 f0       	brcs	.+20     	; 0x32f8 <pow+0x70>
    32e4:	19 f0       	breq	.+6      	; 0x32ec <pow+0x64>
    32e6:	ff 3a       	cpi	r31, 0xAF	; 175
    32e8:	38 f4       	brcc	.+14     	; 0x32f8 <pow+0x70>
    32ea:	9f 77       	andi	r25, 0x7F	; 127
    32ec:	9f 93       	push	r25
    32ee:	0d d0       	rcall	.+26     	; 0x330a <pow+0x82>
    32f0:	0f 90       	pop	r0
    32f2:	07 fc       	sbrc	r0, 7
    32f4:	90 58       	subi	r25, 0x80	; 128
    32f6:	08 95       	ret
    32f8:	46 f0       	brts	.+16     	; 0x330a <pow+0x82>
    32fa:	0c 94 77 18 	jmp	0x30ee	; 0x30ee <__fp_nan>
    32fe:	60 e0       	ldi	r22, 0x00	; 0
    3300:	70 e0       	ldi	r23, 0x00	; 0
    3302:	80 e8       	ldi	r24, 0x80	; 128
    3304:	9f e3       	ldi	r25, 0x3F	; 63
    3306:	08 95       	ret
    3308:	4f e7       	ldi	r20, 0x7F	; 127
    330a:	9f 77       	andi	r25, 0x7F	; 127
    330c:	5f 93       	push	r21
    330e:	4f 93       	push	r20
    3310:	3f 93       	push	r19
    3312:	2f 93       	push	r18
    3314:	0e 94 3f 1a 	call	0x347e	; 0x347e <log>
    3318:	2f 91       	pop	r18
    331a:	3f 91       	pop	r19
    331c:	4f 91       	pop	r20
    331e:	5f 91       	pop	r21
    3320:	0e 94 d7 18 	call	0x31ae	; 0x31ae <__mulsf3>
    3324:	0c 94 9c 19 	jmp	0x3338	; 0x3338 <exp>
    3328:	29 f4       	brne	.+10     	; 0x3334 <pow+0xac>
    332a:	16 f0       	brts	.+4      	; 0x3330 <pow+0xa8>
    332c:	0c 94 71 18 	jmp	0x30e2	; 0x30e2 <__fp_inf>
    3330:	0c 94 cb 18 	jmp	0x3196	; 0x3196 <__fp_zero>
    3334:	0c 94 77 18 	jmp	0x30ee	; 0x30ee <__fp_nan>

00003338 <exp>:
    3338:	0e 94 b1 18 	call	0x3162	; 0x3162 <__fp_splitA>
    333c:	a8 f3       	brcs	.-22     	; 0x3328 <pow+0xa0>
    333e:	96 38       	cpi	r25, 0x86	; 134
    3340:	a0 f7       	brcc	.-24     	; 0x332a <pow+0xa2>
    3342:	07 f8       	bld	r0, 7
    3344:	0f 92       	push	r0
    3346:	e8 94       	clt
    3348:	2b e3       	ldi	r18, 0x3B	; 59
    334a:	3a ea       	ldi	r19, 0xAA	; 170
    334c:	48 eb       	ldi	r20, 0xB8	; 184
    334e:	5f e7       	ldi	r21, 0x7F	; 127
    3350:	0e 94 ed 18 	call	0x31da	; 0x31da <__mulsf3_pse>
    3354:	0f 92       	push	r0
    3356:	0f 92       	push	r0
    3358:	0f 92       	push	r0
    335a:	4d b7       	in	r20, 0x3d	; 61
    335c:	5e b7       	in	r21, 0x3e	; 62
    335e:	0f 92       	push	r0
    3360:	0e 94 87 1a 	call	0x350e	; 0x350e <modf>
    3364:	e4 e6       	ldi	r30, 0x64	; 100
    3366:	f0 e0       	ldi	r31, 0x00	; 0
    3368:	0e 94 ce 19 	call	0x339c	; 0x339c <__fp_powser>
    336c:	4f 91       	pop	r20
    336e:	5f 91       	pop	r21
    3370:	ef 91       	pop	r30
    3372:	ff 91       	pop	r31
    3374:	e5 95       	asr	r30
    3376:	ee 1f       	adc	r30, r30
    3378:	ff 1f       	adc	r31, r31
    337a:	49 f0       	breq	.+18     	; 0x338e <exp+0x56>
    337c:	fe 57       	subi	r31, 0x7E	; 126
    337e:	e0 68       	ori	r30, 0x80	; 128
    3380:	44 27       	eor	r20, r20
    3382:	ee 0f       	add	r30, r30
    3384:	44 1f       	adc	r20, r20
    3386:	fa 95       	dec	r31
    3388:	e1 f7       	brne	.-8      	; 0x3382 <exp+0x4a>
    338a:	41 95       	neg	r20
    338c:	55 0b       	sbc	r21, r21
    338e:	0e 94 01 1a 	call	0x3402	; 0x3402 <ldexp>
    3392:	0f 90       	pop	r0
    3394:	07 fe       	sbrs	r0, 7
    3396:	0c 94 f5 19 	jmp	0x33ea	; 0x33ea <inverse>
    339a:	08 95       	ret

0000339c <__fp_powser>:
    339c:	df 93       	push	r29
    339e:	cf 93       	push	r28
    33a0:	1f 93       	push	r17
    33a2:	0f 93       	push	r16
    33a4:	ff 92       	push	r15
    33a6:	ef 92       	push	r14
    33a8:	df 92       	push	r13
    33aa:	7b 01       	movw	r14, r22
    33ac:	8c 01       	movw	r16, r24
    33ae:	68 94       	set
    33b0:	06 c0       	rjmp	.+12     	; 0x33be <__fp_powser+0x22>
    33b2:	da 2e       	mov	r13, r26
    33b4:	ef 01       	movw	r28, r30
    33b6:	0e 94 ea 18 	call	0x31d4	; 0x31d4 <__mulsf3x>
    33ba:	fe 01       	movw	r30, r28
    33bc:	e8 94       	clt
    33be:	a5 91       	lpm	r26, Z+
    33c0:	25 91       	lpm	r18, Z+
    33c2:	35 91       	lpm	r19, Z+
    33c4:	45 91       	lpm	r20, Z+
    33c6:	55 91       	lpm	r21, Z+
    33c8:	a6 f3       	brts	.-24     	; 0x33b2 <__fp_powser+0x16>
    33ca:	ef 01       	movw	r28, r30
    33cc:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <__addsf3x>
    33d0:	fe 01       	movw	r30, r28
    33d2:	97 01       	movw	r18, r14
    33d4:	a8 01       	movw	r20, r16
    33d6:	da 94       	dec	r13
    33d8:	69 f7       	brne	.-38     	; 0x33b4 <__fp_powser+0x18>
    33da:	df 90       	pop	r13
    33dc:	ef 90       	pop	r14
    33de:	ff 90       	pop	r15
    33e0:	0f 91       	pop	r16
    33e2:	1f 91       	pop	r17
    33e4:	cf 91       	pop	r28
    33e6:	df 91       	pop	r29
    33e8:	08 95       	ret

000033ea <inverse>:
    33ea:	9b 01       	movw	r18, r22
    33ec:	ac 01       	movw	r20, r24
    33ee:	60 e0       	ldi	r22, 0x00	; 0
    33f0:	70 e0       	ldi	r23, 0x00	; 0
    33f2:	80 e8       	ldi	r24, 0x80	; 128
    33f4:	9f e3       	ldi	r25, 0x3F	; 63
    33f6:	0c 94 33 17 	jmp	0x2e66	; 0x2e66 <__divsf3>
    33fa:	0c 94 71 18 	jmp	0x30e2	; 0x30e2 <__fp_inf>
    33fe:	0c 94 bb 1a 	jmp	0x3576	; 0x3576 <__fp_mpack>

00003402 <ldexp>:
    3402:	0e 94 b1 18 	call	0x3162	; 0x3162 <__fp_splitA>
    3406:	d8 f3       	brcs	.-10     	; 0x33fe <inverse+0x14>
    3408:	99 23       	and	r25, r25
    340a:	c9 f3       	breq	.-14     	; 0x33fe <inverse+0x14>
    340c:	94 0f       	add	r25, r20
    340e:	51 1d       	adc	r21, r1
    3410:	a3 f3       	brvs	.-24     	; 0x33fa <inverse+0x10>
    3412:	91 50       	subi	r25, 0x01	; 1
    3414:	50 40       	sbci	r21, 0x00	; 0
    3416:	94 f0       	brlt	.+36     	; 0x343c <ldexp+0x3a>
    3418:	59 f0       	breq	.+22     	; 0x3430 <ldexp+0x2e>
    341a:	88 23       	and	r24, r24
    341c:	32 f0       	brmi	.+12     	; 0x342a <ldexp+0x28>
    341e:	66 0f       	add	r22, r22
    3420:	77 1f       	adc	r23, r23
    3422:	88 1f       	adc	r24, r24
    3424:	91 50       	subi	r25, 0x01	; 1
    3426:	50 40       	sbci	r21, 0x00	; 0
    3428:	c1 f7       	brne	.-16     	; 0x341a <ldexp+0x18>
    342a:	9e 3f       	cpi	r25, 0xFE	; 254
    342c:	51 05       	cpc	r21, r1
    342e:	2c f7       	brge	.-54     	; 0x33fa <inverse+0x10>
    3430:	88 0f       	add	r24, r24
    3432:	91 1d       	adc	r25, r1
    3434:	96 95       	lsr	r25
    3436:	87 95       	ror	r24
    3438:	97 f9       	bld	r25, 7
    343a:	08 95       	ret
    343c:	5f 3f       	cpi	r21, 0xFF	; 255
    343e:	ac f0       	brlt	.+42     	; 0x346a <ldexp+0x68>
    3440:	98 3e       	cpi	r25, 0xE8	; 232
    3442:	9c f0       	brlt	.+38     	; 0x346a <ldexp+0x68>
    3444:	bb 27       	eor	r27, r27
    3446:	86 95       	lsr	r24
    3448:	77 95       	ror	r23
    344a:	67 95       	ror	r22
    344c:	b7 95       	ror	r27
    344e:	08 f4       	brcc	.+2      	; 0x3452 <ldexp+0x50>
    3450:	b1 60       	ori	r27, 0x01	; 1
    3452:	93 95       	inc	r25
    3454:	c1 f7       	brne	.-16     	; 0x3446 <ldexp+0x44>
    3456:	bb 0f       	add	r27, r27
    3458:	58 f7       	brcc	.-42     	; 0x3430 <ldexp+0x2e>
    345a:	11 f4       	brne	.+4      	; 0x3460 <ldexp+0x5e>
    345c:	60 ff       	sbrs	r22, 0
    345e:	e8 cf       	rjmp	.-48     	; 0x3430 <ldexp+0x2e>
    3460:	6f 5f       	subi	r22, 0xFF	; 255
    3462:	7f 4f       	sbci	r23, 0xFF	; 255
    3464:	8f 4f       	sbci	r24, 0xFF	; 255
    3466:	9f 4f       	sbci	r25, 0xFF	; 255
    3468:	e3 cf       	rjmp	.-58     	; 0x3430 <ldexp+0x2e>
    346a:	0c 94 cc 18 	jmp	0x3198	; 0x3198 <__fp_szero>
    346e:	16 f0       	brts	.+4      	; 0x3474 <ldexp+0x72>
    3470:	0c 94 bb 1a 	jmp	0x3576	; 0x3576 <__fp_mpack>
    3474:	0c 94 77 18 	jmp	0x30ee	; 0x30ee <__fp_nan>
    3478:	68 94       	set
    347a:	0c 94 71 18 	jmp	0x30e2	; 0x30e2 <__fp_inf>

0000347e <log>:
    347e:	0e 94 b1 18 	call	0x3162	; 0x3162 <__fp_splitA>
    3482:	a8 f3       	brcs	.-22     	; 0x346e <ldexp+0x6c>
    3484:	99 23       	and	r25, r25
    3486:	c1 f3       	breq	.-16     	; 0x3478 <ldexp+0x76>
    3488:	ae f3       	brts	.-22     	; 0x3474 <ldexp+0x72>
    348a:	df 93       	push	r29
    348c:	cf 93       	push	r28
    348e:	1f 93       	push	r17
    3490:	0f 93       	push	r16
    3492:	ff 92       	push	r15
    3494:	c9 2f       	mov	r28, r25
    3496:	dd 27       	eor	r29, r29
    3498:	88 23       	and	r24, r24
    349a:	2a f0       	brmi	.+10     	; 0x34a6 <log+0x28>
    349c:	21 97       	sbiw	r28, 0x01	; 1
    349e:	66 0f       	add	r22, r22
    34a0:	77 1f       	adc	r23, r23
    34a2:	88 1f       	adc	r24, r24
    34a4:	da f7       	brpl	.-10     	; 0x349c <log+0x1e>
    34a6:	20 e0       	ldi	r18, 0x00	; 0
    34a8:	30 e0       	ldi	r19, 0x00	; 0
    34aa:	40 e8       	ldi	r20, 0x80	; 128
    34ac:	5f eb       	ldi	r21, 0xBF	; 191
    34ae:	9f e3       	ldi	r25, 0x3F	; 63
    34b0:	88 39       	cpi	r24, 0x98	; 152
    34b2:	20 f0       	brcs	.+8      	; 0x34bc <log+0x3e>
    34b4:	80 3e       	cpi	r24, 0xE0	; 224
    34b6:	38 f0       	brcs	.+14     	; 0x34c6 <log+0x48>
    34b8:	21 96       	adiw	r28, 0x01	; 1
    34ba:	8f 77       	andi	r24, 0x7F	; 127
    34bc:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <__addsf3>
    34c0:	ec e8       	ldi	r30, 0x8C	; 140
    34c2:	f0 e0       	ldi	r31, 0x00	; 0
    34c4:	04 c0       	rjmp	.+8      	; 0x34ce <log+0x50>
    34c6:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <__addsf3>
    34ca:	e9 eb       	ldi	r30, 0xB9	; 185
    34cc:	f0 e0       	ldi	r31, 0x00	; 0
    34ce:	0e 94 ce 19 	call	0x339c	; 0x339c <__fp_powser>
    34d2:	8b 01       	movw	r16, r22
    34d4:	be 01       	movw	r22, r28
    34d6:	ec 01       	movw	r28, r24
    34d8:	fb 2e       	mov	r15, r27
    34da:	6f 57       	subi	r22, 0x7F	; 127
    34dc:	71 09       	sbc	r23, r1
    34de:	75 95       	asr	r23
    34e0:	77 1f       	adc	r23, r23
    34e2:	88 0b       	sbc	r24, r24
    34e4:	99 0b       	sbc	r25, r25
    34e6:	0e 94 12 18 	call	0x3024	; 0x3024 <__floatsisf>
    34ea:	28 e1       	ldi	r18, 0x18	; 24
    34ec:	32 e7       	ldi	r19, 0x72	; 114
    34ee:	41 e3       	ldi	r20, 0x31	; 49
    34f0:	5f e3       	ldi	r21, 0x3F	; 63
    34f2:	0e 94 ea 18 	call	0x31d4	; 0x31d4 <__mulsf3x>
    34f6:	af 2d       	mov	r26, r15
    34f8:	98 01       	movw	r18, r16
    34fa:	ae 01       	movw	r20, r28
    34fc:	ff 90       	pop	r15
    34fe:	0f 91       	pop	r16
    3500:	1f 91       	pop	r17
    3502:	cf 91       	pop	r28
    3504:	df 91       	pop	r29
    3506:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <__addsf3x>
    350a:	0c 94 98 18 	jmp	0x3130	; 0x3130 <__fp_round>

0000350e <modf>:
    350e:	fa 01       	movw	r30, r20
    3510:	dc 01       	movw	r26, r24
    3512:	aa 0f       	add	r26, r26
    3514:	bb 1f       	adc	r27, r27
    3516:	9b 01       	movw	r18, r22
    3518:	ac 01       	movw	r20, r24
    351a:	bf 57       	subi	r27, 0x7F	; 127
    351c:	28 f4       	brcc	.+10     	; 0x3528 <modf+0x1a>
    351e:	22 27       	eor	r18, r18
    3520:	33 27       	eor	r19, r19
    3522:	44 27       	eor	r20, r20
    3524:	50 78       	andi	r21, 0x80	; 128
    3526:	20 c0       	rjmp	.+64     	; 0x3568 <modf+0x5a>
    3528:	b7 51       	subi	r27, 0x17	; 23
    352a:	90 f4       	brcc	.+36     	; 0x3550 <modf+0x42>
    352c:	ab 2f       	mov	r26, r27
    352e:	00 24       	eor	r0, r0
    3530:	46 95       	lsr	r20
    3532:	37 95       	ror	r19
    3534:	27 95       	ror	r18
    3536:	01 1c       	adc	r0, r1
    3538:	a3 95       	inc	r26
    353a:	d2 f3       	brmi	.-12     	; 0x3530 <modf+0x22>
    353c:	00 20       	and	r0, r0
    353e:	71 f0       	breq	.+28     	; 0x355c <modf+0x4e>
    3540:	22 0f       	add	r18, r18
    3542:	33 1f       	adc	r19, r19
    3544:	44 1f       	adc	r20, r20
    3546:	b3 95       	inc	r27
    3548:	da f3       	brmi	.-10     	; 0x3540 <modf+0x32>
    354a:	0e d0       	rcall	.+28     	; 0x3568 <modf+0x5a>
    354c:	0c 94 c1 16 	jmp	0x2d82	; 0x2d82 <__subsf3>
    3550:	61 30       	cpi	r22, 0x01	; 1
    3552:	71 05       	cpc	r23, r1
    3554:	a0 e8       	ldi	r26, 0x80	; 128
    3556:	8a 07       	cpc	r24, r26
    3558:	b9 46       	sbci	r27, 0x69	; 105
    355a:	30 f4       	brcc	.+12     	; 0x3568 <modf+0x5a>
    355c:	9b 01       	movw	r18, r22
    355e:	ac 01       	movw	r20, r24
    3560:	66 27       	eor	r22, r22
    3562:	77 27       	eor	r23, r23
    3564:	88 27       	eor	r24, r24
    3566:	90 78       	andi	r25, 0x80	; 128
    3568:	30 96       	adiw	r30, 0x00	; 0
    356a:	21 f0       	breq	.+8      	; 0x3574 <modf+0x66>
    356c:	20 83       	st	Z, r18
    356e:	31 83       	std	Z+1, r19	; 0x01
    3570:	42 83       	std	Z+2, r20	; 0x02
    3572:	53 83       	std	Z+3, r21	; 0x03
    3574:	08 95       	ret

00003576 <__fp_mpack>:
    3576:	9f 3f       	cpi	r25, 0xFF	; 255
    3578:	31 f0       	breq	.+12     	; 0x3586 <__fp_mpack_finite+0xc>

0000357a <__fp_mpack_finite>:
    357a:	91 50       	subi	r25, 0x01	; 1
    357c:	20 f4       	brcc	.+8      	; 0x3586 <__fp_mpack_finite+0xc>
    357e:	87 95       	ror	r24
    3580:	77 95       	ror	r23
    3582:	67 95       	ror	r22
    3584:	b7 95       	ror	r27
    3586:	88 0f       	add	r24, r24
    3588:	91 1d       	adc	r25, r1
    358a:	96 95       	lsr	r25
    358c:	87 95       	ror	r24
    358e:	97 f9       	bld	r25, 7
    3590:	08 95       	ret

00003592 <__udivmodsi4>:
    3592:	a1 e2       	ldi	r26, 0x21	; 33
    3594:	1a 2e       	mov	r1, r26
    3596:	aa 1b       	sub	r26, r26
    3598:	bb 1b       	sub	r27, r27
    359a:	fd 01       	movw	r30, r26
    359c:	0d c0       	rjmp	.+26     	; 0x35b8 <__udivmodsi4_ep>

0000359e <__udivmodsi4_loop>:
    359e:	aa 1f       	adc	r26, r26
    35a0:	bb 1f       	adc	r27, r27
    35a2:	ee 1f       	adc	r30, r30
    35a4:	ff 1f       	adc	r31, r31
    35a6:	a2 17       	cp	r26, r18
    35a8:	b3 07       	cpc	r27, r19
    35aa:	e4 07       	cpc	r30, r20
    35ac:	f5 07       	cpc	r31, r21
    35ae:	20 f0       	brcs	.+8      	; 0x35b8 <__udivmodsi4_ep>
    35b0:	a2 1b       	sub	r26, r18
    35b2:	b3 0b       	sbc	r27, r19
    35b4:	e4 0b       	sbc	r30, r20
    35b6:	f5 0b       	sbc	r31, r21

000035b8 <__udivmodsi4_ep>:
    35b8:	66 1f       	adc	r22, r22
    35ba:	77 1f       	adc	r23, r23
    35bc:	88 1f       	adc	r24, r24
    35be:	99 1f       	adc	r25, r25
    35c0:	1a 94       	dec	r1
    35c2:	69 f7       	brne	.-38     	; 0x359e <__udivmodsi4_loop>
    35c4:	60 95       	com	r22
    35c6:	70 95       	com	r23
    35c8:	80 95       	com	r24
    35ca:	90 95       	com	r25
    35cc:	9b 01       	movw	r18, r22
    35ce:	ac 01       	movw	r20, r24
    35d0:	bd 01       	movw	r22, r26
    35d2:	cf 01       	movw	r24, r30
    35d4:	08 95       	ret

000035d6 <__tablejump2__>:
    35d6:	ee 0f       	add	r30, r30
    35d8:	ff 1f       	adc	r31, r31
    35da:	05 90       	lpm	r0, Z+
    35dc:	f4 91       	lpm	r31, Z
    35de:	e0 2d       	mov	r30, r0
    35e0:	09 94       	ijmp

000035e2 <_exit>:
    35e2:	f8 94       	cli

000035e4 <__stop_program>:
    35e4:	ff cf       	rjmp	.-2      	; 0x35e4 <__stop_program>
